// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

internal static class ScriptObjectListProperty_Reader
{
    public static Mutagen.Bethesda.Skyrim.ScriptObjectListProperty ReadInner(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
        Mutagen.Bethesda.Skyrim.ScriptObjectListProperty cls = new();
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
                break;
            var prop1 = reader.GetString();
            reader.Read();
            switch(prop1)
            {
                case "Objects":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm2 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop3 = reader.GetString();
                                    reader.Read();
                                    switch(prop3)
                                    {
                                        case "Object":
                                            itm2.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                            break;
                                        case "Alias":
                                            itm2.Alias = reader.GetInt16();
                                            break;
                                        case "Unused":
                                            itm2.Unused = reader.GetUInt16();
                                            break;
                                        case "Name":
                                            itm2.Name = reader.GetString();
                                            break;
                                        case "Flags":
                                            itm2.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            cls.Objects.Add(itm2);
                        }
                    }
                    break;
                case "Name":
                    cls.Name = reader.GetString();
                    break;
                case "Flags":
                    cls.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                    break;
            }
        }
        return cls;
    }
}
