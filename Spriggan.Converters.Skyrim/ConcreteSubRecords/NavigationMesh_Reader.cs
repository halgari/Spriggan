// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

internal static class NavigationMesh_Reader
{
    public static Mutagen.Bethesda.Skyrim.NavigationMesh ReadInner(ref Utf8JsonReader reader, FormKey formKey, JsonSerializerOptions options)
    {
        var cls = new Mutagen.Bethesda.Skyrim.NavigationMesh(formKey, SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
                break;
            var prop1 = reader.GetString();
            reader.Read();
            switch(prop1)
            {
                case "Data":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop2 = reader.GetString();
                            reader.Read();
                            switch(prop2)
                            {
                                case "NavmeshVersion":
                                    cls.Data.NavmeshVersion = reader.GetUInt32();
                                    break;
                                case "Magic":
                                    cls.Data.Magic = reader.GetUInt32();
                                    break;
                                case "Parent":
                                    cls.Data.Parent = ANavmeshParent_Reader.ReadOuter(ref reader, options);
                                    break;
                                case "Vertices":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Noggog.P3Float itm3 = default;
                                            itm3 = SerializerExtensions.ReadP3Float(ref reader, options);
                                            cls.Data.Vertices.Add(itm3);
                                        }
                                    }
                                    break;
                                case "Triangles":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.NavmeshTriangle itm4 = new Mutagen.Bethesda.Skyrim.NavmeshTriangle();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop5 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop5)
                                                    {
                                                        case "Vertices":
                                                            itm4.Vertices = SerializerExtensions.ReadP3Int16(ref reader, options);
                                                            break;
                                                        case "EdgeLink_0_1":
                                                            itm4.EdgeLink_0_1 = reader.GetInt16();
                                                            break;
                                                        case "EdgeLink_1_2":
                                                            itm4.EdgeLink_1_2 = reader.GetInt16();
                                                            break;
                                                        case "EdgeLink_2_0":
                                                            itm4.EdgeLink_2_0 = reader.GetInt16();
                                                            break;
                                                        case "Flags":
                                                            itm4.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavmeshTriangle.Flag>(ref reader, options);
                                                            break;
                                                        case "CoverFlags":
                                                            itm4.CoverFlags = reader.GetUInt16();
                                                            break;
                                                        case "IsCover":
                                                            itm4.IsCover = reader.GetBoolean();
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            cls.Data.Triangles.Add(itm4);
                                        }
                                    }
                                    break;
                                case "EdgeLinks":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.EdgeLink itm6 = new Mutagen.Bethesda.Skyrim.EdgeLink();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop7 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop7)
                                                    {
                                                        case "Unknown":
                                                            itm6.Unknown = reader.GetInt32();
                                                            break;
                                                        case "Mesh":
                                                            itm6.Mesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                            break;
                                                        case "TriangleIndex":
                                                            itm6.TriangleIndex = reader.GetInt16();
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            cls.Data.EdgeLinks.Add(itm6);
                                        }
                                    }
                                    break;
                                case "DoorTriangles":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.DoorTriangle itm8 = new Mutagen.Bethesda.Skyrim.DoorTriangle();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop9 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop9)
                                                    {
                                                        case "TriangleBeforeDoor":
                                                            itm8.TriangleBeforeDoor = reader.GetInt16();
                                                            break;
                                                        case "Unknown":
                                                            itm8.Unknown = reader.GetInt32();
                                                            break;
                                                        case "Door":
                                                            itm8.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            cls.Data.DoorTriangles.Add(itm8);
                                        }
                                    }
                                    break;
                                case "NavmeshGridDivisor":
                                    cls.Data.NavmeshGridDivisor = reader.GetUInt32();
                                    break;
                                case "MaxDistanceX":
                                    cls.Data.MaxDistanceX = reader.GetSingle();
                                    break;
                                case "MaxDistanceY":
                                    cls.Data.MaxDistanceY = reader.GetSingle();
                                    break;
                                case "Min":
                                    cls.Data.Min = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Max":
                                    cls.Data.Max = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "NavmeshGrid":
                                    cls.Data.NavmeshGrid = reader.GetBytesFromBase64();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "ONAM":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.ONAM = reader.GetBytesFromBase64();
                    }
                    break;
                case "PNAM":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.PNAM = reader.GetBytesFromBase64();
                    }
                    break;
                case "NNAM":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.NNAM = reader.GetBytesFromBase64();
                    }
                    break;
                case "MajorFlags":
                    cls.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavigationMesh.MajorFlag>(ref reader, options);
                    break;
            }
        }
        return cls;
    }
}
