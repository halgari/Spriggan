// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

internal static class PlacedObject_Writer
{
    public static void WriteInner(Utf8JsonWriter writer, Mutagen.Bethesda.Skyrim.IPlacedObjectGetter? value, JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteStartObject();
            
            // VirtualMachineAdapter
            writer.WritePropertyName("VirtualMachineAdapter");
            if (value.VirtualMachineAdapter != null)
            {
                writer.WriteStartObject();
                
                // Version
                writer.WritePropertyName("Version");
                writer.WriteNumberValue(value.VirtualMachineAdapter.Version);
                
                // ObjectFormat
                writer.WritePropertyName("ObjectFormat");
                writer.WriteNumberValue((uint)value.VirtualMachineAdapter.ObjectFormat);
                
                // Scripts
                writer.WritePropertyName("Scripts");
                if (value.VirtualMachineAdapter.Scripts != null)
                {
                    writer.WriteStartArray();
                    foreach(var itm1 in value.VirtualMachineAdapter.Scripts)
                    {
                        if (itm1 != null)
                        {
                            writer.WriteStartObject();
                            
                            // Name
                            writer.WritePropertyName("Name");
                            writer.WriteStringValue(itm1.Name);
                            
                            // Flags
                            writer.WritePropertyName("Flags");
                            writer.WriteEnum(itm1.Flags);
                            
                            // Properties
                            writer.WritePropertyName("Properties");
                            if (itm1.Properties != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm2 in itm1.Properties)
                                {
                                    IScriptPropertyGetter_Writer.WriteOuter(writer, itm2, options);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Base
            writer.WritePropertyName("Base");
            if (value.Base.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.Base.FormKey.ToString());
            
            // BoundHalfExtents
            writer.WritePropertyName("BoundHalfExtents");
            if (value.BoundHalfExtents == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteP3Float(value.BoundHalfExtents.Value, options);
            }
            
            // Primitive
            writer.WritePropertyName("Primitive");
            if (value.Primitive != null)
            {
                writer.WriteStartObject();
                
                // Bounds
                writer.WritePropertyName("Bounds");
                writer.WriteP3Float(value.Primitive.Bounds, options);
                
                // Color
                writer.WritePropertyName("Color");
                writer.WriteStringValue(value.Primitive.Color.ToArgb().ToString("x8"));
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteNumberValue(value.Primitive.Unknown);
                
                // Type
                writer.WritePropertyName("Type");
                writer.WriteEnum(value.Primitive.Type);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // XORD
            writer.WritePropertyName("XORD");
            if (value.XORD == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.XORD.Value);
            }
            
            // OcclusionPlane
            writer.WritePropertyName("OcclusionPlane");
            if (value.OcclusionPlane != null)
            {
                writer.WriteStartObject();
                
                // Width
                writer.WritePropertyName("Width");
                writer.WriteNumberValue(value.OcclusionPlane.Width);
                
                // Height
                writer.WritePropertyName("Height");
                writer.WriteNumberValue(value.OcclusionPlane.Height);
                
                // Position
                writer.WritePropertyName("Position");
                writer.WriteP3Float(value.OcclusionPlane.Position, options);
                
                // RotationQ1
                writer.WritePropertyName("RotationQ1");
                writer.WriteNumberValue(value.OcclusionPlane.RotationQ1);
                
                // RotationQ2
                writer.WritePropertyName("RotationQ2");
                writer.WriteNumberValue(value.OcclusionPlane.RotationQ2);
                
                // RotationQ3
                writer.WritePropertyName("RotationQ3");
                writer.WriteNumberValue(value.OcclusionPlane.RotationQ3);
                
                // RotationQ4
                writer.WritePropertyName("RotationQ4");
                writer.WriteNumberValue(value.OcclusionPlane.RotationQ4);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Portals
            writer.WritePropertyName("Portals");
            if (value.Portals != null)
            {
                writer.WriteStartArray();
                foreach(var itm3 in value.Portals)
                {
                    if (itm3 != null)
                    {
                        writer.WriteStartObject();
                        
                        // Origin
                        writer.WritePropertyName("Origin");
                        writer.WriteStringValue(itm3.Origin.FormKey.ToString());
                        
                        // Destination
                        writer.WritePropertyName("Destination");
                        writer.WriteStringValue(itm3.Destination.FormKey.ToString());
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // RoomPortal
            writer.WritePropertyName("RoomPortal");
            if (value.RoomPortal != null)
            {
                writer.WriteStartObject();
                
                // Width
                writer.WritePropertyName("Width");
                writer.WriteNumberValue(value.RoomPortal.Width);
                
                // Height
                writer.WritePropertyName("Height");
                writer.WriteNumberValue(value.RoomPortal.Height);
                
                // Position
                writer.WritePropertyName("Position");
                writer.WriteP3Float(value.RoomPortal.Position, options);
                
                // RotationQ1
                writer.WritePropertyName("RotationQ1");
                writer.WriteNumberValue(value.RoomPortal.RotationQ1);
                
                // RotationQ2
                writer.WritePropertyName("RotationQ2");
                writer.WriteNumberValue(value.RoomPortal.RotationQ2);
                
                // RotationQ3
                writer.WritePropertyName("RotationQ3");
                writer.WriteNumberValue(value.RoomPortal.RotationQ3);
                
                // RotationQ4
                writer.WritePropertyName("RotationQ4");
                writer.WriteNumberValue(value.RoomPortal.RotationQ4);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Unknown
            writer.WritePropertyName("Unknown");
            writer.WriteNumberValue(value.Unknown);
            
            // LightingTemplate
            writer.WritePropertyName("LightingTemplate");
            if (value.LightingTemplate.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.LightingTemplate.FormKey.ToString());
            
            // ImageSpace
            writer.WritePropertyName("ImageSpace");
            if (value.ImageSpace.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.ImageSpace.FormKey.ToString());
            
            // LinkedRooms
            writer.WritePropertyName("LinkedRooms");
            if (value.LinkedRooms != null)
            {
                writer.WriteStartArray();
                foreach(var itm4 in value.LinkedRooms)
                {
                    writer.WriteStringValue(itm4.FormKey.ToString());
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // IsMultiBoundPrimitive
            writer.WritePropertyName("IsMultiBoundPrimitive");
            writer.WriteBooleanValue(value.IsMultiBoundPrimitive);
            
            // RagdollData
            writer.WritePropertyName("RagdollData");
            if (value.RagdollData == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.RagdollData.Value);
            }
            
            // RagdollBipedData
            writer.WritePropertyName("RagdollBipedData");
            if (value.RagdollBipedData == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.RagdollBipedData.Value);
            }
            
            // Radius
            writer.WritePropertyName("Radius");
            if (value.Radius == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.Radius.Value);
            }
            
            // Reflections
            writer.WritePropertyName("Reflections");
            if (value.Reflections != null)
            {
                writer.WriteStartArray();
                foreach(var itm5 in value.Reflections)
                {
                    if (itm5 != null)
                    {
                        writer.WriteStartObject();
                        
                        // Versioning
                        writer.WritePropertyName("Versioning");
                        writer.WriteFlags(itm5.Versioning);
                        
                        // Water
                        writer.WritePropertyName("Water");
                        writer.WriteStringValue(itm5.Water.FormKey.ToString());
                        
                        // Type
                        writer.WritePropertyName("Type");
                        writer.WriteFlags(itm5.Type);
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // LitWater
            writer.WritePropertyName("LitWater");
            if (value.LitWater != null)
            {
                writer.WriteStartArray();
                foreach(var itm6 in value.LitWater)
                {
                    writer.WriteStringValue(itm6.FormKey.ToString());
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Emittance
            writer.WritePropertyName("Emittance");
            if (value.Emittance.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.Emittance.FormKey.ToString());
            
            // LightData
            writer.WritePropertyName("LightData");
            if (value.LightData != null)
            {
                writer.WriteStartObject();
                
                // Versioning
                writer.WritePropertyName("Versioning");
                writer.WriteFlags(value.LightData.Versioning);
                
                // FovOffset
                writer.WritePropertyName("FovOffset");
                writer.WriteNumberValue(value.LightData.FovOffset);
                
                // FadeOffset
                writer.WritePropertyName("FadeOffset");
                writer.WriteNumberValue(value.LightData.FadeOffset);
                
                // EndDistanceCap
                writer.WritePropertyName("EndDistanceCap");
                writer.WriteNumberValue(value.LightData.EndDistanceCap);
                
                // ShadowDepthBias
                writer.WritePropertyName("ShadowDepthBias");
                writer.WriteNumberValue(value.LightData.ShadowDepthBias);
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteNumberValue(value.LightData.Unknown);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Alpha
            writer.WritePropertyName("Alpha");
            if (value.Alpha != null)
            {
                writer.WriteStartObject();
                
                // Cutoff
                writer.WritePropertyName("Cutoff");
                writer.WriteNumberValue(value.Alpha.Cutoff);
                
                // Base
                writer.WritePropertyName("Base");
                writer.WriteNumberValue(value.Alpha.Base);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // TeleportDestination
            writer.WritePropertyName("TeleportDestination");
            if (value.TeleportDestination != null)
            {
                writer.WriteStartObject();
                
                // Door
                writer.WritePropertyName("Door");
                writer.WriteStringValue(value.TeleportDestination.Door.FormKey.ToString());
                
                // Position
                writer.WritePropertyName("Position");
                writer.WriteP3Float(value.TeleportDestination.Position, options);
                
                // Rotation
                writer.WritePropertyName("Rotation");
                writer.WriteP3Float(value.TeleportDestination.Rotation, options);
                
                // Flags
                writer.WritePropertyName("Flags");
                writer.WriteFlags(value.TeleportDestination.Flags);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // TeleportMessageBox
            writer.WritePropertyName("TeleportMessageBox");
            if (value.TeleportMessageBox.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.TeleportMessageBox.FormKey.ToString());
            
            // MultiboundReference
            writer.WritePropertyName("MultiboundReference");
            if (value.MultiboundReference.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.MultiboundReference.FormKey.ToString());
            
            // XWCN
            writer.WritePropertyName("XWCN");
            if (value.XWCN == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.XWCN.Value);
            }
            
            // XWCS
            writer.WritePropertyName("XWCS");
            if (value.XWCS == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.XWCS.Value);
            }
            
            // WaterVelocity
            writer.WritePropertyName("WaterVelocity");
            if (value.WaterVelocity != null)
            {
                writer.WriteStartObject();
                
                // Offset
                writer.WritePropertyName("Offset");
                writer.WriteP3Float(value.WaterVelocity.Offset, options);
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteNumberValue(value.WaterVelocity.Unknown);
                
                // Angle
                writer.WritePropertyName("Angle");
                writer.WriteP3Float(value.WaterVelocity.Angle, options);
                
                // Unknown2
                writer.WritePropertyName("Unknown2");
                writer.WriteBase64StringValue(value.WaterVelocity.Unknown2);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // XCVL
            writer.WritePropertyName("XCVL");
            if (value.XCVL == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.XCVL.Value);
            }
            
            // XCZR
            writer.WritePropertyName("XCZR");
            if (value.XCZR.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.XCZR.FormKey.ToString());
            
            // XCZA
            writer.WritePropertyName("XCZA");
            if (value.XCZA == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.XCZA.Value);
            }
            
            // XCZC
            writer.WritePropertyName("XCZC");
            if (value.XCZC.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.XCZC.FormKey.ToString());
            
            // Scale
            writer.WritePropertyName("Scale");
            if (value.Scale == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.Scale.Value);
            }
            
            // SpawnContainer
            writer.WritePropertyName("SpawnContainer");
            if (value.SpawnContainer.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.SpawnContainer.FormKey.ToString());
            
            // ActivateParents
            writer.WritePropertyName("ActivateParents");
            if (value.ActivateParents != null)
            {
                writer.WriteStartObject();
                
                // Flags
                writer.WritePropertyName("Flags");
                writer.WriteFlags(value.ActivateParents.Flags);
                
                // Parents
                writer.WritePropertyName("Parents");
                if (value.ActivateParents.Parents != null)
                {
                    writer.WriteStartArray();
                    foreach(var itm7 in value.ActivateParents.Parents)
                    {
                        if (itm7 != null)
                        {
                            writer.WriteStartObject();
                            
                            // Reference
                            writer.WritePropertyName("Reference");
                            writer.WriteStringValue(itm7.Reference.FormKey.ToString());
                            
                            // Delay
                            writer.WritePropertyName("Delay");
                            writer.WriteNumberValue(itm7.Delay);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // LeveledItemBaseObject
            writer.WritePropertyName("LeveledItemBaseObject");
            if (value.LeveledItemBaseObject.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.LeveledItemBaseObject.FormKey.ToString());
            
            // LevelModifier
            writer.WritePropertyName("LevelModifier");
            if (value.LevelModifier == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteEnum(value.LevelModifier.Value);
            }
            
            // PersistentLocation
            writer.WritePropertyName("PersistentLocation");
            if (value.PersistentLocation.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.PersistentLocation.FormKey.ToString());
            
            // CollisionLayer
            writer.WritePropertyName("CollisionLayer");
            if (value.CollisionLayer == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.CollisionLayer.Value);
            }
            
            // Lock
            writer.WritePropertyName("Lock");
            if (value.Lock != null)
            {
                writer.WriteStartObject();
                
                // Level
                writer.WritePropertyName("Level");
                writer.WriteEnum(value.Lock.Level);
                
                // Unused
                writer.WritePropertyName("Unused");
                writer.WriteBase64StringValue(value.Lock.Unused);
                
                // Key
                writer.WritePropertyName("Key");
                writer.WriteStringValue(value.Lock.Key.FormKey.ToString());
                
                // Flags
                writer.WritePropertyName("Flags");
                writer.WriteFlags(value.Lock.Flags);
                
                // Unused2
                writer.WritePropertyName("Unused2");
                writer.WriteBase64StringValue(value.Lock.Unused2);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // EncounterZone
            writer.WritePropertyName("EncounterZone");
            if (value.EncounterZone.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.EncounterZone.FormKey.ToString());
            
            // NavigationDoorLink
            writer.WritePropertyName("NavigationDoorLink");
            if (value.NavigationDoorLink != null)
            {
                writer.WriteStartObject();
                
                // NavMesh
                writer.WritePropertyName("NavMesh");
                writer.WriteStringValue(value.NavigationDoorLink.NavMesh.FormKey.ToString());
                
                // TeleportMarkerTriangle
                writer.WritePropertyName("TeleportMarkerTriangle");
                writer.WriteNumberValue(value.NavigationDoorLink.TeleportMarkerTriangle);
                
                // Unused
                writer.WritePropertyName("Unused");
                writer.WriteNumberValue(value.NavigationDoorLink.Unused);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // LocationRefTypes
            writer.WritePropertyName("LocationRefTypes");
            if (value.LocationRefTypes != null)
            {
                writer.WriteStartArray();
                foreach(var itm8 in value.LocationRefTypes)
                {
                    writer.WriteStringValue(itm8.FormKey.ToString());
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // IsIgnoredBySandbox
            writer.WritePropertyName("IsIgnoredBySandbox");
            writer.WriteBooleanValue(value.IsIgnoredBySandbox);
            
            // Ownership
            writer.WritePropertyName("Ownership");
            if (value.Ownership != null)
            {
                writer.WriteStartObject();
                
                // Owner
                writer.WritePropertyName("Owner");
                if (value.Ownership.Owner.IsNull)
                    writer.WriteNullValue();
                else
                    writer.WriteStringValue(value.Ownership.Owner.FormKey.ToString());
                
                // FactionRank
                writer.WritePropertyName("FactionRank");
                if (value.Ownership.FactionRank == null)
                    writer.WriteNullValue();
                else
                {
                    writer.WriteNumberValue(value.Ownership.FactionRank.Value);
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // ItemCount
            writer.WritePropertyName("ItemCount");
            if (value.ItemCount == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.ItemCount.Value);
            }
            
            // Charge
            writer.WritePropertyName("Charge");
            if (value.Charge == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.Charge.Value);
            }
            
            // LocationReference
            writer.WritePropertyName("LocationReference");
            if (value.LocationReference.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.LocationReference.FormKey.ToString());
            
            // EnableParent
            writer.WritePropertyName("EnableParent");
            if (value.EnableParent != null)
            {
                writer.WriteStartObject();
                
                // Versioning
                writer.WritePropertyName("Versioning");
                writer.WriteFlags(value.EnableParent.Versioning);
                
                // Reference
                writer.WritePropertyName("Reference");
                writer.WriteStringValue(value.EnableParent.Reference.FormKey.ToString());
                
                // Flags
                writer.WritePropertyName("Flags");
                writer.WriteFlags(value.EnableParent.Flags);
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteBase64StringValue(value.EnableParent.Unknown);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // LinkedReferences
            writer.WritePropertyName("LinkedReferences");
            if (value.LinkedReferences != null)
            {
                writer.WriteStartArray();
                foreach(var itm9 in value.LinkedReferences)
                {
                    if (itm9 != null)
                    {
                        writer.WriteStartObject();
                        
                        // Versioning
                        writer.WritePropertyName("Versioning");
                        writer.WriteFlags(itm9.Versioning);
                        
                        // KeywordOrReference
                        writer.WritePropertyName("KeywordOrReference");
                        writer.WriteStringValue(itm9.KeywordOrReference.FormKey.ToString());
                        
                        // Reference
                        writer.WritePropertyName("Reference");
                        writer.WriteStringValue(itm9.Reference.FormKey.ToString());
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Patrol
            writer.WritePropertyName("Patrol");
            if (value.Patrol != null)
            {
                writer.WriteStartObject();
                
                // IdleTime
                writer.WritePropertyName("IdleTime");
                writer.WriteNumberValue(value.Patrol.IdleTime);
                
                // Idle
                writer.WritePropertyName("Idle");
                writer.WriteStringValue(value.Patrol.Idle.FormKey.ToString());
                
                // SCHR
                writer.WritePropertyName("SCHR");
                if (value.Patrol.SCHR == null)
                    writer.WriteNullValue();
                else
                {
                    writer.WriteBase64StringValue(value.Patrol.SCHR.Value);
                }
                
                // SCTX
                writer.WritePropertyName("SCTX");
                if (value.Patrol.SCTX == null)
                    writer.WriteNullValue();
                else
                {
                    writer.WriteBase64StringValue(value.Patrol.SCTX.Value);
                }
                
                // Topics
                writer.WritePropertyName("Topics");
                if (value.Patrol.Topics != null)
                {
                    writer.WriteStartArray();
                    foreach(var itm10 in value.Patrol.Topics)
                    {
                        IATopicReferenceGetter_Writer.WriteOuter(writer, itm10, options);
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Action
            writer.WritePropertyName("Action");
            if (value.Action == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteEnum(value.Action.Value);
            }
            
            // HeadTrackingWeight
            writer.WritePropertyName("HeadTrackingWeight");
            if (value.HeadTrackingWeight == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.HeadTrackingWeight.Value);
            }
            
            // FavorCost
            writer.WritePropertyName("FavorCost");
            if (value.FavorCost == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.FavorCost.Value);
            }
            
            // IsOpenByDefault
            writer.WritePropertyName("IsOpenByDefault");
            writer.WriteBooleanValue(value.IsOpenByDefault);
            
            // MapMarker
            writer.WritePropertyName("MapMarker");
            if (value.MapMarker != null)
            {
                writer.WriteStartObject();
                
                // Flags
                writer.WritePropertyName("Flags");
                writer.WriteFlags(value.MapMarker.Flags);
                
                // Name
                writer.WritePropertyName("Name");
                writer.WriteTranslatedString(value.MapMarker.Name, options);
                
                // Type
                writer.WritePropertyName("Type");
                writer.WriteEnum(value.MapMarker.Type);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // AttachRef
            writer.WritePropertyName("AttachRef");
            if (value.AttachRef.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.AttachRef.FormKey.ToString());
            
            // DistantLodData
            writer.WritePropertyName("DistantLodData");
            if (value.DistantLodData == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteBase64StringValue(value.DistantLodData.Value);
            }
            
            // Placement
            writer.WritePropertyName("Placement");
            if (value.Placement != null)
            {
                writer.WriteStartObject();
                
                // Position
                writer.WritePropertyName("Position");
                writer.WriteP3Float(value.Placement.Position, options);
                
                // Rotation
                writer.WritePropertyName("Rotation");
                writer.WriteP3Float(value.Placement.Rotation, options);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // FormVersion
            writer.WritePropertyName("FormVersion");
            writer.WriteNumberValue((uint)value.FormVersion);
            
            // Version2
            writer.WritePropertyName("Version2");
            writer.WriteNumberValue((uint)value.Version2);
            
            // IsCompressed
            writer.WritePropertyName("IsCompressed");
            writer.WriteBooleanValue(value.IsCompressed);
            
            // IsDeleted
            writer.WritePropertyName("IsDeleted");
            writer.WriteBooleanValue(value.IsDeleted);
            
            // MajorRecordFlagsRaw
            writer.WritePropertyName("MajorRecordFlagsRaw");
            writer.WriteNumberValue(value.MajorRecordFlagsRaw);
            
            // VersionControl
            writer.WritePropertyName("VersionControl");
            writer.WriteNumberValue(value.VersionControl);
            
            // EditorID
            writer.WritePropertyName("EditorID");
            writer.WriteStringValue(value.EditorID);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
    }
}
