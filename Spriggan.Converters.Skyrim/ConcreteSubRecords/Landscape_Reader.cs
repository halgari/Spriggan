// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

internal static class Landscape_Reader
{
    public static Mutagen.Bethesda.Skyrim.Landscape ReadInner(ref Utf8JsonReader reader, FormKey formKey, JsonSerializerOptions options)
    {
        var cls = new Mutagen.Bethesda.Skyrim.Landscape(formKey, SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
                break;
            var prop1 = reader.GetString();
            reader.Read();
            switch(prop1)
            {
                case "Flags":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Landscape.Flag>(ref reader, options);
                    }
                    break;
                case "VertexNormals":
                    Noggog.P3UInt8 itm2(ref Utf8JsonReader reader)
                    {
                        Noggog.P3UInt8 itm3 = default;
                        itm3 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                        return itm3;
                    }
                    cls.VertexNormals = SerializerExtensions.Array2dReader(ref reader, itm2);
                    break;
                case "VertexHeightMap":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop4 = reader.GetString();
                            reader.Read();
                            switch(prop4)
                            {
                                case "Offset":
                                    cls.VertexHeightMap.Offset = reader.GetSingle();
                                    break;
                                case "HeightMap":
                                    Byte itm5(ref Utf8JsonReader reader)
                                    {
                                        Byte itm6 = default;
                                        itm6 = reader.GetByte();
                                        return itm6;
                                    }
                                    cls.VertexHeightMap.HeightMap = SerializerExtensions.Array2dReader(ref reader, itm5);
                                    break;
                                case "Unknown":
                                    cls.VertexHeightMap.Unknown = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "VertexColors":
                    Noggog.P3UInt8 itm7(ref Utf8JsonReader reader)
                    {
                        Noggog.P3UInt8 itm8 = default;
                        itm8 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                        return itm8;
                    }
                    cls.VertexColors = SerializerExtensions.Array2dReader(ref reader, itm7);
                    break;
                case "Layers":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.BaseLayer itm9 = new Mutagen.Bethesda.Skyrim.BaseLayer();
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop10 = reader.GetString();
                                    reader.Read();
                                    switch(prop10)
                                    {
                                        case "Header":
                                            itm9.Header = new Mutagen.Bethesda.Skyrim.LayerHeader();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop11 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop11)
                                                    {
                                                        case "Texture":
                                                            itm9.Header.Texture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                            break;
                                                        case "Quadrant":
                                                            itm9.Header.Quadrant = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Plugins.Records.Quadrant>(ref reader, options);
                                                            break;
                                                        case "Unused":
                                                            itm9.Header.Unused = reader.GetByte();
                                                            break;
                                                        case "LayerNumber":
                                                            itm9.Header.LayerNumber = reader.GetUInt16();
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            cls.Layers.Add(itm9);
                        }
                    }
                    break;
                case "Textures":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.Textures ??= new();
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            cls.Textures.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
            }
        }
        return cls;
    }
}
