// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

internal static class PlacedObject_Reader
{
    public static Mutagen.Bethesda.Skyrim.PlacedObject ReadInner(ref Utf8JsonReader reader, FormKey formKey, JsonSerializerOptions options)
    {
        var cls = new Mutagen.Bethesda.Skyrim.PlacedObject(formKey, SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
                break;
            var prop1 = reader.GetString();
            reader.Read();
            switch(prop1)
            {
                case "VirtualMachineAdapter":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop2 = reader.GetString();
                            reader.Read();
                            switch(prop2)
                            {
                                case "Version":
                                    cls.VirtualMachineAdapter.Version = reader.GetInt16();
                                    break;
                                case "ObjectFormat":
                                    cls.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                    break;
                                case "Scripts":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm3 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop4 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop4)
                                                    {
                                                        case "Name":
                                                            itm3.Name = reader.GetString();
                                                            break;
                                                        case "Flags":
                                                            itm3.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                            break;
                                                        case "Properties":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    ScriptProperty itm5 = default;
                                                                    itm5 = ScriptProperty_Reader.ReadOuter(ref reader, options);
                                                                    itm3.Properties.Add(itm5);
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            cls.VirtualMachineAdapter.Scripts.Add(itm3);
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Base":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "BoundHalfExtents":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.BoundHalfExtents = SerializerExtensions.ReadP3Float(ref reader, options);
                    }
                    break;
                case "Primitive":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop6 = reader.GetString();
                            reader.Read();
                            switch(prop6)
                            {
                                case "Bounds":
                                    cls.Primitive.Bounds = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Color":
                                    cls.Primitive.Color = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "Unknown":
                                    cls.Primitive.Unknown = reader.GetSingle();
                                    break;
                                case "Type":
                                    cls.Primitive.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedPrimitive.TypeEnum>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "XORD":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.XORD = reader.GetBytesFromBase64();
                    }
                    break;
                case "OcclusionPlane":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop7 = reader.GetString();
                            reader.Read();
                            switch(prop7)
                            {
                                case "Width":
                                    cls.OcclusionPlane.Width = reader.GetSingle();
                                    break;
                                case "Height":
                                    cls.OcclusionPlane.Height = reader.GetSingle();
                                    break;
                                case "Position":
                                    cls.OcclusionPlane.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "RotationQ1":
                                    cls.OcclusionPlane.RotationQ1 = reader.GetSingle();
                                    break;
                                case "RotationQ2":
                                    cls.OcclusionPlane.RotationQ2 = reader.GetSingle();
                                    break;
                                case "RotationQ3":
                                    cls.OcclusionPlane.RotationQ3 = reader.GetSingle();
                                    break;
                                case "RotationQ4":
                                    cls.OcclusionPlane.RotationQ4 = reader.GetSingle();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Portals":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.Portals ??= new();
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.Portal itm8 = new Mutagen.Bethesda.Skyrim.Portal();
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop9 = reader.GetString();
                                    reader.Read();
                                    switch(prop9)
                                    {
                                        case "Origin":
                                            itm8.Origin.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                            break;
                                        case "Destination":
                                            itm8.Destination.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            cls.Portals.Add(itm8);
                        }
                    }
                    break;
                case "RoomPortal":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop10 = reader.GetString();
                            reader.Read();
                            switch(prop10)
                            {
                                case "Width":
                                    cls.RoomPortal.Width = reader.GetSingle();
                                    break;
                                case "Height":
                                    cls.RoomPortal.Height = reader.GetSingle();
                                    break;
                                case "Position":
                                    cls.RoomPortal.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "RotationQ1":
                                    cls.RoomPortal.RotationQ1 = reader.GetSingle();
                                    break;
                                case "RotationQ2":
                                    cls.RoomPortal.RotationQ2 = reader.GetSingle();
                                    break;
                                case "RotationQ3":
                                    cls.RoomPortal.RotationQ3 = reader.GetSingle();
                                    break;
                                case "RotationQ4":
                                    cls.RoomPortal.RotationQ4 = reader.GetSingle();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Unknown":
                    cls.Unknown = reader.GetInt16();
                    break;
                case "LightingTemplate":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "ImageSpace":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LinkedRooms":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            cls.LinkedRooms.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "IsMultiBoundPrimitive":
                    cls.IsMultiBoundPrimitive = reader.GetBoolean();
                    break;
                case "RagdollData":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.RagdollData = reader.GetBytesFromBase64();
                    }
                    break;
                case "RagdollBipedData":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.RagdollBipedData = reader.GetBytesFromBase64();
                    }
                    break;
                case "Radius":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.Radius = reader.GetSingle();
                    }
                    break;
                case "Reflections":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.WaterReflection itm11 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop12 = reader.GetString();
                                    reader.Read();
                                    switch(prop12)
                                    {
                                        case "Versioning":
                                            itm11.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                            break;
                                        case "Water":
                                            itm11.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                            break;
                                        case "Type":
                                            itm11.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            cls.Reflections.Add(itm11);
                        }
                    }
                    break;
                case "LitWater":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            cls.LitWater.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "Emittance":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LightData":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop13 = reader.GetString();
                            reader.Read();
                            switch(prop13)
                            {
                                case "Versioning":
                                    cls.LightData.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LightData.VersioningBreaks>(ref reader, options);
                                    break;
                                case "FovOffset":
                                    cls.LightData.FovOffset = reader.GetSingle();
                                    break;
                                case "FadeOffset":
                                    cls.LightData.FadeOffset = reader.GetSingle();
                                    break;
                                case "EndDistanceCap":
                                    cls.LightData.EndDistanceCap = reader.GetSingle();
                                    break;
                                case "ShadowDepthBias":
                                    cls.LightData.ShadowDepthBias = reader.GetSingle();
                                    break;
                                case "Unknown":
                                    cls.LightData.Unknown = reader.GetInt32();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Alpha":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop14 = reader.GetString();
                            reader.Read();
                            switch(prop14)
                            {
                                case "Cutoff":
                                    cls.Alpha.Cutoff = reader.GetByte();
                                    break;
                                case "Base":
                                    cls.Alpha.Base = reader.GetByte();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "TeleportDestination":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop15 = reader.GetString();
                            reader.Read();
                            switch(prop15)
                            {
                                case "Door":
                                    cls.TeleportDestination.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "Position":
                                    cls.TeleportDestination.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Rotation":
                                    cls.TeleportDestination.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Flags":
                                    cls.TeleportDestination.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.TeleportDestination.Flag>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "TeleportMessageBox":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.TeleportMessageBox.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "MultiboundReference":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "XWCN":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.XWCN = reader.GetBytesFromBase64();
                    }
                    break;
                case "XWCS":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.XWCS = reader.GetBytesFromBase64();
                    }
                    break;
                case "WaterVelocity":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop16 = reader.GetString();
                            reader.Read();
                            switch(prop16)
                            {
                                case "Offset":
                                    cls.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown":
                                    cls.WaterVelocity.Unknown = reader.GetInt32();
                                    break;
                                case "Angle":
                                    cls.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown2":
                                    cls.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "XCVL":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.XCVL = reader.GetBytesFromBase64();
                    }
                    break;
                case "XCZR":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.XCZR.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "XCZA":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.XCZA = reader.GetBytesFromBase64();
                    }
                    break;
                case "XCZC":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.XCZC.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Scale":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.Scale = reader.GetSingle();
                    }
                    break;
                case "SpawnContainer":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.SpawnContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "ActivateParents":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop17 = reader.GetString();
                            reader.Read();
                            switch(prop17)
                            {
                                case "Flags":
                                    cls.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                    break;
                                case "Parents":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.ActivateParent itm18 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop19 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop19)
                                                    {
                                                        case "Reference":
                                                            itm18.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                            break;
                                                        case "Delay":
                                                            itm18.Delay = reader.GetSingle();
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            cls.ActivateParents.Parents.Add(itm18);
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "LeveledItemBaseObject":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.LeveledItemBaseObject.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LevelModifier":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                    }
                    break;
                case "PersistentLocation":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "CollisionLayer":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.CollisionLayer = reader.GetUInt32();
                    }
                    break;
                case "Lock":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop20 = reader.GetString();
                            reader.Read();
                            switch(prop20)
                            {
                                case "Level":
                                    cls.Lock.Level = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.LockLevel>(ref reader, options);
                                    break;
                                case "Unused":
                                    cls.Lock.Unused = reader.GetBytesFromBase64();
                                    break;
                                case "Key":
                                    cls.Lock.Key.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "Flags":
                                    cls.Lock.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LockData.Flag>(ref reader, options);
                                    break;
                                case "Unused2":
                                    cls.Lock.Unused2 = reader.GetBytesFromBase64();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "EncounterZone":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "NavigationDoorLink":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop21 = reader.GetString();
                            reader.Read();
                            switch(prop21)
                            {
                                case "NavMesh":
                                    cls.NavigationDoorLink.NavMesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "TeleportMarkerTriangle":
                                    cls.NavigationDoorLink.TeleportMarkerTriangle = reader.GetInt16();
                                    break;
                                case "Unused":
                                    cls.NavigationDoorLink.Unused = reader.GetInt16();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "LocationRefTypes":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.LocationRefTypes ??= new();
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            cls.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "IsIgnoredBySandbox":
                    cls.IsIgnoredBySandbox = reader.GetBoolean();
                    break;
                case "Ownership":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop22 = reader.GetString();
                            reader.Read();
                            switch(prop22)
                            {
                                case "Owner":
                                    if (reader.TokenType != JsonTokenType.Null)
                                        cls.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "FactionRank":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        cls.Ownership.FactionRank = reader.GetInt32();
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "ItemCount":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.ItemCount = reader.GetInt32();
                    }
                    break;
                case "Charge":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.Charge = reader.GetSingle();
                    }
                    break;
                case "LocationReference":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "EnableParent":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop23 = reader.GetString();
                            reader.Read();
                            switch(prop23)
                            {
                                case "Versioning":
                                    cls.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                    break;
                                case "Reference":
                                    cls.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "Flags":
                                    cls.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                    break;
                                case "Unknown":
                                    cls.EnableParent.Unknown = reader.GetBytesFromBase64();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "LinkedReferences":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.LinkedReferences itm24 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop25 = reader.GetString();
                                    reader.Read();
                                    switch(prop25)
                                    {
                                        case "Versioning":
                                            itm24.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                            break;
                                        case "KeywordOrReference":
                                            itm24.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                            break;
                                        case "Reference":
                                            itm24.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            cls.LinkedReferences.Add(itm24);
                        }
                    }
                    break;
                case "Patrol":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop26 = reader.GetString();
                            reader.Read();
                            switch(prop26)
                            {
                                case "IdleTime":
                                    cls.Patrol.IdleTime = reader.GetSingle();
                                    break;
                                case "Idle":
                                    cls.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "SCHR":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        cls.Patrol.SCHR = reader.GetBytesFromBase64();
                                    }
                                    break;
                                case "SCTX":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        cls.Patrol.SCTX = reader.GetBytesFromBase64();
                                    }
                                    break;
                                case "Topics":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            ATopicReference itm27 = default;
                                            itm27 = ATopicReference_Reader.ReadOuter(ref reader, options);
                                            cls.Patrol.Topics.Add(itm27);
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Action":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.Action = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedObject.ActionFlag>(ref reader, options);
                    }
                    break;
                case "HeadTrackingWeight":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.HeadTrackingWeight = reader.GetSingle();
                    }
                    break;
                case "FavorCost":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.FavorCost = reader.GetSingle();
                    }
                    break;
                case "IsOpenByDefault":
                    cls.IsOpenByDefault = reader.GetBoolean();
                    break;
                case "MapMarker":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop28 = reader.GetString();
                            reader.Read();
                            switch(prop28)
                            {
                                case "Flags":
                                    cls.MapMarker.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.MapMarker.Flag>(ref reader, options);
                                    break;
                                case "Name":
                                    cls.MapMarker.Name ??= new TranslatedString(Language.English);
                                    SerializerExtensions.ReadTranslatedString(ref reader, cls.MapMarker.Name, options);
                                    break;
                                case "Type":
                                    cls.MapMarker.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.MapMarker.MarkerType>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "AttachRef":
                    if (reader.TokenType != JsonTokenType.Null)
                        cls.AttachRef.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "DistantLodData":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        cls.DistantLodData = reader.GetBytesFromBase64();
                    }
                    break;
                case "Placement":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop29 = reader.GetString();
                            reader.Read();
                            switch(prop29)
                            {
                                case "Position":
                                    cls.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Rotation":
                                    cls.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
            }
        }
        return cls;
    }
}
