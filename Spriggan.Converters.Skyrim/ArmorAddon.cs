// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

public class IArmorAddonGetter_Converter : JsonConverter<IArmorAddonGetter>
{
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.IArmorAddonGetter)) && !t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.ArmorAddon));
    }
    public override IArmorAddonGetter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer, IArmorAddonGetter value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WriteFormKeyHeader(value, options);
        
        // AdditionalRaces
        writer.WritePropertyName("AdditionalRaces");
        if (value.AdditionalRaces != null)
        {
            writer.WriteStartArray();
            foreach(var itm1 in value.AdditionalRaces)
            {
                writer.WriteStringValue(itm1.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // ArtObject
        writer.WritePropertyName("ArtObject");
        if (value.ArtObject.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.ArtObject.FormKey.ToString());
        
        // BodyTemplate
        writer.WritePropertyName("BodyTemplate");
        if (value.BodyTemplate != null)
        {
            writer.WriteStartObject();
            
            // FirstPersonFlags
            writer.WritePropertyName("FirstPersonFlags");
            writer.WriteFlags(value.BodyTemplate.FirstPersonFlags);
            
            // Flags
            writer.WritePropertyName("Flags");
            writer.WriteFlags(value.BodyTemplate.Flags);
            
            // ArmorType
            writer.WritePropertyName("ArmorType");
            writer.WriteEnum(value.BodyTemplate.ArmorType);
            
            // ActsLike44
            writer.WritePropertyName("ActsLike44");
            writer.WriteBooleanValue(value.BodyTemplate.ActsLike44);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // DetectionSoundValue
        writer.WritePropertyName("DetectionSoundValue");
        writer.WriteNumberValue((long)value.DetectionSoundValue);
        
        // DNAMDataTypeState
        writer.WritePropertyName("DNAMDataTypeState");
        writer.WriteFlags(value.DNAMDataTypeState);
        
        // EditorID
        writer.WritePropertyName("EditorID");
        writer.WriteStringValue(value.EditorID);
        
        // FirstPersonModel
        writer.WritePropertyName("FirstPersonModel");
        if (value.FirstPersonModel == null)
        {
            writer.WriteNullValue();
        }
        else
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Male");
            if (value.FirstPersonModel.Male != null)
            {
                writer.WriteStartObject();
                
                // AlternateTextures
                writer.WritePropertyName("AlternateTextures");
                if (value.FirstPersonModel.Male.AlternateTextures != null)
                {
                    writer.WriteStartArray();
                    foreach(var itm2 in value.FirstPersonModel.Male.AlternateTextures)
                    {
                        if (itm2 != null)
                        {
                            writer.WriteStartObject();
                            
                            // Name
                            writer.WritePropertyName("Name");
                            writer.WriteStringValue(itm2.Name);
                            
                            // NewTexture
                            writer.WritePropertyName("NewTexture");
                            writer.WriteStringValue(itm2.NewTexture.FormKey.ToString());
                            
                            // Index
                            writer.WritePropertyName("Index");
                            writer.WriteNumberValue((long)itm2.Index);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
                
                // File
                writer.WritePropertyName("File");
                writer.WriteStringValue(value.FirstPersonModel.Male.File);
                
                // Data
                writer.WritePropertyName("Data");
                if (value.FirstPersonModel.Male.Data == null)
                    writer.WriteNullValue();
                else
                {
                    writer.WriteBase64StringValue(value.FirstPersonModel.Male.Data.Value);
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WritePropertyName("Female");
            if (value.FirstPersonModel.Female != null)
            {
                writer.WriteStartObject();
                
                // AlternateTextures
                writer.WritePropertyName("AlternateTextures");
                if (value.FirstPersonModel.Female.AlternateTextures != null)
                {
                    writer.WriteStartArray();
                    foreach(var itm3 in value.FirstPersonModel.Female.AlternateTextures)
                    {
                        if (itm3 != null)
                        {
                            writer.WriteStartObject();
                            
                            // Name
                            writer.WritePropertyName("Name");
                            writer.WriteStringValue(itm3.Name);
                            
                            // NewTexture
                            writer.WritePropertyName("NewTexture");
                            writer.WriteStringValue(itm3.NewTexture.FormKey.ToString());
                            
                            // Index
                            writer.WritePropertyName("Index");
                            writer.WriteNumberValue((long)itm3.Index);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
                
                // File
                writer.WritePropertyName("File");
                writer.WriteStringValue(value.FirstPersonModel.Female.File);
                
                // Data
                writer.WritePropertyName("Data");
                if (value.FirstPersonModel.Female.Data == null)
                    writer.WriteNullValue();
                else
                {
                    writer.WriteBase64StringValue(value.FirstPersonModel.Female.Data.Value);
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WriteEndObject();
        }
        
        // FootstepSound
        writer.WritePropertyName("FootstepSound");
        if (value.FootstepSound.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.FootstepSound.FormKey.ToString());
        
        // IsCompressed
        writer.WritePropertyName("IsCompressed");
        writer.WriteBooleanValue(value.IsCompressed);
        
        // IsDeleted
        writer.WritePropertyName("IsDeleted");
        writer.WriteBooleanValue(value.IsDeleted);
        
        // MajorRecordFlagsRaw
        writer.WritePropertyName("MajorRecordFlagsRaw");
        writer.WriteNumberValue((long)value.MajorRecordFlagsRaw);
        
        // Priority
        writer.WritePropertyName("Priority");
        if (value.Priority == null)
        {
            writer.WriteNullValue();
        }
        else
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Male");
            writer.WriteNumberValue((long)value.Priority.Male);
            writer.WritePropertyName("Female");
            writer.WriteNumberValue((long)value.Priority.Female);
            writer.WriteEndObject();
        }
        
        // Race
        writer.WritePropertyName("Race");
        if (value.Race.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Race.FormKey.ToString());
        
        // SkinTexture
        writer.WritePropertyName("SkinTexture");
        if (value.SkinTexture == null)
        {
            writer.WriteNullValue();
        }
        else
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Male");
            if (value.SkinTexture.Male.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.SkinTexture.Male.FormKey.ToString());
            writer.WritePropertyName("Female");
            if (value.SkinTexture.Female.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.SkinTexture.Female.FormKey.ToString());
            writer.WriteEndObject();
        }
        
        // TextureSwapList
        writer.WritePropertyName("TextureSwapList");
        if (value.TextureSwapList == null)
        {
            writer.WriteNullValue();
        }
        else
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Male");
            if (value.TextureSwapList.Male.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.TextureSwapList.Male.FormKey.ToString());
            writer.WritePropertyName("Female");
            if (value.TextureSwapList.Female.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.TextureSwapList.Female.FormKey.ToString());
            writer.WriteEndObject();
        }
        
        // Unknown
        writer.WritePropertyName("Unknown");
        writer.WriteNumberValue((uint)value.Unknown);
        
        // Unknown2
        writer.WritePropertyName("Unknown2");
        writer.WriteNumberValue((long)value.Unknown2);
        
        // Version2
        writer.WritePropertyName("Version2");
        writer.WriteNumberValue((uint)value.Version2);
        
        // VersionControl
        writer.WritePropertyName("VersionControl");
        writer.WriteNumberValue((long)value.VersionControl);
        
        // WeaponAdjust
        writer.WritePropertyName("WeaponAdjust");
        writer.WriteNumberValue((long)value.WeaponAdjust);
        
        // WeightSliderEnabled
        writer.WritePropertyName("WeightSliderEnabled");
        if (value.WeightSliderEnabled == null)
        {
            writer.WriteNullValue();
        }
        else
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Male");
            writer.WriteBooleanValue(value.WeightSliderEnabled.Male);
            writer.WritePropertyName("Female");
            writer.WriteBooleanValue(value.WeightSliderEnabled.Female);
            writer.WriteEndObject();
        }
        
        // WorldModel
        writer.WritePropertyName("WorldModel");
        if (value.WorldModel == null)
        {
            writer.WriteNullValue();
        }
        else
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Male");
            if (value.WorldModel.Male != null)
            {
                writer.WriteStartObject();
                
                // AlternateTextures
                writer.WritePropertyName("AlternateTextures");
                if (value.WorldModel.Male.AlternateTextures != null)
                {
                    writer.WriteStartArray();
                    foreach(var itm4 in value.WorldModel.Male.AlternateTextures)
                    {
                        if (itm4 != null)
                        {
                            writer.WriteStartObject();
                            
                            // Name
                            writer.WritePropertyName("Name");
                            writer.WriteStringValue(itm4.Name);
                            
                            // NewTexture
                            writer.WritePropertyName("NewTexture");
                            writer.WriteStringValue(itm4.NewTexture.FormKey.ToString());
                            
                            // Index
                            writer.WritePropertyName("Index");
                            writer.WriteNumberValue((long)itm4.Index);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
                
                // File
                writer.WritePropertyName("File");
                writer.WriteStringValue(value.WorldModel.Male.File);
                
                // Data
                writer.WritePropertyName("Data");
                if (value.WorldModel.Male.Data == null)
                    writer.WriteNullValue();
                else
                {
                    writer.WriteBase64StringValue(value.WorldModel.Male.Data.Value);
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WritePropertyName("Female");
            if (value.WorldModel.Female != null)
            {
                writer.WriteStartObject();
                
                // AlternateTextures
                writer.WritePropertyName("AlternateTextures");
                if (value.WorldModel.Female.AlternateTextures != null)
                {
                    writer.WriteStartArray();
                    foreach(var itm5 in value.WorldModel.Female.AlternateTextures)
                    {
                        if (itm5 != null)
                        {
                            writer.WriteStartObject();
                            
                            // Name
                            writer.WritePropertyName("Name");
                            writer.WriteStringValue(itm5.Name);
                            
                            // NewTexture
                            writer.WritePropertyName("NewTexture");
                            writer.WriteStringValue(itm5.NewTexture.FormKey.ToString());
                            
                            // Index
                            writer.WritePropertyName("Index");
                            writer.WriteNumberValue((long)itm5.Index);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                    }
                    writer.WriteEndArray();
                }
                else
                {
                    writer.WriteNullValue();
                }
                
                // File
                writer.WritePropertyName("File");
                writer.WriteStringValue(value.WorldModel.Female.File);
                
                // Data
                writer.WritePropertyName("Data");
                if (value.WorldModel.Female.Data == null)
                    writer.WriteNullValue();
                else
                {
                    writer.WriteBase64StringValue(value.WorldModel.Female.Data.Value);
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WriteEndObject();
        }
        writer.WriteEndObject();
    }
}
public class ArmorAddon_Converter : JsonConverter<Mutagen.Bethesda.Skyrim.ArmorAddon>
{
    private IArmorAddonGetter_Converter _getterConverter;
    public ArmorAddon_Converter()
    {
        _getterConverter = new IArmorAddonGetter_Converter();
    }
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.ArmorAddon));
    }
    public override void Write(Utf8JsonWriter writer, Mutagen.Bethesda.Skyrim.ArmorAddon value, JsonSerializerOptions options)
    {
        _getterConverter.Write(writer, (IArmorAddonGetter)value, options);
    }
    public override Mutagen.Bethesda.Skyrim.ArmorAddon Read(
        ref Utf8JsonReader reader,
        Type typeToConvert,
        JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
        reader.Read();
        var retval = new Mutagen.Bethesda.Skyrim.ArmorAddon(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                reader.Read();
                break;
            }
            var prop = reader.GetString();
            reader.Read();
            switch (prop)
            {
                case "AdditionalRaces":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.AdditionalRaces.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "ArtObject":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.ArtObject.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "BodyTemplate":
                    retval.BodyTemplate = new Mutagen.Bethesda.Skyrim.BodyTemplate();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop6 = reader.GetString();
                            reader.Read();
                            switch(prop6)
                            {
                                case "FirstPersonFlags":
                                    retval.BodyTemplate.FirstPersonFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.BipedObjectFlag>(ref reader, options);
                                    break;
                                case "Flags":
                                    retval.BodyTemplate.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.BodyTemplate.Flag>(ref reader, options);
                                    break;
                                case "ArmorType":
                                    retval.BodyTemplate.ArmorType = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ArmorType>(ref reader, options);
                                    break;
                                case "ActsLike44":
                                    retval.BodyTemplate.ActsLike44 = reader.GetBoolean();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "DetectionSoundValue":
                    retval.DetectionSoundValue = reader.GetByte();
                    break;
                case "DNAMDataTypeState":
                    retval.DNAMDataTypeState = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ArmorAddon.DNAMDataType>(ref reader, options);
                    break;
                case "EditorID":
                    retval.EditorID = reader.GetString();
                    break;
                case "FirstPersonModel":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        retval.FirstPersonModel = new GenderedItem<Mutagen.Bethesda.Skyrim.Model>(default, default);
                        reader.Read();
                        while(true)
                        {
                            if (reader.TokenType == JsonTokenType.EndObject)
                            {
                                break;
                            }
                            var prop7 = reader.GetString();
                            reader.Read();
                            switch(prop7)
                            {
                                case "Male":
                                    retval.FirstPersonModel.Male = new Mutagen.Bethesda.Skyrim.Model();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop8 = reader.GetString();
                                            reader.Read();
                                            switch(prop8)
                                            {
                                                case "AlternateTextures":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.FirstPersonModel.Male.AlternateTextures ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            var itm9 = new Mutagen.Bethesda.Skyrim.AlternateTexture();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop10 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop10)
                                                                    {
                                                                        case "Name":
                                                                            itm9.Name = reader.GetString();
                                                                            break;
                                                                        case "NewTexture":
                                                                            itm9.NewTexture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Index":
                                                                            itm9.Index = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            retval.FirstPersonModel.Male.AlternateTextures.Add(itm9);
                                                        }
                                                    }
                                                    break;
                                                case "File":
                                                    retval.FirstPersonModel.Male.File = reader.GetString();
                                                    break;
                                                case "Data":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.FirstPersonModel.Male.Data = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                break;
                                case "Female":
                                    retval.FirstPersonModel.Female = new Mutagen.Bethesda.Skyrim.Model();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop11 = reader.GetString();
                                            reader.Read();
                                            switch(prop11)
                                            {
                                                case "AlternateTextures":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.FirstPersonModel.Female.AlternateTextures ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            var itm12 = new Mutagen.Bethesda.Skyrim.AlternateTexture();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop13 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop13)
                                                                    {
                                                                        case "Name":
                                                                            itm12.Name = reader.GetString();
                                                                            break;
                                                                        case "NewTexture":
                                                                            itm12.NewTexture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Index":
                                                                            itm12.Index = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            retval.FirstPersonModel.Female.AlternateTextures.Add(itm12);
                                                        }
                                                    }
                                                    break;
                                                case "File":
                                                    retval.FirstPersonModel.Female.File = reader.GetString();
                                                    break;
                                                case "Data":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.FirstPersonModel.Female.Data = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "FootstepSound":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.FootstepSound.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "FormVersion":
                    retval.FormVersion = reader.GetUInt16();
                    break;
                case "IsCompressed":
                    retval.IsCompressed = reader.GetBoolean();
                    break;
                case "IsDeleted":
                    retval.IsDeleted = reader.GetBoolean();
                    break;
                case "MajorRecordFlagsRaw":
                    retval.MajorRecordFlagsRaw = reader.GetInt32();
                    break;
                case "Priority":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        retval.Priority = new GenderedItem<Byte>(default, default);
                        reader.Read();
                        while(true)
                        {
                            if (reader.TokenType == JsonTokenType.EndObject)
                            {
                                break;
                            }
                            var prop14 = reader.GetString();
                            reader.Read();
                            switch(prop14)
                            {
                                case "Male":
                                    retval.Priority.Male = reader.GetByte();
                                break;
                                case "Female":
                                    retval.Priority.Female = reader.GetByte();
                                break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Race":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Race.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "SkinTexture":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        var itm15 = FormLinkNullable<Mutagen.Bethesda.Skyrim.ITextureSetGetter>.Null;
                        var itm16 = FormLinkNullable<Mutagen.Bethesda.Skyrim.ITextureSetGetter>.Null;
                        reader.Read();
                        while(true)
                        {
                            if (reader.TokenType == JsonTokenType.EndObject)
                            {
                                break;
                            }
                            var prop17 = reader.GetString();
                            reader.Read();
                            switch(prop17)
                            {
                                case "Male":
                                    itm15 = new FormLinkNullable<Mutagen.Bethesda.Skyrim.ITextureSetGetter>(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "Female":
                                    itm16 =  new FormLinkNullable<Mutagen.Bethesda.Skyrim.ITextureSetGetter>(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                            }
                        }
                        retval.SkinTexture = new GenderedItem<Mutagen.Bethesda.Plugins.IFormLinkNullableGetter<Mutagen.Bethesda.Skyrim.ITextureSetGetter>>(itm15, itm16);
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "SkyrimMajorRecordFlags":
                    retval.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                    break;
                case "TextureSwapList":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        var itm18 = FormLinkNullable<Mutagen.Bethesda.Skyrim.IFormListGetter>.Null;
                        var itm19 = FormLinkNullable<Mutagen.Bethesda.Skyrim.IFormListGetter>.Null;
                        reader.Read();
                        while(true)
                        {
                            if (reader.TokenType == JsonTokenType.EndObject)
                            {
                                break;
                            }
                            var prop20 = reader.GetString();
                            reader.Read();
                            switch(prop20)
                            {
                                case "Male":
                                    itm18 = new FormLinkNullable<Mutagen.Bethesda.Skyrim.IFormListGetter>(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "Female":
                                    itm19 =  new FormLinkNullable<Mutagen.Bethesda.Skyrim.IFormListGetter>(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                            }
                        }
                        retval.TextureSwapList = new GenderedItem<Mutagen.Bethesda.Plugins.IFormLinkNullableGetter<Mutagen.Bethesda.Skyrim.IFormListGetter>>(itm18, itm19);
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Unknown":
                    retval.Unknown = reader.GetUInt16();
                    break;
                case "Unknown2":
                    retval.Unknown2 = reader.GetByte();
                    break;
                case "Version2":
                    retval.Version2 = reader.GetUInt16();
                    break;
                case "VersionControl":
                    retval.VersionControl = reader.GetUInt32();
                    break;
                case "WeaponAdjust":
                    retval.WeaponAdjust = reader.GetSingle();
                    break;
                case "WeightSliderEnabled":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        retval.WeightSliderEnabled = new GenderedItem<Boolean>(default, default);
                        reader.Read();
                        while(true)
                        {
                            if (reader.TokenType == JsonTokenType.EndObject)
                            {
                                break;
                            }
                            var prop21 = reader.GetString();
                            reader.Read();
                            switch(prop21)
                            {
                                case "Male":
                                    retval.WeightSliderEnabled.Male = reader.GetBoolean();
                                break;
                                case "Female":
                                    retval.WeightSliderEnabled.Female = reader.GetBoolean();
                                break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "WorldModel":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        retval.WorldModel = new GenderedItem<Mutagen.Bethesda.Skyrim.Model>(default, default);
                        reader.Read();
                        while(true)
                        {
                            if (reader.TokenType == JsonTokenType.EndObject)
                            {
                                break;
                            }
                            var prop22 = reader.GetString();
                            reader.Read();
                            switch(prop22)
                            {
                                case "Male":
                                    retval.WorldModel.Male = new Mutagen.Bethesda.Skyrim.Model();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop23 = reader.GetString();
                                            reader.Read();
                                            switch(prop23)
                                            {
                                                case "AlternateTextures":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.WorldModel.Male.AlternateTextures ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            var itm24 = new Mutagen.Bethesda.Skyrim.AlternateTexture();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop25 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop25)
                                                                    {
                                                                        case "Name":
                                                                            itm24.Name = reader.GetString();
                                                                            break;
                                                                        case "NewTexture":
                                                                            itm24.NewTexture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Index":
                                                                            itm24.Index = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            retval.WorldModel.Male.AlternateTextures.Add(itm24);
                                                        }
                                                    }
                                                    break;
                                                case "File":
                                                    retval.WorldModel.Male.File = reader.GetString();
                                                    break;
                                                case "Data":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.WorldModel.Male.Data = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                break;
                                case "Female":
                                    retval.WorldModel.Female = new Mutagen.Bethesda.Skyrim.Model();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop26 = reader.GetString();
                                            reader.Read();
                                            switch(prop26)
                                            {
                                                case "AlternateTextures":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.WorldModel.Female.AlternateTextures ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            var itm27 = new Mutagen.Bethesda.Skyrim.AlternateTexture();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop28 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop28)
                                                                    {
                                                                        case "Name":
                                                                            itm27.Name = reader.GetString();
                                                                            break;
                                                                        case "NewTexture":
                                                                            itm27.NewTexture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Index":
                                                                            itm27.Index = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            retval.WorldModel.Female.AlternateTextures.Add(itm27);
                                                        }
                                                    }
                                                    break;
                                                case "File":
                                                    retval.WorldModel.Female.File = reader.GetString();
                                                    break;
                                                case "Data":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        retval.WorldModel.Female.Data = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }
        return retval;
    }
}
