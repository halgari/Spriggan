// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

public class ICameraPathGetter_Converter : JsonConverter<ICameraPathGetter>
{
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.ICameraPathGetter)) && !t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.CameraPath));
    }
    public override ICameraPathGetter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer, ICameraPathGetter value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WriteFormKeyHeader(value, options);
        
        // Conditions
        writer.WritePropertyName("Conditions");
        if (value.Conditions != null)
        {
            writer.WriteStartArray();
            foreach(var itm1 in value.Conditions)
            {
                if (itm1 != null)
                {
                    writer.WriteStartObject();
                    switch (itm1)
                    {
                        case Mutagen.Bethesda.Skyrim.IConditionFloatGetter itm2:
                            writer.WriteString("$type", "ConditionFloat");
                            
                            // ComparisonValue
                            writer.WritePropertyName("ComparisonValue");
                            writer.WriteNumberValue(itm2.ComparisonValue);
                            
                            // Data
                            writer.WritePropertyName("Data");
                            if (itm2.Data != null)
                            {
                                writer.WriteStartObject();
                                switch (itm2.Data)
                                {
                                    case Mutagen.Bethesda.Skyrim.IFunctionConditionDataGetter itm3:
                                        writer.WriteString("$type", "FunctionConditionData");
                                        
                                        // Function
                                        writer.WritePropertyName("Function");
                                        writer.WriteEnum(itm3.Function);
                                        
                                        // Unknown2
                                        writer.WritePropertyName("Unknown2");
                                        writer.WriteNumberValue((uint)itm3.Unknown2);
                                        
                                        // ParameterOneRecord
                                        writer.WritePropertyName("ParameterOneRecord");
                                        writer.WriteStringValue(itm3.ParameterOneRecord.FormKey.ToString());
                                        
                                        // ParameterOneNumber
                                        writer.WritePropertyName("ParameterOneNumber");
                                        writer.WriteNumberValue(itm3.ParameterOneNumber);
                                        
                                        // ParameterOneString
                                        writer.WritePropertyName("ParameterOneString");
                                        writer.WriteStringValue(itm3.ParameterOneString);
                                        
                                        // ParameterTwoRecord
                                        writer.WritePropertyName("ParameterTwoRecord");
                                        writer.WriteStringValue(itm3.ParameterTwoRecord.FormKey.ToString());
                                        
                                        // ParameterTwoNumber
                                        writer.WritePropertyName("ParameterTwoNumber");
                                        writer.WriteNumberValue(itm3.ParameterTwoNumber);
                                        
                                        // ParameterTwoString
                                        writer.WritePropertyName("ParameterTwoString");
                                        writer.WriteStringValue(itm3.ParameterTwoString);
                                        
                                        // RunOnType
                                        writer.WritePropertyName("RunOnType");
                                        writer.WriteEnum(itm3.RunOnType);
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm3.Reference.FormKey.ToString());
                                        
                                        // Unknown3
                                        writer.WritePropertyName("Unknown3");
                                        writer.WriteNumberValue(itm3.Unknown3);
                                        break;
                                    case Mutagen.Bethesda.Skyrim.IGetEventDataGetter itm4:
                                        writer.WriteString("$type", "GetEventData");
                                        
                                        // EventFunction
                                        writer.WritePropertyName("EventFunction");
                                        writer.WriteNumberValue((uint)itm4.EventFunction);
                                        
                                        // EventMember
                                        writer.WritePropertyName("EventMember");
                                        writer.WriteNumberValue((uint)itm4.EventMember);
                                        
                                        // Parameter3
                                        writer.WritePropertyName("Parameter3");
                                        writer.WriteStringValue(itm4.Parameter3.FormKey.ToString());
                                        
                                        // RunOnType
                                        writer.WritePropertyName("RunOnType");
                                        writer.WriteEnum(itm4.RunOnType);
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm4.Reference.FormKey.ToString());
                                        
                                        // Unknown3
                                        writer.WritePropertyName("Unknown3");
                                        writer.WriteNumberValue(itm4.Unknown3);
                                        break;
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // CompareOperator
                            writer.WritePropertyName("CompareOperator");
                            writer.WriteEnum(itm2.CompareOperator);
                            
                            // Flags
                            writer.WritePropertyName("Flags");
                            writer.WriteFlags(itm2.Flags);
                            
                            // Unknown1
                            writer.WritePropertyName("Unknown1");
                            writer.WriteBase64StringValue(itm2.Unknown1);
                            break;
                        case Mutagen.Bethesda.Skyrim.IConditionGlobalGetter itm5:
                            writer.WriteString("$type", "ConditionGlobal");
                            
                            // ComparisonValue
                            writer.WritePropertyName("ComparisonValue");
                            writer.WriteStringValue(itm5.ComparisonValue.FormKey.ToString());
                            
                            // Data
                            writer.WritePropertyName("Data");
                            if (itm5.Data != null)
                            {
                                writer.WriteStartObject();
                                switch (itm5.Data)
                                {
                                    case Mutagen.Bethesda.Skyrim.IFunctionConditionDataGetter itm6:
                                        writer.WriteString("$type", "FunctionConditionData");
                                        
                                        // Function
                                        writer.WritePropertyName("Function");
                                        writer.WriteEnum(itm6.Function);
                                        
                                        // Unknown2
                                        writer.WritePropertyName("Unknown2");
                                        writer.WriteNumberValue((uint)itm6.Unknown2);
                                        
                                        // ParameterOneRecord
                                        writer.WritePropertyName("ParameterOneRecord");
                                        writer.WriteStringValue(itm6.ParameterOneRecord.FormKey.ToString());
                                        
                                        // ParameterOneNumber
                                        writer.WritePropertyName("ParameterOneNumber");
                                        writer.WriteNumberValue(itm6.ParameterOneNumber);
                                        
                                        // ParameterOneString
                                        writer.WritePropertyName("ParameterOneString");
                                        writer.WriteStringValue(itm6.ParameterOneString);
                                        
                                        // ParameterTwoRecord
                                        writer.WritePropertyName("ParameterTwoRecord");
                                        writer.WriteStringValue(itm6.ParameterTwoRecord.FormKey.ToString());
                                        
                                        // ParameterTwoNumber
                                        writer.WritePropertyName("ParameterTwoNumber");
                                        writer.WriteNumberValue(itm6.ParameterTwoNumber);
                                        
                                        // ParameterTwoString
                                        writer.WritePropertyName("ParameterTwoString");
                                        writer.WriteStringValue(itm6.ParameterTwoString);
                                        
                                        // RunOnType
                                        writer.WritePropertyName("RunOnType");
                                        writer.WriteEnum(itm6.RunOnType);
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm6.Reference.FormKey.ToString());
                                        
                                        // Unknown3
                                        writer.WritePropertyName("Unknown3");
                                        writer.WriteNumberValue(itm6.Unknown3);
                                        break;
                                    case Mutagen.Bethesda.Skyrim.IGetEventDataGetter itm7:
                                        writer.WriteString("$type", "GetEventData");
                                        
                                        // EventFunction
                                        writer.WritePropertyName("EventFunction");
                                        writer.WriteNumberValue((uint)itm7.EventFunction);
                                        
                                        // EventMember
                                        writer.WritePropertyName("EventMember");
                                        writer.WriteNumberValue((uint)itm7.EventMember);
                                        
                                        // Parameter3
                                        writer.WritePropertyName("Parameter3");
                                        writer.WriteStringValue(itm7.Parameter3.FormKey.ToString());
                                        
                                        // RunOnType
                                        writer.WritePropertyName("RunOnType");
                                        writer.WriteEnum(itm7.RunOnType);
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm7.Reference.FormKey.ToString());
                                        
                                        // Unknown3
                                        writer.WritePropertyName("Unknown3");
                                        writer.WriteNumberValue(itm7.Unknown3);
                                        break;
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // CompareOperator
                            writer.WritePropertyName("CompareOperator");
                            writer.WriteEnum(itm5.CompareOperator);
                            
                            // Flags
                            writer.WritePropertyName("Flags");
                            writer.WriteFlags(itm5.Flags);
                            
                            // Unknown1
                            writer.WritePropertyName("Unknown1");
                            writer.WriteBase64StringValue(itm5.Unknown1);
                            break;
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // EditorID
        writer.WritePropertyName("EditorID");
        writer.WriteStringValue(value.EditorID);
        
        // IsCompressed
        writer.WritePropertyName("IsCompressed");
        writer.WriteBooleanValue(value.IsCompressed);
        
        // IsDeleted
        writer.WritePropertyName("IsDeleted");
        writer.WriteBooleanValue(value.IsDeleted);
        
        // MajorRecordFlagsRaw
        writer.WritePropertyName("MajorRecordFlagsRaw");
        writer.WriteNumberValue(value.MajorRecordFlagsRaw);
        
        // RelatedPaths
        writer.WritePropertyName("RelatedPaths");
        if (value.RelatedPaths != null)
        {
            writer.WriteStartArray();
            foreach(var itm8 in value.RelatedPaths)
            {
                writer.WriteStringValue(itm8.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Shots
        writer.WritePropertyName("Shots");
        if (value.Shots != null)
        {
            writer.WriteStartArray();
            foreach(var itm9 in value.Shots)
            {
                writer.WriteStringValue(itm9.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Version2
        writer.WritePropertyName("Version2");
        writer.WriteNumberValue((uint)value.Version2);
        
        // VersionControl
        writer.WritePropertyName("VersionControl");
        writer.WriteNumberValue(value.VersionControl);
        
        // Zoom
        writer.WritePropertyName("Zoom");
        writer.WriteFlags(value.Zoom);
        
        // ZoomMustHaveCameraShots
        writer.WritePropertyName("ZoomMustHaveCameraShots");
        writer.WriteBooleanValue(value.ZoomMustHaveCameraShots);
        writer.WriteEndObject();
    }
}
public class CameraPath_Converter : JsonConverter<Mutagen.Bethesda.Skyrim.CameraPath>
{
    private ICameraPathGetter_Converter _getterConverter;
    public CameraPath_Converter()
    {
        _getterConverter = new ICameraPathGetter_Converter();
    }
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.CameraPath));
    }
    public override void Write(Utf8JsonWriter writer, Mutagen.Bethesda.Skyrim.CameraPath value, JsonSerializerOptions options)
    {
        _getterConverter.Write(writer, (ICameraPathGetter)value, options);
    }
    public override Mutagen.Bethesda.Skyrim.CameraPath Read(
        ref Utf8JsonReader reader,
        Type typeToConvert,
        JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
        reader.Read();
        Mutagen.Bethesda.Skyrim.CameraPath retval = new Mutagen.Bethesda.Skyrim.CameraPath(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                reader.Read();
                break;
            }
            var prop = reader.GetString();
            reader.Read();
            switch (prop)
            {
                case "Conditions":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Condition itm10 = default;
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                {
                                    case "ConditionFloat":
                                        Mutagen.Bethesda.Skyrim.ConditionFloat itm11 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop12 = reader.GetString();
                                            reader.Read();
                                            switch(prop12)
                                            {
                                                case "Data":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                        {
                                                            case "FunctionConditionData":
                                                                Mutagen.Bethesda.Skyrim.FunctionConditionData itm13 = new();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop14 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop14)
                                                                    {
                                                                        case "Function":
                                                                            itm13.Function = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Condition.Function>(ref reader, options);
                                                                            break;
                                                                        case "Unknown2":
                                                                            itm13.Unknown2 = reader.GetUInt16();
                                                                            break;
                                                                        case "ParameterOneRecord":
                                                                            itm13.ParameterOneRecord.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "ParameterOneNumber":
                                                                            itm13.ParameterOneNumber = reader.GetInt32();
                                                                            break;
                                                                        case "ParameterOneString":
                                                                            itm13.ParameterOneString = reader.GetString();
                                                                            break;
                                                                        case "ParameterTwoRecord":
                                                                            itm13.ParameterTwoRecord.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "ParameterTwoNumber":
                                                                            itm13.ParameterTwoNumber = reader.GetInt32();
                                                                            break;
                                                                        case "ParameterTwoString":
                                                                            itm13.ParameterTwoString = reader.GetString();
                                                                            break;
                                                                        case "RunOnType":
                                                                            itm13.RunOnType = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Condition.RunOnType>(ref reader, options);
                                                                            break;
                                                                        case "Reference":
                                                                            itm13.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Unknown3":
                                                                            itm13.Unknown3 = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                                itm11.Data = itm13;
                                                                break;
                                                            case "GetEventData":
                                                                Mutagen.Bethesda.Skyrim.GetEventData itm15 = new();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop16 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop16)
                                                                    {
                                                                        case "EventFunction":
                                                                            itm15.EventFunction = reader.GetUInt16();
                                                                            break;
                                                                        case "EventMember":
                                                                            itm15.EventMember = reader.GetUInt16();
                                                                            break;
                                                                        case "Parameter3":
                                                                            itm15.Parameter3.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "RunOnType":
                                                                            itm15.RunOnType = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Condition.RunOnType>(ref reader, options);
                                                                            break;
                                                                        case "Reference":
                                                                            itm15.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Unknown3":
                                                                            itm15.Unknown3 = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                                itm11.Data = itm15;
                                                                break;
                                                            default:
                                                                reader.Skip();
                                                                break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "ComparisonValue":
                                                    itm11.ComparisonValue = reader.GetSingle();
                                                    break;
                                                case "CompareOperator":
                                                    itm11.CompareOperator = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.CompareOperator>(ref reader, options);
                                                    break;
                                                case "Flags":
                                                    itm11.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Condition.Flag>(ref reader, options);
                                                    break;
                                                case "Unknown1":
                                                    itm11.Unknown1 = reader.GetBytesFromBase64();
                                                    break;
                                            }
                                        }
                                        itm10 = itm11;
                                        break;
                                    case "ConditionGlobal":
                                        Mutagen.Bethesda.Skyrim.ConditionGlobal itm17 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop18 = reader.GetString();
                                            reader.Read();
                                            switch(prop18)
                                            {
                                                case "Data":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                        {
                                                            case "FunctionConditionData":
                                                                Mutagen.Bethesda.Skyrim.FunctionConditionData itm19 = new();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop20 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop20)
                                                                    {
                                                                        case "Function":
                                                                            itm19.Function = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Condition.Function>(ref reader, options);
                                                                            break;
                                                                        case "Unknown2":
                                                                            itm19.Unknown2 = reader.GetUInt16();
                                                                            break;
                                                                        case "ParameterOneRecord":
                                                                            itm19.ParameterOneRecord.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "ParameterOneNumber":
                                                                            itm19.ParameterOneNumber = reader.GetInt32();
                                                                            break;
                                                                        case "ParameterOneString":
                                                                            itm19.ParameterOneString = reader.GetString();
                                                                            break;
                                                                        case "ParameterTwoRecord":
                                                                            itm19.ParameterTwoRecord.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "ParameterTwoNumber":
                                                                            itm19.ParameterTwoNumber = reader.GetInt32();
                                                                            break;
                                                                        case "ParameterTwoString":
                                                                            itm19.ParameterTwoString = reader.GetString();
                                                                            break;
                                                                        case "RunOnType":
                                                                            itm19.RunOnType = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Condition.RunOnType>(ref reader, options);
                                                                            break;
                                                                        case "Reference":
                                                                            itm19.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Unknown3":
                                                                            itm19.Unknown3 = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                                itm17.Data = itm19;
                                                                break;
                                                            case "GetEventData":
                                                                Mutagen.Bethesda.Skyrim.GetEventData itm21 = new();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop22 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop22)
                                                                    {
                                                                        case "EventFunction":
                                                                            itm21.EventFunction = reader.GetUInt16();
                                                                            break;
                                                                        case "EventMember":
                                                                            itm21.EventMember = reader.GetUInt16();
                                                                            break;
                                                                        case "Parameter3":
                                                                            itm21.Parameter3.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "RunOnType":
                                                                            itm21.RunOnType = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Condition.RunOnType>(ref reader, options);
                                                                            break;
                                                                        case "Reference":
                                                                            itm21.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Unknown3":
                                                                            itm21.Unknown3 = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                                itm17.Data = itm21;
                                                                break;
                                                            default:
                                                                reader.Skip();
                                                                break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "ComparisonValue":
                                                    itm17.ComparisonValue.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "CompareOperator":
                                                    itm17.CompareOperator = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.CompareOperator>(ref reader, options);
                                                    break;
                                                case "Flags":
                                                    itm17.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Condition.Flag>(ref reader, options);
                                                    break;
                                                case "Unknown1":
                                                    itm17.Unknown1 = reader.GetBytesFromBase64();
                                                    break;
                                            }
                                        }
                                        itm10 = itm17;
                                        break;
                                    default:
                                        reader.Skip();
                                        break;
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.Conditions.Add(itm10);
                        }
                    }
                    break;
                case "EditorID":
                    retval.EditorID = reader.GetString();
                    break;
                case "FormVersion":
                    retval.FormVersion = reader.GetUInt16();
                    break;
                case "IsCompressed":
                    retval.IsCompressed = reader.GetBoolean();
                    break;
                case "IsDeleted":
                    retval.IsDeleted = reader.GetBoolean();
                    break;
                case "MajorRecordFlagsRaw":
                    retval.MajorRecordFlagsRaw = reader.GetInt32();
                    break;
                case "RelatedPaths":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.RelatedPaths.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "Shots":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.Shots.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "SkyrimMajorRecordFlags":
                    retval.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                    break;
                case "Version2":
                    retval.Version2 = reader.GetUInt16();
                    break;
                case "VersionControl":
                    retval.VersionControl = reader.GetUInt32();
                    break;
                case "Zoom":
                    retval.Zoom = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CameraPath.ZoomType>(ref reader, options);
                    break;
                case "ZoomMustHaveCameraShots":
                    retval.ZoomMustHaveCameraShots = reader.GetBoolean();
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }
        return retval;
    }
}
