// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

public class IArmorGetter_Converter : JsonConverter<IArmorGetter>
{
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.IArmorGetter)) && !t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Armor));
    }
    public override IArmorGetter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer, IArmorGetter value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WriteFormKeyHeader(value, options);
        
        // AlternateBlockMaterial
        writer.WritePropertyName("AlternateBlockMaterial");
        if (value.AlternateBlockMaterial.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.AlternateBlockMaterial.FormKey.ToString());
        
        // Armature
        writer.WritePropertyName("Armature");
        if (value.Armature != null)
        {
            writer.WriteStartArray();
            foreach(var itm1 in value.Armature)
            {
                writer.WriteStringValue(itm1.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // ArmorRating
        writer.WritePropertyName("ArmorRating");
        writer.WriteNumberValue(value.ArmorRating);
        
        // BashImpactDataSet
        writer.WritePropertyName("BashImpactDataSet");
        if (value.BashImpactDataSet.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.BashImpactDataSet.FormKey.ToString());
        
        // BodyTemplate
        writer.WritePropertyName("BodyTemplate");
        if (value.BodyTemplate != null)
        {
            writer.WriteStartObject();
            
            // FirstPersonFlags
            writer.WritePropertyName("FirstPersonFlags");
            writer.WriteFlags(value.BodyTemplate.FirstPersonFlags);
            
            // Flags
            writer.WritePropertyName("Flags");
            writer.WriteFlags(value.BodyTemplate.Flags);
            
            // ArmorType
            writer.WritePropertyName("ArmorType");
            writer.WriteEnum(value.BodyTemplate.ArmorType);
            
            // ActsLike44
            writer.WritePropertyName("ActsLike44");
            writer.WriteBooleanValue(value.BodyTemplate.ActsLike44);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // DATADataTypeState
        writer.WritePropertyName("DATADataTypeState");
        writer.WriteFlags(value.DATADataTypeState);
        
        // Description
        writer.WritePropertyName("Description");
        writer.WriteTranslatedString(value.Description, options);
        
        // Destructible
        writer.WritePropertyName("Destructible");
        if (value.Destructible != null)
        {
            writer.WriteStartObject();
            
            // Data
            writer.WritePropertyName("Data");
            if (value.Destructible.Data != null)
            {
                writer.WriteStartObject();
                
                // Health
                writer.WritePropertyName("Health");
                writer.WriteNumberValue(value.Destructible.Data.Health);
                
                // DESTCount
                writer.WritePropertyName("DESTCount");
                writer.WriteNumberValue(value.Destructible.Data.DESTCount);
                
                // VATSTargetable
                writer.WritePropertyName("VATSTargetable");
                writer.WriteBooleanValue(value.Destructible.Data.VATSTargetable);
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteNumberValue(value.Destructible.Data.Unknown);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Stages
            writer.WritePropertyName("Stages");
            if (value.Destructible.Stages != null)
            {
                writer.WriteStartArray();
                foreach(var itm2 in value.Destructible.Stages)
                {
                    if (itm2 != null)
                    {
                        writer.WriteStartObject();
                        
                        // Data
                        writer.WritePropertyName("Data");
                        if (itm2.Data != null)
                        {
                            writer.WriteStartObject();
                            
                            // HealthPercent
                            writer.WritePropertyName("HealthPercent");
                            writer.WriteNumberValue(itm2.Data.HealthPercent);
                            
                            // Index
                            writer.WritePropertyName("Index");
                            writer.WriteNumberValue(itm2.Data.Index);
                            
                            // ModelDamageStage
                            writer.WritePropertyName("ModelDamageStage");
                            writer.WriteNumberValue(itm2.Data.ModelDamageStage);
                            
                            // Flags
                            writer.WritePropertyName("Flags");
                            writer.WriteEnum(itm2.Data.Flags);
                            
                            // SelfDamagePerSecond
                            writer.WritePropertyName("SelfDamagePerSecond");
                            writer.WriteNumberValue(itm2.Data.SelfDamagePerSecond);
                            
                            // Explosion
                            writer.WritePropertyName("Explosion");
                            writer.WriteStringValue(itm2.Data.Explosion.FormKey.ToString());
                            
                            // Debris
                            writer.WritePropertyName("Debris");
                            writer.WriteStringValue(itm2.Data.Debris.FormKey.ToString());
                            
                            // DebrisCount
                            writer.WritePropertyName("DebrisCount");
                            writer.WriteNumberValue(itm2.Data.DebrisCount);
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // Model
                        writer.WritePropertyName("Model");
                        if (itm2.Model != null)
                        {
                            writer.WriteStartObject();
                            
                            // AlternateTextures
                            writer.WritePropertyName("AlternateTextures");
                            if (itm2.Model.AlternateTextures != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm3 in itm2.Model.AlternateTextures)
                                {
                                    if (itm3 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Name
                                        writer.WritePropertyName("Name");
                                        writer.WriteStringValue(itm3.Name);
                                        
                                        // NewTexture
                                        writer.WritePropertyName("NewTexture");
                                        writer.WriteStringValue(itm3.NewTexture.FormKey.ToString());
                                        
                                        // Index
                                        writer.WritePropertyName("Index");
                                        writer.WriteNumberValue(itm3.Index);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // File
                            writer.WritePropertyName("File");
                            writer.WriteStringValue(itm2.Model.File);
                            
                            // Data
                            writer.WritePropertyName("Data");
                            if (itm2.Model.Data == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm2.Model.Data.Value);
                            }
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // EditorID
        writer.WritePropertyName("EditorID");
        writer.WriteStringValue(value.EditorID);
        
        // EnchantmentAmount
        writer.WritePropertyName("EnchantmentAmount");
        if (value.EnchantmentAmount == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteNumberValue((uint)value.EnchantmentAmount);
        }
        
        // EquipmentType
        writer.WritePropertyName("EquipmentType");
        if (value.EquipmentType.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.EquipmentType.FormKey.ToString());
        
        // IsCompressed
        writer.WritePropertyName("IsCompressed");
        writer.WriteBooleanValue(value.IsCompressed);
        
        // IsDeleted
        writer.WritePropertyName("IsDeleted");
        writer.WriteBooleanValue(value.IsDeleted);
        
        // Keywords
        writer.WritePropertyName("Keywords");
        if (value.Keywords != null)
        {
            writer.WriteStartArray();
            foreach(var itm4 in value.Keywords)
            {
                writer.WriteStringValue(itm4.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // MajorFlags
        writer.WritePropertyName("MajorFlags");
        writer.WriteFlags(value.MajorFlags);
        
        // MajorRecordFlagsRaw
        writer.WritePropertyName("MajorRecordFlagsRaw");
        writer.WriteNumberValue(value.MajorRecordFlagsRaw);
        
        // Name
        writer.WritePropertyName("Name");
        writer.WriteTranslatedString(value.Name, options);
        
        // ObjectBounds
        writer.WritePropertyName("ObjectBounds");
        if (value.ObjectBounds != null)
        {
            writer.WriteStartObject();
            
            // First
            writer.WritePropertyName("First");
            writer.WriteP3Int16(value.ObjectBounds.First, options);
            
            // Second
            writer.WritePropertyName("Second");
            writer.WriteP3Int16(value.ObjectBounds.Second, options);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // ObjectEffect
        writer.WritePropertyName("ObjectEffect");
        if (value.ObjectEffect.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.ObjectEffect.FormKey.ToString());
        
        // PickUpSound
        writer.WritePropertyName("PickUpSound");
        if (value.PickUpSound.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.PickUpSound.FormKey.ToString());
        
        // PutDownSound
        writer.WritePropertyName("PutDownSound");
        if (value.PutDownSound.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.PutDownSound.FormKey.ToString());
        
        // Race
        writer.WritePropertyName("Race");
        if (value.Race.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Race.FormKey.ToString());
        
        // RagdollConstraintTemplate
        writer.WritePropertyName("RagdollConstraintTemplate");
        writer.WriteStringValue(value.RagdollConstraintTemplate);
        
        // TemplateArmor
        writer.WritePropertyName("TemplateArmor");
        if (value.TemplateArmor.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.TemplateArmor.FormKey.ToString());
        
        // Value
        writer.WritePropertyName("Value");
        writer.WriteNumberValue(value.Value);
        
        // Version2
        writer.WritePropertyName("Version2");
        writer.WriteNumberValue((uint)value.Version2);
        
        // VersionControl
        writer.WritePropertyName("VersionControl");
        writer.WriteNumberValue(value.VersionControl);
        
        // VirtualMachineAdapter
        writer.WritePropertyName("VirtualMachineAdapter");
        if (value.VirtualMachineAdapter != null)
        {
            writer.WriteStartObject();
            
            // Version
            writer.WritePropertyName("Version");
            writer.WriteNumberValue(value.VirtualMachineAdapter.Version);
            
            // ObjectFormat
            writer.WritePropertyName("ObjectFormat");
            writer.WriteNumberValue((uint)value.VirtualMachineAdapter.ObjectFormat);
            
            // Scripts
            writer.WritePropertyName("Scripts");
            if (value.VirtualMachineAdapter.Scripts != null)
            {
                writer.WriteStartArray();
                foreach(var itm5 in value.VirtualMachineAdapter.Scripts)
                {
                    if (itm5 != null)
                    {
                        writer.WriteStartObject();
                        
                        // Name
                        writer.WritePropertyName("Name");
                        writer.WriteStringValue(itm5.Name);
                        
                        // Flags
                        writer.WritePropertyName("Flags");
                        writer.WriteEnum(itm5.Flags);
                        
                        // Properties
                        writer.WritePropertyName("Properties");
                        if (itm5.Properties != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm6 in itm5.Properties)
                            {
                                if (itm6 != null)
                                {
                                    writer.WriteStartObject();
                                    switch (itm6)
                                    {
                                        case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm7:
                                            writer.WriteString("$type", "ScriptObjectProperty");
                                            
                                            // Object
                                            writer.WritePropertyName("Object");
                                            writer.WriteStringValue(itm7.Object.FormKey.ToString());
                                            
                                            // Alias
                                            writer.WritePropertyName("Alias");
                                            writer.WriteNumberValue(itm7.Alias);
                                            
                                            // Unused
                                            writer.WritePropertyName("Unused");
                                            writer.WriteNumberValue((uint)itm7.Unused);
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm7.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm7.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm8:
                                            writer.WriteString("$type", "ScriptStringProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            writer.WriteStringValue(itm8.Data);
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm8.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm8.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm9:
                                            writer.WriteString("$type", "ScriptIntProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            writer.WriteNumberValue(itm9.Data);
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm9.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm9.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm10:
                                            writer.WriteString("$type", "ScriptFloatProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            writer.WriteNumberValue(itm10.Data);
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm10.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm10.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm11:
                                            writer.WriteString("$type", "ScriptBoolProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            writer.WriteBooleanValue(itm11.Data);
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm11.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm11.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm12:
                                            writer.WriteString("$type", "ScriptObjectListProperty");
                                            
                                            // Objects
                                            writer.WritePropertyName("Objects");
                                            if (itm12.Objects != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm13 in itm12.Objects)
                                                {
                                                    if (itm13 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        
                                                        // Object
                                                        writer.WritePropertyName("Object");
                                                        writer.WriteStringValue(itm13.Object.FormKey.ToString());
                                                        
                                                        // Alias
                                                        writer.WritePropertyName("Alias");
                                                        writer.WriteNumberValue(itm13.Alias);
                                                        
                                                        // Unused
                                                        writer.WritePropertyName("Unused");
                                                        writer.WriteNumberValue((uint)itm13.Unused);
                                                        
                                                        // Name
                                                        writer.WritePropertyName("Name");
                                                        writer.WriteStringValue(itm13.Name);
                                                        
                                                        // Flags
                                                        writer.WritePropertyName("Flags");
                                                        writer.WriteEnum(itm13.Flags);
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm12.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm12.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm14:
                                            writer.WriteString("$type", "ScriptIntListProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            if (itm14.Data != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm15 in itm14.Data)
                                                {
                                                    writer.WriteNumberValue(itm15);
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm14.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm14.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm16:
                                            writer.WriteString("$type", "ScriptFloatListProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            if (itm16.Data != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm17 in itm16.Data)
                                                {
                                                    writer.WriteNumberValue(itm17);
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm16.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm16.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm18:
                                            writer.WriteString("$type", "ScriptBoolListProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            if (itm18.Data != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm19 in itm18.Data)
                                                {
                                                    writer.WriteBooleanValue(itm19);
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm18.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm18.Flags);
                                            break;
                                        case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm20:
                                            writer.WriteString("$type", "ScriptStringListProperty");
                                            
                                            // Data
                                            writer.WritePropertyName("Data");
                                            if (itm20.Data != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm21 in itm20.Data)
                                                {
                                                    writer.WriteStringValue(itm21);
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm20.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm20.Flags);
                                            break;
                                    }
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Weight
        writer.WritePropertyName("Weight");
        writer.WriteNumberValue(value.Weight);
        
        // WorldModel
        writer.WritePropertyName("WorldModel");
        if (value.WorldModel == null)
        {
            writer.WriteNullValue();
        }
        else
        {
            writer.WriteStartObject();
            writer.WritePropertyName("Male");
            if (value.WorldModel.Male != null)
            {
                writer.WriteStartObject();
                
                // Model
                writer.WritePropertyName("Model");
                if (value.WorldModel.Male.Model != null)
                {
                    writer.WriteStartObject();
                    
                    // AlternateTextures
                    writer.WritePropertyName("AlternateTextures");
                    if (value.WorldModel.Male.Model.AlternateTextures != null)
                    {
                        writer.WriteStartArray();
                        foreach(var itm22 in value.WorldModel.Male.Model.AlternateTextures)
                        {
                            if (itm22 != null)
                            {
                                writer.WriteStartObject();
                                
                                // Name
                                writer.WritePropertyName("Name");
                                writer.WriteStringValue(itm22.Name);
                                
                                // NewTexture
                                writer.WritePropertyName("NewTexture");
                                writer.WriteStringValue(itm22.NewTexture.FormKey.ToString());
                                
                                // Index
                                writer.WritePropertyName("Index");
                                writer.WriteNumberValue(itm22.Index);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                        }
                        writer.WriteEndArray();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                    
                    // File
                    writer.WritePropertyName("File");
                    writer.WriteStringValue(value.WorldModel.Male.Model.File);
                    
                    // Data
                    writer.WritePropertyName("Data");
                    if (value.WorldModel.Male.Model.Data == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(value.WorldModel.Male.Model.Data.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
                
                // Icons
                writer.WritePropertyName("Icons");
                if (value.WorldModel.Male.Icons != null)
                {
                    writer.WriteStartObject();
                    
                    // LargeIconFilename
                    writer.WritePropertyName("LargeIconFilename");
                    writer.WriteStringValue(value.WorldModel.Male.Icons.LargeIconFilename);
                    
                    // SmallIconFilename
                    writer.WritePropertyName("SmallIconFilename");
                    writer.WriteStringValue(value.WorldModel.Male.Icons.SmallIconFilename);
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WritePropertyName("Female");
            if (value.WorldModel.Female != null)
            {
                writer.WriteStartObject();
                
                // Model
                writer.WritePropertyName("Model");
                if (value.WorldModel.Female.Model != null)
                {
                    writer.WriteStartObject();
                    
                    // AlternateTextures
                    writer.WritePropertyName("AlternateTextures");
                    if (value.WorldModel.Female.Model.AlternateTextures != null)
                    {
                        writer.WriteStartArray();
                        foreach(var itm23 in value.WorldModel.Female.Model.AlternateTextures)
                        {
                            if (itm23 != null)
                            {
                                writer.WriteStartObject();
                                
                                // Name
                                writer.WritePropertyName("Name");
                                writer.WriteStringValue(itm23.Name);
                                
                                // NewTexture
                                writer.WritePropertyName("NewTexture");
                                writer.WriteStringValue(itm23.NewTexture.FormKey.ToString());
                                
                                // Index
                                writer.WritePropertyName("Index");
                                writer.WriteNumberValue(itm23.Index);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                        }
                        writer.WriteEndArray();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                    
                    // File
                    writer.WritePropertyName("File");
                    writer.WriteStringValue(value.WorldModel.Female.Model.File);
                    
                    // Data
                    writer.WritePropertyName("Data");
                    if (value.WorldModel.Female.Model.Data == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(value.WorldModel.Female.Model.Data.Value);
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
                
                // Icons
                writer.WritePropertyName("Icons");
                if (value.WorldModel.Female.Icons != null)
                {
                    writer.WriteStartObject();
                    
                    // LargeIconFilename
                    writer.WritePropertyName("LargeIconFilename");
                    writer.WriteStringValue(value.WorldModel.Female.Icons.LargeIconFilename);
                    
                    // SmallIconFilename
                    writer.WritePropertyName("SmallIconFilename");
                    writer.WriteStringValue(value.WorldModel.Female.Icons.SmallIconFilename);
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            writer.WriteEndObject();
        }
        writer.WriteEndObject();
    }
}
public class Armor_Converter : JsonConverter<Mutagen.Bethesda.Skyrim.Armor>
{
    private IArmorGetter_Converter _getterConverter;
    public Armor_Converter()
    {
        _getterConverter = new IArmorGetter_Converter();
    }
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Armor));
    }
    public override void Write(Utf8JsonWriter writer, Mutagen.Bethesda.Skyrim.Armor value, JsonSerializerOptions options)
    {
        _getterConverter.Write(writer, (IArmorGetter)value, options);
    }
    public override Mutagen.Bethesda.Skyrim.Armor Read(
        ref Utf8JsonReader reader,
        Type typeToConvert,
        JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
        reader.Read();
        Mutagen.Bethesda.Skyrim.Armor retval = new Mutagen.Bethesda.Skyrim.Armor(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                reader.Read();
                break;
            }
            var prop = reader.GetString();
            reader.Read();
            switch (prop)
            {
                case "AlternateBlockMaterial":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.AlternateBlockMaterial.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Armature":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.Armature.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "ArmorRating":
                    retval.ArmorRating = reader.GetSingle();
                    break;
                case "BashImpactDataSet":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.BashImpactDataSet.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "BodyTemplate":
                    retval.BodyTemplate = new Mutagen.Bethesda.Skyrim.BodyTemplate();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop24 = reader.GetString();
                            reader.Read();
                            switch(prop24)
                            {
                                case "FirstPersonFlags":
                                    retval.BodyTemplate.FirstPersonFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.BipedObjectFlag>(ref reader, options);
                                    break;
                                case "Flags":
                                    retval.BodyTemplate.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.BodyTemplate.Flag>(ref reader, options);
                                    break;
                                case "ArmorType":
                                    retval.BodyTemplate.ArmorType = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ArmorType>(ref reader, options);
                                    break;
                                case "ActsLike44":
                                    retval.BodyTemplate.ActsLike44 = reader.GetBoolean();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "DATADataTypeState":
                    retval.DATADataTypeState = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Armor.DATADataType>(ref reader, options);
                    break;
                case "Description":
                    retval.Description ??= new TranslatedString(Language.English);
                    SerializerExtensions.ReadTranslatedString(ref reader, retval.Description, options);
                    break;
                case "Destructible":
                    retval.Destructible = new Mutagen.Bethesda.Skyrim.Destructible();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop25 = reader.GetString();
                            reader.Read();
                            switch(prop25)
                            {
                                case "Data":
                                    retval.Destructible.Data = new Mutagen.Bethesda.Skyrim.DestructableData();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop26 = reader.GetString();
                                            reader.Read();
                                            switch(prop26)
                                            {
                                                case "Health":
                                                    retval.Destructible.Data.Health = reader.GetInt32();
                                                    break;
                                                case "DESTCount":
                                                    retval.Destructible.Data.DESTCount = reader.GetByte();
                                                    break;
                                                case "VATSTargetable":
                                                    retval.Destructible.Data.VATSTargetable = reader.GetBoolean();
                                                    break;
                                                case "Unknown":
                                                    retval.Destructible.Data.Unknown = reader.GetInt16();
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "Stages":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.DestructionStage itm27 = new Mutagen.Bethesda.Skyrim.DestructionStage();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop28 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop28)
                                                    {
                                                        case "Data":
                                                            itm27.Data = new Mutagen.Bethesda.Skyrim.DestructionStageData();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop29 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop29)
                                                                    {
                                                                        case "HealthPercent":
                                                                            itm27.Data.HealthPercent = reader.GetByte();
                                                                            break;
                                                                        case "Index":
                                                                            itm27.Data.Index = reader.GetByte();
                                                                            break;
                                                                        case "ModelDamageStage":
                                                                            itm27.Data.ModelDamageStage = reader.GetByte();
                                                                            break;
                                                                        case "Flags":
                                                                            itm27.Data.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.DestructionStageData.Flag>(ref reader, options);
                                                                            break;
                                                                        case "SelfDamagePerSecond":
                                                                            itm27.Data.SelfDamagePerSecond = reader.GetInt32();
                                                                            break;
                                                                        case "Explosion":
                                                                            itm27.Data.Explosion.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Debris":
                                                                            itm27.Data.Debris.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "DebrisCount":
                                                                            itm27.Data.DebrisCount = reader.GetInt32();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            break;
                                                        case "Model":
                                                            itm27.Model = new Mutagen.Bethesda.Skyrim.Model();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop30 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop30)
                                                                    {
                                                                        case "AlternateTextures":
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                itm27.Model.AlternateTextures ??= new();
                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                        break;
                                                                                    Mutagen.Bethesda.Skyrim.AlternateTexture itm31 = new Mutagen.Bethesda.Skyrim.AlternateTexture();
                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                    {
                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                            throw new JsonException();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop32 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop32)
                                                                                            {
                                                                                                case "Name":
                                                                                                    itm31.Name = reader.GetString();
                                                                                                    break;
                                                                                                case "NewTexture":
                                                                                                    itm31.NewTexture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                                case "Index":
                                                                                                    itm31.Index = reader.GetInt32();
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        reader.Skip();
                                                                                    }
                                                                                    itm27.Model.AlternateTextures.Add(itm31);
                                                                                }
                                                                            }
                                                                            break;
                                                                        case "File":
                                                                            itm27.Model.File = reader.GetString();
                                                                            break;
                                                                        case "Data":
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                itm27.Model.Data = reader.GetBytesFromBase64();
                                                                            }
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            retval.Destructible.Stages.Add(itm27);
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "EditorID":
                    retval.EditorID = reader.GetString();
                    break;
                case "EnchantmentAmount":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.EnchantmentAmount = reader.GetUInt16();
                    }
                    break;
                case "EquipmentType":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.EquipmentType.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "FormVersion":
                    retval.FormVersion = reader.GetUInt16();
                    break;
                case "IsCompressed":
                    retval.IsCompressed = reader.GetBoolean();
                    break;
                case "IsDeleted":
                    retval.IsDeleted = reader.GetBoolean();
                    break;
                case "Keywords":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.Keywords ??= new();
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.Keywords.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "MajorFlags":
                    retval.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Armor.MajorFlag>(ref reader, options);
                    break;
                case "MajorRecordFlagsRaw":
                    retval.MajorRecordFlagsRaw = reader.GetInt32();
                    break;
                case "Name":
                    retval.Name ??= new TranslatedString(Language.English);
                    SerializerExtensions.ReadTranslatedString(ref reader, retval.Name, options);
                    break;
                case "ObjectBounds":
                    retval.ObjectBounds = new Mutagen.Bethesda.Skyrim.ObjectBounds();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop33 = reader.GetString();
                            reader.Read();
                            switch(prop33)
                            {
                                case "First":
                                    retval.ObjectBounds.First = SerializerExtensions.ReadP3Int16(ref reader, options);
                                    break;
                                case "Second":
                                    retval.ObjectBounds.Second = SerializerExtensions.ReadP3Int16(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "ObjectEffect":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.ObjectEffect.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "PickUpSound":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.PickUpSound.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "PutDownSound":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.PutDownSound.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Race":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Race.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "RagdollConstraintTemplate":
                    retval.RagdollConstraintTemplate = reader.GetString();
                    break;
                case "SkyrimMajorRecordFlags":
                    retval.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                    break;
                case "TemplateArmor":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.TemplateArmor.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Value":
                    retval.Value = reader.GetUInt32();
                    break;
                case "Version2":
                    retval.Version2 = reader.GetUInt16();
                    break;
                case "VersionControl":
                    retval.VersionControl = reader.GetUInt32();
                    break;
                case "VirtualMachineAdapter":
                    retval.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop34 = reader.GetString();
                            reader.Read();
                            switch(prop34)
                            {
                                case "Version":
                                    retval.VirtualMachineAdapter.Version = reader.GetInt16();
                                    break;
                                case "ObjectFormat":
                                    retval.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                    break;
                                case "Scripts":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm35 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop36 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop36)
                                                    {
                                                        case "Name":
                                                            itm35.Name = reader.GetString();
                                                            break;
                                                        case "Flags":
                                                            itm35.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                            break;
                                                        case "Properties":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    ScriptProperty itm37 = default;
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                        {
                                                                            case "ScriptObjectProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm38 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop39 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop39)
                                                                                    {
                                                                                        case "Object":
                                                                                            itm38.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Alias":
                                                                                            itm38.Alias = reader.GetInt16();
                                                                                            break;
                                                                                        case "Unused":
                                                                                            itm38.Unused = reader.GetUInt16();
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm38.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm38.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm38;
                                                                                break;
                                                                            case "ScriptStringProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm40 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop41 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop41)
                                                                                    {
                                                                                        case "Data":
                                                                                            itm40.Data = reader.GetString();
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm40.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm40.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm40;
                                                                                break;
                                                                            case "ScriptIntProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm42 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop43 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop43)
                                                                                    {
                                                                                        case "Data":
                                                                                            itm42.Data = reader.GetInt32();
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm42.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm42.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm42;
                                                                                break;
                                                                            case "ScriptFloatProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm44 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop45 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop45)
                                                                                    {
                                                                                        case "Data":
                                                                                            itm44.Data = reader.GetSingle();
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm44.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm44.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm44;
                                                                                break;
                                                                            case "ScriptBoolProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm46 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop47 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop47)
                                                                                    {
                                                                                        case "Data":
                                                                                            itm46.Data = reader.GetBoolean();
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm46.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm46.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm46;
                                                                                break;
                                                                            case "ScriptObjectListProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm48 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop49 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop49)
                                                                                    {
                                                                                        case "Objects":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm50 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        while (true)
                                                                                                        {
                                                                                                            reader.Read();
                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                break;
                                                                                                            var prop51 = reader.GetString();
                                                                                                            reader.Read();
                                                                                                            switch(prop51)
                                                                                                            {
                                                                                                                case "Object":
                                                                                                                    itm50.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                    break;
                                                                                                                case "Alias":
                                                                                                                    itm50.Alias = reader.GetInt16();
                                                                                                                    break;
                                                                                                                case "Unused":
                                                                                                                    itm50.Unused = reader.GetUInt16();
                                                                                                                    break;
                                                                                                                case "Name":
                                                                                                                    itm50.Name = reader.GetString();
                                                                                                                    break;
                                                                                                                case "Flags":
                                                                                                                    itm50.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                    break;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm48.Objects.Add(itm50);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm48.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm48.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm48;
                                                                                break;
                                                                            case "ScriptIntListProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm52 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop53 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop53)
                                                                                    {
                                                                                        case "Data":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    Int32 itm54 = default;
                                                                                                    itm54 = reader.GetInt32();
                                                                                                    itm52.Data.Add(itm54);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm52.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm52.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm52;
                                                                                break;
                                                                            case "ScriptFloatListProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm55 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop56 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop56)
                                                                                    {
                                                                                        case "Data":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    Single itm57 = default;
                                                                                                    itm57 = reader.GetSingle();
                                                                                                    itm55.Data.Add(itm57);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm55.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm55.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm55;
                                                                                break;
                                                                            case "ScriptBoolListProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm58 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop59 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop59)
                                                                                    {
                                                                                        case "Data":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    Boolean itm60 = default;
                                                                                                    itm60 = reader.GetBoolean();
                                                                                                    itm58.Data.Add(itm60);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm58.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm58.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm58;
                                                                                break;
                                                                            case "ScriptStringListProperty":
                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm61 = new();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop62 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop62)
                                                                                    {
                                                                                        case "Data":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    String itm63 = default;
                                                                                                    itm63 = reader.GetString();
                                                                                                    itm61.Data.Add(itm63);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                        case "Name":
                                                                                            itm61.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm61.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                            break;
                                                                                    }
                                                                                }
                                                                                itm37 = itm61;
                                                                                break;
                                                                            default:
                                                                                reader.Skip();
                                                                                break;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm35.Properties.Add(itm37);
                                                                }
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            retval.VirtualMachineAdapter.Scripts.Add(itm35);
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Weight":
                    retval.Weight = reader.GetSingle();
                    break;
                case "WorldModel":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        retval.WorldModel = new GenderedItem<Mutagen.Bethesda.Skyrim.ArmorModel>(default, default);
                        while(true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                            {
                                break;
                            }
                            var prop64 = reader.GetString();
                            reader.Read();
                            switch(prop64)
                            {
                                case "Male":
                                    retval.WorldModel.Male = new Mutagen.Bethesda.Skyrim.ArmorModel();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop65 = reader.GetString();
                                            reader.Read();
                                            switch(prop65)
                                            {
                                                case "Model":
                                                    retval.WorldModel.Male.Model = new Mutagen.Bethesda.Skyrim.Model();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop66 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop66)
                                                            {
                                                                case "AlternateTextures":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        retval.WorldModel.Male.Model.AlternateTextures ??= new();
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.AlternateTexture itm67 = new Mutagen.Bethesda.Skyrim.AlternateTexture();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop68 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop68)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm67.Name = reader.GetString();
                                                                                            break;
                                                                                        case "NewTexture":
                                                                                            itm67.NewTexture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Index":
                                                                                            itm67.Index = reader.GetInt32();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            retval.WorldModel.Male.Model.AlternateTextures.Add(itm67);
                                                                        }
                                                                    }
                                                                    break;
                                                                case "File":
                                                                    retval.WorldModel.Male.Model.File = reader.GetString();
                                                                    break;
                                                                case "Data":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        retval.WorldModel.Male.Model.Data = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Icons":
                                                    retval.WorldModel.Male.Icons = new Mutagen.Bethesda.Skyrim.Icons();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop69 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop69)
                                                            {
                                                                case "LargeIconFilename":
                                                                    retval.WorldModel.Male.Icons.LargeIconFilename = reader.GetString();
                                                                    break;
                                                                case "SmallIconFilename":
                                                                    retval.WorldModel.Male.Icons.SmallIconFilename = reader.GetString();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "Female":
                                    retval.WorldModel.Female = new Mutagen.Bethesda.Skyrim.ArmorModel();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop70 = reader.GetString();
                                            reader.Read();
                                            switch(prop70)
                                            {
                                                case "Model":
                                                    retval.WorldModel.Female.Model = new Mutagen.Bethesda.Skyrim.Model();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop71 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop71)
                                                            {
                                                                case "AlternateTextures":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        retval.WorldModel.Female.Model.AlternateTextures ??= new();
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.AlternateTexture itm72 = new Mutagen.Bethesda.Skyrim.AlternateTexture();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop73 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop73)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm72.Name = reader.GetString();
                                                                                            break;
                                                                                        case "NewTexture":
                                                                                            itm72.NewTexture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Index":
                                                                                            itm72.Index = reader.GetInt32();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            retval.WorldModel.Female.Model.AlternateTextures.Add(itm72);
                                                                        }
                                                                    }
                                                                    break;
                                                                case "File":
                                                                    retval.WorldModel.Female.Model.File = reader.GetString();
                                                                    break;
                                                                case "Data":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        retval.WorldModel.Female.Model.Data = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Icons":
                                                    retval.WorldModel.Female.Icons = new Mutagen.Bethesda.Skyrim.Icons();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop74 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop74)
                                                            {
                                                                case "LargeIconFilename":
                                                                    retval.WorldModel.Female.Icons.LargeIconFilename = reader.GetString();
                                                                    break;
                                                                case "SmallIconFilename":
                                                                    retval.WorldModel.Female.Icons.SmallIconFilename = reader.GetString();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }
        return retval;
    }
}
