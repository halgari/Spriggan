// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

internal static class IPlaced_Reader
{
    public static Mutagen.Bethesda.Skyrim.IPlaced ReadOuter(ref Utf8JsonReader reader, JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.Null)
        {
            if (reader.TokenType != JsonTokenType.StartObject)
                throw new JsonException();
            var itm1 = SerializerExtensions.MajorRecordInternalFormKeyParse(SerializerExtensions.ReadTag(ref reader, $"FormKey", options));
            switch(itm1.Type)
            {
                case "PlacedNpc":
                    return PlacedNpc_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedObject":
                    return PlacedObject_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedArrow":
                    return PlacedArrow_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedBeam":
                    return PlacedBeam_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedFlame":
                    return PlacedFlame_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedCone":
                    return PlacedCone_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedBarrier":
                    return PlacedBarrier_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedTrap":
                    return PlacedTrap_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedHazard":
                    return PlacedHazard_Reader.ReadInner(ref reader, itm1.FormKey, options);
                case "PlacedMissile":
                    return PlacedMissile_Reader.ReadInner(ref reader, itm1.FormKey, options);
                default:
                    reader.Skip();
                    break;
            }
        }
        else
        {
            reader.Skip();
        }
        return default;
    }
}
