// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

public class ICellGetter_Converter : JsonConverter<ICellGetter>
{
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.ICellGetter)) && !t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Cell));
    }
    public override ICellGetter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer, ICellGetter value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WriteFormKeyHeader(value, options);
        
        // AcousticSpace
        writer.WritePropertyName("AcousticSpace");
        if (value.AcousticSpace.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.AcousticSpace.FormKey.ToString());
        
        // EditorID
        writer.WritePropertyName("EditorID");
        writer.WriteStringValue(value.EditorID);
        
        // EncounterZone
        writer.WritePropertyName("EncounterZone");
        if (value.EncounterZone.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.EncounterZone.FormKey.ToString());
        
        // Flags
        writer.WritePropertyName("Flags");
        writer.WriteFlags(value.Flags);
        
        // Grid
        writer.WritePropertyName("Grid");
        if (value.Grid != null)
        {
            writer.WriteStartObject();
            
            // Point
            writer.WritePropertyName("Point");
            writer.WriteP2Int(value.Grid.Point, options);
            
            // Flags
            writer.WritePropertyName("Flags");
            writer.WriteFlags(value.Grid.Flags);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // ImageSpace
        writer.WritePropertyName("ImageSpace");
        if (value.ImageSpace.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.ImageSpace.FormKey.ToString());
        
        // IsCompressed
        writer.WritePropertyName("IsCompressed");
        writer.WriteBooleanValue(value.IsCompressed);
        
        // IsDeleted
        writer.WritePropertyName("IsDeleted");
        writer.WriteBooleanValue(value.IsDeleted);
        
        // Landscape
        writer.WritePropertyName("Landscape");
        if (value.Landscape != null)
        {
            writer.WriteStartObject();
            
            // Flags
            writer.WritePropertyName("Flags");
            if (value.Landscape.Flags == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteFlags(value.Landscape.Flags.Value);
            }
            
            // VertexNormals
            writer.WritePropertyName("VertexNormals");
            writer.ReadOnlyArray2dWriter(value.Landscape.VertexNormals, itm =>
            {
                Noggog.P3UInt8 itm1 = default;
                writer.WriteP3UInt8(itm1, options);
            }
            );
            
            // VertexHeightMap
            writer.WritePropertyName("VertexHeightMap");
            if (value.Landscape.VertexHeightMap != null)
            {
                writer.WriteStartObject();
                
                // Offset
                writer.WritePropertyName("Offset");
                writer.WriteNumberValue(value.Landscape.VertexHeightMap.Offset);
                
                // HeightMap
                writer.WritePropertyName("HeightMap");
                writer.ReadOnlyArray2dWriter(value.Landscape.VertexHeightMap.HeightMap, itm =>
                {
                    Byte itm2 = default;
                    writer.WriteNumberValue(itm2);
                }
                );
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteP3UInt8(value.Landscape.VertexHeightMap.Unknown, options);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // VertexColors
            writer.WritePropertyName("VertexColors");
            writer.ReadOnlyArray2dWriter(value.Landscape.VertexColors, itm =>
            {
                Noggog.P3UInt8 itm3 = default;
                writer.WriteP3UInt8(itm3, options);
            }
            );
            
            // Layers
            writer.WritePropertyName("Layers");
            if (value.Landscape.Layers != null)
            {
                writer.WriteStartArray();
                foreach(var itm4 in value.Landscape.Layers)
                {
                    if (itm4 != null)
                    {
                        writer.WriteStartObject();
                        switch (itm4)
                        {
                            case Mutagen.Bethesda.Skyrim.IAlphaLayerGetter itm5:
                                writer.WriteString("$type", "AlphaLayer");
                                
                                // AlphaLayerData
                                writer.WritePropertyName("AlphaLayerData");
                                if (itm5.AlphaLayerData == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm5.AlphaLayerData.Value);
                                }
                                
                                // Header
                                writer.WritePropertyName("Header");
                                if (itm5.Header != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Texture
                                    writer.WritePropertyName("Texture");
                                    writer.WriteStringValue(itm5.Header.Texture.FormKey.ToString());
                                    
                                    // Quadrant
                                    writer.WritePropertyName("Quadrant");
                                    writer.WriteEnum(itm5.Header.Quadrant);
                                    
                                    // Unused
                                    writer.WritePropertyName("Unused");
                                    writer.WriteNumberValue(itm5.Header.Unused);
                                    
                                    // LayerNumber
                                    writer.WritePropertyName("LayerNumber");
                                    writer.WriteNumberValue((uint)itm5.Header.LayerNumber);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                break;
                        }
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Textures
            writer.WritePropertyName("Textures");
            if (value.Landscape.Textures != null)
            {
                writer.WriteStartArray();
                foreach(var itm6 in value.Landscape.Textures)
                {
                    writer.WriteStringValue(itm6.FormKey.ToString());
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // FormVersion
            writer.WritePropertyName("FormVersion");
            writer.WriteNumberValue((uint)value.Landscape.FormVersion);
            
            // Version2
            writer.WritePropertyName("Version2");
            writer.WriteNumberValue((uint)value.Landscape.Version2);
            
            // IsCompressed
            writer.WritePropertyName("IsCompressed");
            writer.WriteBooleanValue(value.Landscape.IsCompressed);
            
            // IsDeleted
            writer.WritePropertyName("IsDeleted");
            writer.WriteBooleanValue(value.Landscape.IsDeleted);
            
            // MajorRecordFlagsRaw
            writer.WritePropertyName("MajorRecordFlagsRaw");
            writer.WriteNumberValue(value.Landscape.MajorRecordFlagsRaw);
            
            // VersionControl
            writer.WritePropertyName("VersionControl");
            writer.WriteNumberValue(value.Landscape.VersionControl);
            
            // EditorID
            writer.WritePropertyName("EditorID");
            writer.WriteStringValue(value.Landscape.EditorID);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Lighting
        writer.WritePropertyName("Lighting");
        if (value.Lighting != null)
        {
            writer.WriteStartObject();
            
            // Versioning
            writer.WritePropertyName("Versioning");
            writer.WriteFlags(value.Lighting.Versioning);
            
            // AmbientColor
            writer.WritePropertyName("AmbientColor");
            writer.WriteStringValue(value.Lighting.AmbientColor.ToArgb().ToString("x8"));
            
            // DirectionalColor
            writer.WritePropertyName("DirectionalColor");
            writer.WriteStringValue(value.Lighting.DirectionalColor.ToArgb().ToString("x8"));
            
            // FogNearColor
            writer.WritePropertyName("FogNearColor");
            writer.WriteStringValue(value.Lighting.FogNearColor.ToArgb().ToString("x8"));
            
            // FogNear
            writer.WritePropertyName("FogNear");
            writer.WriteNumberValue(value.Lighting.FogNear);
            
            // FogFar
            writer.WritePropertyName("FogFar");
            writer.WriteNumberValue(value.Lighting.FogFar);
            
            // DirectionalRotationXY
            writer.WritePropertyName("DirectionalRotationXY");
            writer.WriteNumberValue(value.Lighting.DirectionalRotationXY);
            
            // DirectionalRotationZ
            writer.WritePropertyName("DirectionalRotationZ");
            writer.WriteNumberValue(value.Lighting.DirectionalRotationZ);
            
            // DirectionalFade
            writer.WritePropertyName("DirectionalFade");
            writer.WriteNumberValue(value.Lighting.DirectionalFade);
            
            // FogClipDistance
            writer.WritePropertyName("FogClipDistance");
            writer.WriteNumberValue(value.Lighting.FogClipDistance);
            
            // FogPower
            writer.WritePropertyName("FogPower");
            writer.WriteNumberValue(value.Lighting.FogPower);
            
            // AmbientColors
            writer.WritePropertyName("AmbientColors");
            if (value.Lighting.AmbientColors != null)
            {
                writer.WriteStartObject();
                
                // Versioning
                writer.WritePropertyName("Versioning");
                writer.WriteFlags(value.Lighting.AmbientColors.Versioning);
                
                // DirectionalXPlus
                writer.WritePropertyName("DirectionalXPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalXPlus.ToArgb().ToString("x8"));
                
                // DirectionalXMinus
                writer.WritePropertyName("DirectionalXMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalXMinus.ToArgb().ToString("x8"));
                
                // DirectionalYPlus
                writer.WritePropertyName("DirectionalYPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalYPlus.ToArgb().ToString("x8"));
                
                // DirectionalYMinus
                writer.WritePropertyName("DirectionalYMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalYMinus.ToArgb().ToString("x8"));
                
                // DirectionalZPlus
                writer.WritePropertyName("DirectionalZPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalZPlus.ToArgb().ToString("x8"));
                
                // DirectionalZMinus
                writer.WritePropertyName("DirectionalZMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalZMinus.ToArgb().ToString("x8"));
                
                // Specular
                writer.WritePropertyName("Specular");
                writer.WriteStringValue(value.Lighting.AmbientColors.Specular.ToArgb().ToString("x8"));
                
                // Scale
                writer.WritePropertyName("Scale");
                writer.WriteNumberValue(value.Lighting.AmbientColors.Scale);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // FogFarColor
            writer.WritePropertyName("FogFarColor");
            writer.WriteStringValue(value.Lighting.FogFarColor.ToArgb().ToString("x8"));
            
            // FogMax
            writer.WritePropertyName("FogMax");
            writer.WriteNumberValue(value.Lighting.FogMax);
            
            // LightFadeBegin
            writer.WritePropertyName("LightFadeBegin");
            writer.WriteNumberValue(value.Lighting.LightFadeBegin);
            
            // LightFadeEnd
            writer.WritePropertyName("LightFadeEnd");
            writer.WriteNumberValue(value.Lighting.LightFadeEnd);
            
            // Inherits
            writer.WritePropertyName("Inherits");
            writer.WriteFlags(value.Lighting.Inherits);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // LightingTemplate
        writer.WritePropertyName("LightingTemplate");
        writer.WriteStringValue(value.LightingTemplate.FormKey.ToString());
        
        // LNAM
        writer.WritePropertyName("LNAM");
        if (value.LNAM == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.LNAM.Value);
        }
        
        // Location
        writer.WritePropertyName("Location");
        if (value.Location.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Location.FormKey.ToString());
        
        // LockList
        writer.WritePropertyName("LockList");
        if (value.LockList.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.LockList.FormKey.ToString());
        
        // MajorFlags
        writer.WritePropertyName("MajorFlags");
        writer.WriteFlags(value.MajorFlags);
        
        // MajorRecordFlagsRaw
        writer.WritePropertyName("MajorRecordFlagsRaw");
        writer.WriteNumberValue(value.MajorRecordFlagsRaw);
        
        // MaxHeightData
        writer.WritePropertyName("MaxHeightData");
        if (value.MaxHeightData != null)
        {
            writer.WriteStartObject();
            
            // Offset
            writer.WritePropertyName("Offset");
            writer.WriteNumberValue(value.MaxHeightData.Offset);
            
            // HeightMap
            writer.WritePropertyName("HeightMap");
            writer.ReadOnlyArray2dWriter(value.MaxHeightData.HeightMap, itm =>
            {
                Byte itm7 = default;
                writer.WriteNumberValue(itm7);
            }
            );
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Music
        writer.WritePropertyName("Music");
        if (value.Music.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Music.FormKey.ToString());
        
        // Name
        writer.WritePropertyName("Name");
        writer.WriteTranslatedString(value.Name, options);
        
        // NavigationMeshes
        writer.WritePropertyName("NavigationMeshes");
        if (value.NavigationMeshes != null)
        {
            writer.WriteStartArray();
            foreach(var itm8 in value.NavigationMeshes)
            {
                if (itm8 != null)
                {
                    writer.WriteStartObject();
                    
                    // Data
                    writer.WritePropertyName("Data");
                    if (itm8.Data != null)
                    {
                        writer.WriteStartObject();
                        
                        // NavmeshVersion
                        writer.WritePropertyName("NavmeshVersion");
                        writer.WriteNumberValue(itm8.Data.NavmeshVersion);
                        
                        // Magic
                        writer.WritePropertyName("Magic");
                        writer.WriteNumberValue(itm8.Data.Magic);
                        
                        // Parent
                        writer.WritePropertyName("Parent");
                        if (itm8.Data.Parent != null)
                        {
                            writer.WriteStartObject();
                            switch (itm8.Data.Parent)
                            {
                                case Mutagen.Bethesda.Skyrim.IWorldspaceNavmeshParentGetter itm9:
                                    writer.WriteString("$type", "WorldspaceNavmeshParent");
                                    
                                    // Parent
                                    writer.WritePropertyName("Parent");
                                    writer.WriteStringValue(itm9.Parent.FormKey.ToString());
                                    
                                    // Coordinates
                                    writer.WritePropertyName("Coordinates");
                                    writer.WriteP2Int16(itm9.Coordinates, options);
                                    break;
                                case Mutagen.Bethesda.Skyrim.ICellNavmeshParentGetter itm10:
                                    writer.WriteString("$type", "CellNavmeshParent");
                                    
                                    // UnusedWorldspaceParent
                                    writer.WritePropertyName("UnusedWorldspaceParent");
                                    writer.WriteStringValue(itm10.UnusedWorldspaceParent.FormKey.ToString());
                                    
                                    // Parent
                                    writer.WritePropertyName("Parent");
                                    writer.WriteStringValue(itm10.Parent.FormKey.ToString());
                                    break;
                            }
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // Vertices
                        writer.WritePropertyName("Vertices");
                        if (itm8.Data.Vertices != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm11 in itm8.Data.Vertices)
                            {
                                writer.WriteP3Float(itm11, options);
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // Triangles
                        writer.WritePropertyName("Triangles");
                        if (itm8.Data.Triangles != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm12 in itm8.Data.Triangles)
                            {
                                if (itm12 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Vertices
                                    writer.WritePropertyName("Vertices");
                                    writer.WriteP3Int16(itm12.Vertices, options);
                                    
                                    // EdgeLink_0_1
                                    writer.WritePropertyName("EdgeLink_0_1");
                                    writer.WriteNumberValue(itm12.EdgeLink_0_1);
                                    
                                    // EdgeLink_1_2
                                    writer.WritePropertyName("EdgeLink_1_2");
                                    writer.WriteNumberValue(itm12.EdgeLink_1_2);
                                    
                                    // EdgeLink_2_0
                                    writer.WritePropertyName("EdgeLink_2_0");
                                    writer.WriteNumberValue(itm12.EdgeLink_2_0);
                                    
                                    // Flags
                                    writer.WritePropertyName("Flags");
                                    writer.WriteFlags(itm12.Flags);
                                    
                                    // CoverFlags
                                    writer.WritePropertyName("CoverFlags");
                                    writer.WriteNumberValue((uint)itm12.CoverFlags);
                                    
                                    // IsCover
                                    writer.WritePropertyName("IsCover");
                                    writer.WriteBooleanValue(itm12.IsCover);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // EdgeLinks
                        writer.WritePropertyName("EdgeLinks");
                        if (itm8.Data.EdgeLinks != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm13 in itm8.Data.EdgeLinks)
                            {
                                if (itm13 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Unknown
                                    writer.WritePropertyName("Unknown");
                                    writer.WriteNumberValue(itm13.Unknown);
                                    
                                    // Mesh
                                    writer.WritePropertyName("Mesh");
                                    writer.WriteStringValue(itm13.Mesh.FormKey.ToString());
                                    
                                    // TriangleIndex
                                    writer.WritePropertyName("TriangleIndex");
                                    writer.WriteNumberValue(itm13.TriangleIndex);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // DoorTriangles
                        writer.WritePropertyName("DoorTriangles");
                        if (itm8.Data.DoorTriangles != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm14 in itm8.Data.DoorTriangles)
                            {
                                if (itm14 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // TriangleBeforeDoor
                                    writer.WritePropertyName("TriangleBeforeDoor");
                                    writer.WriteNumberValue(itm14.TriangleBeforeDoor);
                                    
                                    // Unknown
                                    writer.WritePropertyName("Unknown");
                                    writer.WriteNumberValue(itm14.Unknown);
                                    
                                    // Door
                                    writer.WritePropertyName("Door");
                                    writer.WriteStringValue(itm14.Door.FormKey.ToString());
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // NavmeshGridDivisor
                        writer.WritePropertyName("NavmeshGridDivisor");
                        writer.WriteNumberValue(itm8.Data.NavmeshGridDivisor);
                        
                        // MaxDistanceX
                        writer.WritePropertyName("MaxDistanceX");
                        writer.WriteNumberValue(itm8.Data.MaxDistanceX);
                        
                        // MaxDistanceY
                        writer.WritePropertyName("MaxDistanceY");
                        writer.WriteNumberValue(itm8.Data.MaxDistanceY);
                        
                        // Min
                        writer.WritePropertyName("Min");
                        writer.WriteP3Float(itm8.Data.Min, options);
                        
                        // Max
                        writer.WritePropertyName("Max");
                        writer.WriteP3Float(itm8.Data.Max, options);
                        
                        // NavmeshGrid
                        writer.WritePropertyName("NavmeshGrid");
                        writer.WriteBase64StringValue(itm8.Data.NavmeshGrid);
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                    
                    // ONAM
                    writer.WritePropertyName("ONAM");
                    if (itm8.ONAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm8.ONAM.Value);
                    }
                    
                    // PNAM
                    writer.WritePropertyName("PNAM");
                    if (itm8.PNAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm8.PNAM.Value);
                    }
                    
                    // NNAM
                    writer.WritePropertyName("NNAM");
                    if (itm8.NNAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm8.NNAM.Value);
                    }
                    
                    // MajorFlags
                    writer.WritePropertyName("MajorFlags");
                    writer.WriteFlags(itm8.MajorFlags);
                    
                    // FormVersion
                    writer.WritePropertyName("FormVersion");
                    writer.WriteNumberValue((uint)itm8.FormVersion);
                    
                    // Version2
                    writer.WritePropertyName("Version2");
                    writer.WriteNumberValue((uint)itm8.Version2);
                    
                    // IsCompressed
                    writer.WritePropertyName("IsCompressed");
                    writer.WriteBooleanValue(itm8.IsCompressed);
                    
                    // IsDeleted
                    writer.WritePropertyName("IsDeleted");
                    writer.WriteBooleanValue(itm8.IsDeleted);
                    
                    // MajorRecordFlagsRaw
                    writer.WritePropertyName("MajorRecordFlagsRaw");
                    writer.WriteNumberValue(itm8.MajorRecordFlagsRaw);
                    
                    // VersionControl
                    writer.WritePropertyName("VersionControl");
                    writer.WriteNumberValue(itm8.VersionControl);
                    
                    // EditorID
                    writer.WritePropertyName("EditorID");
                    writer.WriteStringValue(itm8.EditorID);
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // OcclusionData
        writer.WritePropertyName("OcclusionData");
        if (value.OcclusionData == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.OcclusionData.Value);
        }
        
        // Ownership
        writer.WritePropertyName("Ownership");
        if (value.Ownership != null)
        {
            writer.WriteStartObject();
            
            // Owner
            writer.WritePropertyName("Owner");
            if (value.Ownership.Owner.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.Ownership.Owner.FormKey.ToString());
            
            // FactionRank
            writer.WritePropertyName("FactionRank");
            if (value.Ownership.FactionRank == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.Ownership.FactionRank.Value);
            }
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Persistent
        writer.WritePropertyName("Persistent");
        if (value.Persistent != null)
        {
            writer.WriteStartArray();
            foreach(var itm15 in value.Persistent)
            {
                if (itm15 != null)
                {
                    writer.WriteStartObject();
                    switch (itm15)
                    {
                        case Mutagen.Bethesda.Skyrim.IPlacedNpcGetter itm16:
                            writer.WriteString("$type", "PlacedNpc");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm16.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm16.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm16.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm16.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm17 in itm16.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm17 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm17.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm17.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm17.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm18 in itm17.Properties)
                                                {
                                                    if (itm18 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm18)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm19:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm19.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm19.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm19.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm19.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm19.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm20:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm20.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm20.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm20.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm21:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm21.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm21.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm21.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm22:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm22.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm22.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm22.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm23:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm23.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm23.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm23.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm24:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm24.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm25 in itm24.Objects)
                                                                    {
                                                                        if (itm25 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm25.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm25.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm25.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm25.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm25.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm24.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm24.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm26:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm26.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm27 in itm26.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm27);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm26.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm26.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm28:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm28.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm29 in itm28.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm29);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm28.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm28.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm30:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm30.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm31 in itm30.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm31);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm30.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm30.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm32:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm32.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm33 in itm32.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm33);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm32.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm32.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm16.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.Base.FormKey.ToString());
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm16.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.EncounterZone.FormKey.ToString());
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm16.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm16.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm16.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm16.RagdollBipedData.Value);
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm16.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm16.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm16.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm16.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm16.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm16.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm16.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm16.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm34 in itm16.Patrol.Topics)
                                    {
                                        if (itm34 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm34)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm35:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm35.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm36:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm36.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm16.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm16.LevelModifier.Value);
                            }
                            
                            // MerchantContainer
                            writer.WritePropertyName("MerchantContainer");
                            if (itm16.MerchantContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.MerchantContainer.FormKey.ToString());
                            
                            // Count
                            writer.WritePropertyName("Count");
                            if (itm16.Count == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm16.Count.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm16.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm16.Radius.Value);
                            }
                            
                            // Health
                            writer.WritePropertyName("Health");
                            if (itm16.Health == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm16.Health.Value);
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm16.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm37 in itm16.LinkedReferences)
                                {
                                    if (itm37 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm37.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm37.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm37.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm16.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm16.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm16.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm38 in itm16.ActivateParents.Parents)
                                    {
                                        if (itm38 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm38.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm38.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferenceColor
                            writer.WritePropertyName("LinkedReferenceColor");
                            if (itm16.LinkedReferenceColor != null)
                            {
                                writer.WriteStartObject();
                                
                                // Start
                                writer.WritePropertyName("Start");
                                writer.WriteStringValue(itm16.LinkedReferenceColor.Start.ToArgb().ToString("x8"));
                                
                                // End
                                writer.WritePropertyName("End");
                                writer.WriteStringValue(itm16.LinkedReferenceColor.End.ToArgb().ToString("x8"));
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm16.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.PersistentLocation.FormKey.ToString());
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm16.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.LocationReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm16.IsIgnoredBySandbox);
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm16.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm39 in itm16.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm39.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm16.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm16.HeadTrackingWeight.Value);
                            }
                            
                            // Horse
                            writer.WritePropertyName("Horse");
                            if (itm16.Horse.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.Horse.FormKey.ToString());
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm16.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm16.FavorCost.Value);
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm16.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm16.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm16.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm16.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm16.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm16.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm16.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm16.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm16.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm16.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm16.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.Emittance.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm16.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm16.MultiboundReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox2
                            writer.WritePropertyName("IsIgnoredBySandbox2");
                            writer.WriteBooleanValue(itm16.IsIgnoredBySandbox2);
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm16.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm16.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm16.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm16.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm16.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm16.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm16.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm16.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm16.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm16.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm16.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm16.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm16.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedObjectGetter itm40:
                            writer.WriteString("$type", "PlacedObject");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm40.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm40.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm40.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm40.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm41 in itm40.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm41 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm41.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm41.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm41.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm42 in itm41.Properties)
                                                {
                                                    if (itm42 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm42)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm43:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm43.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm43.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm43.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm43.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm43.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm44:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm44.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm44.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm44.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm45:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm45.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm45.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm45.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm46:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm46.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm46.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm46.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm47:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm47.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm47.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm47.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm48:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm48.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm49 in itm48.Objects)
                                                                    {
                                                                        if (itm49 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm49.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm49.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm49.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm49.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm49.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm48.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm48.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm50:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm50.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm51 in itm50.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm51);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm50.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm50.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm52:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm52.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm53 in itm52.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm53);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm52.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm52.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm54:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm54.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm55 in itm54.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm55);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm54.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm54.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm56:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm56.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm57 in itm56.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm57);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm56.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm56.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm40.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.Base.FormKey.ToString());
                            
                            // BoundHalfExtents
                            writer.WritePropertyName("BoundHalfExtents");
                            if (itm40.BoundHalfExtents == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteP3Float(itm40.BoundHalfExtents, options);
                            }
                            
                            // Primitive
                            writer.WritePropertyName("Primitive");
                            if (itm40.Primitive != null)
                            {
                                writer.WriteStartObject();
                                
                                // Bounds
                                writer.WritePropertyName("Bounds");
                                writer.WriteP3Float(itm40.Primitive.Bounds, options);
                                
                                // Color
                                writer.WritePropertyName("Color");
                                writer.WriteStringValue(itm40.Primitive.Color.ToArgb().ToString("x8"));
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm40.Primitive.Unknown);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm40.Primitive.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XORD
                            writer.WritePropertyName("XORD");
                            if (itm40.XORD == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.XORD.Value);
                            }
                            
                            // OcclusionPlane
                            writer.WritePropertyName("OcclusionPlane");
                            if (itm40.OcclusionPlane != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm40.OcclusionPlane.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm40.OcclusionPlane.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm40.OcclusionPlane.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm40.OcclusionPlane.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm40.OcclusionPlane.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm40.OcclusionPlane.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm40.OcclusionPlane.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Portals
                            writer.WritePropertyName("Portals");
                            if (itm40.Portals != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm58 in itm40.Portals)
                                {
                                    if (itm58 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Origin
                                        writer.WritePropertyName("Origin");
                                        writer.WriteStringValue(itm58.Origin.FormKey.ToString());
                                        
                                        // Destination
                                        writer.WritePropertyName("Destination");
                                        writer.WriteStringValue(itm58.Destination.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // RoomPortal
                            writer.WritePropertyName("RoomPortal");
                            if (itm40.RoomPortal != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm40.RoomPortal.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm40.RoomPortal.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm40.RoomPortal.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm40.RoomPortal.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm40.RoomPortal.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm40.RoomPortal.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm40.RoomPortal.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Unknown
                            writer.WritePropertyName("Unknown");
                            writer.WriteNumberValue(itm40.Unknown);
                            
                            // LightingTemplate
                            writer.WritePropertyName("LightingTemplate");
                            if (itm40.LightingTemplate.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.LightingTemplate.FormKey.ToString());
                            
                            // ImageSpace
                            writer.WritePropertyName("ImageSpace");
                            if (itm40.ImageSpace.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.ImageSpace.FormKey.ToString());
                            
                            // LinkedRooms
                            writer.WritePropertyName("LinkedRooms");
                            if (itm40.LinkedRooms != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm59 in itm40.LinkedRooms)
                                {
                                    writer.WriteStringValue(itm59.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsMultiBoundPrimitive
                            writer.WritePropertyName("IsMultiBoundPrimitive");
                            writer.WriteBooleanValue(itm40.IsMultiBoundPrimitive);
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm40.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm40.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.RagdollBipedData.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm40.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm40.Radius.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm40.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm60 in itm40.Reflections)
                                {
                                    if (itm60 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm60.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm60.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm60.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LitWater
                            writer.WritePropertyName("LitWater");
                            if (itm40.LitWater != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm61 in itm40.LitWater)
                                {
                                    writer.WriteStringValue(itm61.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm40.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.Emittance.FormKey.ToString());
                            
                            // LightData
                            writer.WritePropertyName("LightData");
                            if (itm40.LightData != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm40.LightData.Versioning);
                                
                                // FovOffset
                                writer.WritePropertyName("FovOffset");
                                writer.WriteNumberValue(itm40.LightData.FovOffset);
                                
                                // FadeOffset
                                writer.WritePropertyName("FadeOffset");
                                writer.WriteNumberValue(itm40.LightData.FadeOffset);
                                
                                // EndDistanceCap
                                writer.WritePropertyName("EndDistanceCap");
                                writer.WriteNumberValue(itm40.LightData.EndDistanceCap);
                                
                                // ShadowDepthBias
                                writer.WritePropertyName("ShadowDepthBias");
                                writer.WriteNumberValue(itm40.LightData.ShadowDepthBias);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm40.LightData.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Alpha
                            writer.WritePropertyName("Alpha");
                            if (itm40.Alpha != null)
                            {
                                writer.WriteStartObject();
                                
                                // Cutoff
                                writer.WritePropertyName("Cutoff");
                                writer.WriteNumberValue(itm40.Alpha.Cutoff);
                                
                                // Base
                                writer.WritePropertyName("Base");
                                writer.WriteNumberValue(itm40.Alpha.Base);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportDestination
                            writer.WritePropertyName("TeleportDestination");
                            if (itm40.TeleportDestination != null)
                            {
                                writer.WriteStartObject();
                                
                                // Door
                                writer.WritePropertyName("Door");
                                writer.WriteStringValue(itm40.TeleportDestination.Door.FormKey.ToString());
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm40.TeleportDestination.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm40.TeleportDestination.Rotation, options);
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm40.TeleportDestination.Flags);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportMessageBox
                            writer.WritePropertyName("TeleportMessageBox");
                            if (itm40.TeleportMessageBox.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.TeleportMessageBox.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm40.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.MultiboundReference.FormKey.ToString());
                            
                            // XWCN
                            writer.WritePropertyName("XWCN");
                            if (itm40.XWCN == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.XWCN.Value);
                            }
                            
                            // XWCS
                            writer.WritePropertyName("XWCS");
                            if (itm40.XWCS == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.XWCS.Value);
                            }
                            
                            // WaterVelocity
                            writer.WritePropertyName("WaterVelocity");
                            if (itm40.WaterVelocity != null)
                            {
                                writer.WriteStartObject();
                                
                                // Offset
                                writer.WritePropertyName("Offset");
                                writer.WriteP3Float(itm40.WaterVelocity.Offset, options);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm40.WaterVelocity.Unknown);
                                
                                // Angle
                                writer.WritePropertyName("Angle");
                                writer.WriteP3Float(itm40.WaterVelocity.Angle, options);
                                
                                // Unknown2
                                writer.WritePropertyName("Unknown2");
                                writer.WriteBase64StringValue(itm40.WaterVelocity.Unknown2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XCVL
                            writer.WritePropertyName("XCVL");
                            if (itm40.XCVL == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.XCVL.Value);
                            }
                            
                            // XCZR
                            writer.WritePropertyName("XCZR");
                            if (itm40.XCZR.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.XCZR.FormKey.ToString());
                            
                            // XCZA
                            writer.WritePropertyName("XCZA");
                            if (itm40.XCZA == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.XCZA.Value);
                            }
                            
                            // XCZC
                            writer.WritePropertyName("XCZC");
                            if (itm40.XCZC.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.XCZC.FormKey.ToString());
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm40.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm40.Scale.Value);
                            }
                            
                            // SpawnContainer
                            writer.WritePropertyName("SpawnContainer");
                            if (itm40.SpawnContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.SpawnContainer.FormKey.ToString());
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm40.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm40.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm40.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm62 in itm40.ActivateParents.Parents)
                                    {
                                        if (itm62 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm62.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm62.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LeveledItemBaseObject
                            writer.WritePropertyName("LeveledItemBaseObject");
                            if (itm40.LeveledItemBaseObject.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.LeveledItemBaseObject.FormKey.ToString());
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm40.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm40.LevelModifier.Value);
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm40.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.PersistentLocation.FormKey.ToString());
                            
                            // CollisionLayer
                            writer.WritePropertyName("CollisionLayer");
                            if (itm40.CollisionLayer == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm40.CollisionLayer.Value);
                            }
                            
                            // Lock
                            writer.WritePropertyName("Lock");
                            if (itm40.Lock != null)
                            {
                                writer.WriteStartObject();
                                
                                // Level
                                writer.WritePropertyName("Level");
                                writer.WriteEnum(itm40.Lock.Level);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteBase64StringValue(itm40.Lock.Unused);
                                
                                // Key
                                writer.WritePropertyName("Key");
                                writer.WriteStringValue(itm40.Lock.Key.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm40.Lock.Flags);
                                
                                // Unused2
                                writer.WritePropertyName("Unused2");
                                writer.WriteBase64StringValue(itm40.Lock.Unused2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm40.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.EncounterZone.FormKey.ToString());
                            
                            // NavigationDoorLink
                            writer.WritePropertyName("NavigationDoorLink");
                            if (itm40.NavigationDoorLink != null)
                            {
                                writer.WriteStartObject();
                                
                                // NavMesh
                                writer.WritePropertyName("NavMesh");
                                writer.WriteStringValue(itm40.NavigationDoorLink.NavMesh.FormKey.ToString());
                                
                                // TeleportMarkerTriangle
                                writer.WritePropertyName("TeleportMarkerTriangle");
                                writer.WriteNumberValue(itm40.NavigationDoorLink.TeleportMarkerTriangle);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteNumberValue(itm40.NavigationDoorLink.Unused);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm40.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm63 in itm40.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm63.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm40.IsIgnoredBySandbox);
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm40.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm40.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm40.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm40.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm40.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ItemCount
                            writer.WritePropertyName("ItemCount");
                            if (itm40.ItemCount == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm40.ItemCount.Value);
                            }
                            
                            // Charge
                            writer.WritePropertyName("Charge");
                            if (itm40.Charge == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm40.Charge.Value);
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm40.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.LocationReference.FormKey.ToString());
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm40.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm40.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm40.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm40.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm40.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm40.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm64 in itm40.LinkedReferences)
                                {
                                    if (itm64 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm64.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm64.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm64.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm40.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm40.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm40.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm40.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm40.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm40.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm40.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm40.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm65 in itm40.Patrol.Topics)
                                    {
                                        if (itm65 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm65)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm66:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm66.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm67:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm67.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Action
                            writer.WritePropertyName("Action");
                            if (itm40.Action == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm40.Action.Value);
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm40.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm40.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm40.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm40.FavorCost.Value);
                            }
                            
                            // IsOpenByDefault
                            writer.WritePropertyName("IsOpenByDefault");
                            writer.WriteBooleanValue(itm40.IsOpenByDefault);
                            
                            // MapMarker
                            writer.WritePropertyName("MapMarker");
                            if (itm40.MapMarker != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm40.MapMarker.Flags);
                                
                                // Name
                                writer.WritePropertyName("Name");
                                writer.WriteTranslatedString(itm40.MapMarker.Name, options);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm40.MapMarker.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // AttachRef
                            writer.WritePropertyName("AttachRef");
                            if (itm40.AttachRef.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm40.AttachRef.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm40.DistantLodData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm40.DistantLodData.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm40.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm40.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm40.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm40.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm40.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm40.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm40.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm40.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm40.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm40.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedArrowGetter itm68:
                            writer.WriteString("$type", "PlacedArrow");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm68.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm68.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm68.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm68.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm68.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm69 in itm68.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm69 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm69.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm69.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm69.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm70 in itm69.Properties)
                                                {
                                                    if (itm70 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm70)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm71:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm71.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm71.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm71.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm71.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm71.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm72:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm72.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm72.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm72.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm73:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm73.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm73.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm73.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm74:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm74.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm74.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm74.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm75:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm75.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm75.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm75.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm76:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm76.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm77 in itm76.Objects)
                                                                    {
                                                                        if (itm77 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm77.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm77.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm77.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm77.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm77.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm76.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm76.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm78:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm78.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm79 in itm78.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm79);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm78.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm78.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm80:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm80.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm81 in itm80.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm81);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm80.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm80.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm82:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm82.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm83 in itm82.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm83);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm82.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm82.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm84:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm84.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm85 in itm84.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm85);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm84.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm84.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm68.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm68.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm68.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm68.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm68.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm68.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm68.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm68.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm68.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm68.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm68.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm68.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm86 in itm68.Reflections)
                                {
                                    if (itm86 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm86.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm86.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm86.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm68.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm87 in itm68.LinkedReferences)
                                {
                                    if (itm87 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm87.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm87.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm87.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm68.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm68.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm68.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm88 in itm68.ActivateParents.Parents)
                                    {
                                        if (itm88 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm88.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm88.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm68.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm68.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm68.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm68.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm68.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm68.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm68.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm68.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm68.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm68.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm68.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm68.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm89 in itm68.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm89.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm68.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm68.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm68.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm90 in itm68.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm90);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm68.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm68.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm68.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm68.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm68.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm68.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm68.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm68.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm68.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm68.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm68.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm68.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm68.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBeamGetter itm91:
                            writer.WriteString("$type", "PlacedBeam");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm91.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm91.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm91.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm91.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm91.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm92 in itm91.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm92 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm92.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm92.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm92.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm93 in itm92.Properties)
                                                {
                                                    if (itm93 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm93)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm94:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm94.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm94.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm94.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm94.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm94.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm95:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm95.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm95.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm95.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm96:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm96.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm96.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm96.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm97:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm97.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm97.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm97.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm98:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm98.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm98.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm98.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm99:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm99.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm100 in itm99.Objects)
                                                                    {
                                                                        if (itm100 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm100.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm100.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm100.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm100.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm100.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm99.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm99.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm101:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm101.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm102 in itm101.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm102);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm101.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm101.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm103:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm103.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm104 in itm103.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm104);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm103.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm103.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm105:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm105.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm106 in itm105.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm106);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm105.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm105.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm107:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm107.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm108 in itm107.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm108);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm107.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm107.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm91.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm91.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm91.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm91.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm91.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm91.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm91.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm91.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm91.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm91.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm91.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm91.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm109 in itm91.Reflections)
                                {
                                    if (itm109 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm109.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm109.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm109.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm91.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm110 in itm91.LinkedReferences)
                                {
                                    if (itm110 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm110.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm110.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm110.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm91.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm91.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm91.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm111 in itm91.ActivateParents.Parents)
                                    {
                                        if (itm111 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm111.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm111.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm91.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm91.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm91.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm91.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm91.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm91.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm91.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm91.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm91.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm91.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm91.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm91.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm112 in itm91.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm112.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm91.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm91.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm91.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm113 in itm91.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm113);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm91.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm91.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm91.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm91.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm91.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm91.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm91.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm91.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm91.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm91.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm91.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm91.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm91.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedFlameGetter itm114:
                            writer.WriteString("$type", "PlacedFlame");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm114.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm114.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm114.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm114.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm114.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm115 in itm114.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm115 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm115.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm115.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm115.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm116 in itm115.Properties)
                                                {
                                                    if (itm116 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm116)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm117:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm117.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm117.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm117.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm117.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm117.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm118:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm118.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm118.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm118.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm119:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm119.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm119.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm119.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm120:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm120.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm120.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm120.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm121:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm121.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm121.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm121.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm122:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm122.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm123 in itm122.Objects)
                                                                    {
                                                                        if (itm123 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm123.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm123.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm123.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm123.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm123.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm122.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm122.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm124:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm124.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm125 in itm124.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm125);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm124.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm124.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm126:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm126.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm127 in itm126.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm127);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm126.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm126.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm128:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm128.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm129 in itm128.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm129);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm128.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm128.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm130:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm130.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm131 in itm130.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm131);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm130.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm130.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm114.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm114.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm114.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm114.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm114.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm114.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm114.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm114.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm114.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm114.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm114.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm114.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm132 in itm114.Reflections)
                                {
                                    if (itm132 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm132.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm132.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm132.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm114.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm133 in itm114.LinkedReferences)
                                {
                                    if (itm133 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm133.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm133.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm133.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm114.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm114.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm114.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm134 in itm114.ActivateParents.Parents)
                                    {
                                        if (itm134 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm134.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm134.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm114.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm114.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm114.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm114.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm114.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm114.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm114.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm114.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm114.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm114.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm114.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm114.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm135 in itm114.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm135.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm114.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm114.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm114.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm136 in itm114.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm136);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm114.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm114.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm114.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm114.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm114.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm114.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm114.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm114.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm114.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm114.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm114.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm114.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm114.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedConeGetter itm137:
                            writer.WriteString("$type", "PlacedCone");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm137.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm137.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm137.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm137.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm137.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm138 in itm137.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm138 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm138.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm138.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm138.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm139 in itm138.Properties)
                                                {
                                                    if (itm139 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm139)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm140:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm140.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm140.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm140.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm140.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm140.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm141:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm141.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm141.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm141.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm142:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm142.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm142.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm142.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm143:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm143.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm143.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm143.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm144:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm144.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm144.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm144.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm145:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm145.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm146 in itm145.Objects)
                                                                    {
                                                                        if (itm146 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm146.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm146.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm146.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm146.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm146.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm145.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm145.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm147:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm147.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm148 in itm147.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm148);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm147.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm147.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm149:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm149.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm150 in itm149.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm150);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm149.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm149.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm151:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm151.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm152 in itm151.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm152);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm151.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm151.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm153:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm153.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm154 in itm153.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm154);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm153.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm153.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm137.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm137.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm137.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm137.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm137.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm137.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm137.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm137.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm137.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm137.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm137.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm137.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm155 in itm137.Reflections)
                                {
                                    if (itm155 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm155.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm155.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm155.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm137.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm156 in itm137.LinkedReferences)
                                {
                                    if (itm156 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm156.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm156.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm156.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm137.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm137.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm137.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm157 in itm137.ActivateParents.Parents)
                                    {
                                        if (itm157 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm157.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm157.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm137.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm137.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm137.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm137.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm137.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm137.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm137.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm137.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm137.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm137.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm137.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm137.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm158 in itm137.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm158.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm137.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm137.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm137.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm159 in itm137.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm159);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm137.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm137.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm137.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm137.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm137.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm137.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm137.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm137.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm137.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm137.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm137.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm137.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm137.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBarrierGetter itm160:
                            writer.WriteString("$type", "PlacedBarrier");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm160.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm160.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm160.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm160.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm160.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm161 in itm160.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm161 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm161.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm161.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm161.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm162 in itm161.Properties)
                                                {
                                                    if (itm162 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm162)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm163:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm163.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm163.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm163.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm163.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm163.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm164:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm164.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm164.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm164.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm165:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm165.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm165.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm165.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm166:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm166.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm166.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm166.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm167:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm167.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm167.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm167.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm168:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm168.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm169 in itm168.Objects)
                                                                    {
                                                                        if (itm169 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm169.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm169.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm169.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm169.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm169.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm168.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm168.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm170:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm170.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm171 in itm170.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm171);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm170.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm170.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm172:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm172.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm173 in itm172.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm173);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm172.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm172.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm174:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm174.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm175 in itm174.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm175);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm174.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm174.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm176:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm176.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm177 in itm176.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm177);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm176.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm176.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm160.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm160.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm160.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm160.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm160.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm160.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm160.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm160.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm160.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm160.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm160.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm160.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm178 in itm160.Reflections)
                                {
                                    if (itm178 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm178.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm178.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm178.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm160.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm179 in itm160.LinkedReferences)
                                {
                                    if (itm179 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm179.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm179.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm179.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm160.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm160.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm160.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm180 in itm160.ActivateParents.Parents)
                                    {
                                        if (itm180 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm180.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm180.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm160.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm160.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm160.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm160.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm160.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm160.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm160.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm160.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm160.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm160.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm160.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm160.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm181 in itm160.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm181.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm160.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm160.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm160.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm182 in itm160.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm182);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm160.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm160.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm160.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm160.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm160.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm160.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm160.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm160.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm160.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm160.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm160.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm160.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm160.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedTrapGetter itm183:
                            writer.WriteString("$type", "PlacedTrap");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm183.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm183.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm183.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm183.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm183.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm184 in itm183.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm184 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm184.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm184.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm184.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm185 in itm184.Properties)
                                                {
                                                    if (itm185 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm185)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm186:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm186.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm186.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm186.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm186.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm186.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm187:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm187.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm187.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm187.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm188:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm188.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm188.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm188.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm189:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm189.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm189.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm189.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm190:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm190.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm190.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm190.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm191:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm191.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm192 in itm191.Objects)
                                                                    {
                                                                        if (itm192 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm192.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm192.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm192.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm192.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm192.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm191.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm191.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm193:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm193.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm194 in itm193.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm194);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm193.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm193.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm195:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm195.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm196 in itm195.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm196);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm195.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm195.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm197:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm197.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm198 in itm197.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm198);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm197.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm197.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm199:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm199.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm200 in itm199.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm200);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm199.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm199.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm183.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm183.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm183.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm183.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm183.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm183.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm183.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm183.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm183.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm183.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm183.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm183.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm201 in itm183.Reflections)
                                {
                                    if (itm201 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm201.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm201.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm201.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm183.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm202 in itm183.LinkedReferences)
                                {
                                    if (itm202 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm202.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm202.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm202.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm183.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm183.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm183.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm203 in itm183.ActivateParents.Parents)
                                    {
                                        if (itm203 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm203.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm203.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm183.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm183.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm183.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm183.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm183.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm183.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm183.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm183.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm183.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm183.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm183.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm183.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm204 in itm183.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm204.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm183.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm183.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm183.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm205 in itm183.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm205);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm183.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm183.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm183.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm183.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm183.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm183.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm183.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm183.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm183.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm183.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm183.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm183.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm183.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedHazardGetter itm206:
                            writer.WriteString("$type", "PlacedHazard");
                            
                            // Hazard
                            writer.WritePropertyName("Hazard");
                            writer.WriteStringValue(itm206.Hazard.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm206.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm206.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm206.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm206.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm207 in itm206.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm207 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm207.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm207.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm207.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm208 in itm207.Properties)
                                                {
                                                    if (itm208 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm208)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm209:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm209.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm209.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm209.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm209.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm209.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm210:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm210.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm210.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm210.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm211:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm211.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm211.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm211.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm212:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm212.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm212.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm212.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm213:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm213.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm213.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm213.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm214:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm214.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm215 in itm214.Objects)
                                                                    {
                                                                        if (itm215 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm215.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm215.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm215.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm215.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm215.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm214.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm214.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm216:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm216.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm217 in itm216.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm217);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm216.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm216.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm218:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm218.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm219 in itm218.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm219);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm218.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm218.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm220:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm220.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm221 in itm220.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm221);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm220.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm220.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm222:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm222.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm223 in itm222.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm223);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm222.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm222.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm206.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm206.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm206.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm206.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm206.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm206.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm206.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm206.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm206.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm206.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm206.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm206.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm224 in itm206.Reflections)
                                {
                                    if (itm224 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm224.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm224.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm224.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm206.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm225 in itm206.LinkedReferences)
                                {
                                    if (itm225 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm225.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm225.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm225.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm206.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm206.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm206.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm226 in itm206.ActivateParents.Parents)
                                    {
                                        if (itm226 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm226.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm226.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm206.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm206.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm206.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm206.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm206.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm206.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm206.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm206.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm206.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm206.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm206.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm206.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm227 in itm206.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm227.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm206.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm206.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm206.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm228 in itm206.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm228);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm206.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm206.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm206.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm206.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm206.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm206.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm206.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm206.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm206.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm206.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm206.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm206.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm206.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedMissileGetter itm229:
                            writer.WriteString("$type", "PlacedMissile");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm229.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm229.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm229.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm229.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm229.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm230 in itm229.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm230 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm230.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm230.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm230.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm231 in itm230.Properties)
                                                {
                                                    if (itm231 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm231)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm232:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm232.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm232.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm232.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm232.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm232.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm233:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm233.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm233.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm233.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm234:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm234.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm234.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm234.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm235:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm235.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm235.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm235.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm236:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm236.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm236.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm236.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm237:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm237.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm238 in itm237.Objects)
                                                                    {
                                                                        if (itm238 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm238.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm238.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm238.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm238.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm238.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm237.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm237.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm239:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm239.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm240 in itm239.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm240);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm239.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm239.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm241:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm241.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm242 in itm241.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm242);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm241.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm241.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm243:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm243.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm244 in itm243.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm244);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm243.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm243.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm245:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm245.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm246 in itm245.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm246);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm245.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm245.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm229.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm229.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm229.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm229.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm229.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm229.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm229.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm229.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm229.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm229.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm229.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm229.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm247 in itm229.Reflections)
                                {
                                    if (itm247 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm247.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm247.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm247.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm229.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm248 in itm229.LinkedReferences)
                                {
                                    if (itm248 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm248.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm248.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm248.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm229.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm229.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm229.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm249 in itm229.ActivateParents.Parents)
                                    {
                                        if (itm249 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm249.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm249.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm229.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm229.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm229.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm229.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm229.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm229.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm229.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm229.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm229.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm229.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm229.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm229.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm250 in itm229.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm250.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm229.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm229.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm229.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm251 in itm229.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm251);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm229.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm229.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm229.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm229.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm229.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm229.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm229.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm229.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm229.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm229.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm229.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm229.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm229.EditorID);
                            break;
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // PersistentTimestamp
        writer.WritePropertyName("PersistentTimestamp");
        writer.WriteNumberValue(value.PersistentTimestamp);
        
        // PersistentUnknownGroupData
        writer.WritePropertyName("PersistentUnknownGroupData");
        writer.WriteNumberValue(value.PersistentUnknownGroupData);
        
        // Regions
        writer.WritePropertyName("Regions");
        if (value.Regions != null)
        {
            writer.WriteStartArray();
            foreach(var itm252 in value.Regions)
            {
                writer.WriteStringValue(itm252.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // SkyAndWeatherFromRegion
        writer.WritePropertyName("SkyAndWeatherFromRegion");
        if (value.SkyAndWeatherFromRegion.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.SkyAndWeatherFromRegion.FormKey.ToString());
        
        // Temporary
        writer.WritePropertyName("Temporary");
        if (value.Temporary != null)
        {
            writer.WriteStartArray();
            foreach(var itm253 in value.Temporary)
            {
                if (itm253 != null)
                {
                    writer.WriteStartObject();
                    switch (itm253)
                    {
                        case Mutagen.Bethesda.Skyrim.IPlacedNpcGetter itm254:
                            writer.WriteString("$type", "PlacedNpc");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm254.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm254.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm254.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm254.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm255 in itm254.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm255 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm255.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm255.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm255.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm256 in itm255.Properties)
                                                {
                                                    if (itm256 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm256)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm257:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm257.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm257.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm257.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm257.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm257.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm258:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm258.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm258.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm258.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm259:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm259.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm259.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm259.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm260:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm260.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm260.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm260.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm261:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm261.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm261.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm261.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm262:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm262.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm263 in itm262.Objects)
                                                                    {
                                                                        if (itm263 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm263.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm263.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm263.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm263.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm263.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm262.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm262.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm264:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm264.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm265 in itm264.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm265);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm264.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm264.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm266:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm266.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm267 in itm266.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm267);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm266.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm266.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm268:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm268.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm269 in itm268.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm269);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm268.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm268.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm270:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm270.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm271 in itm270.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm271);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm270.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm270.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm254.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.Base.FormKey.ToString());
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm254.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.EncounterZone.FormKey.ToString());
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm254.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm254.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm254.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm254.RagdollBipedData.Value);
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm254.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm254.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm254.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm254.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm254.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm254.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm254.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm254.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm272 in itm254.Patrol.Topics)
                                    {
                                        if (itm272 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm272)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm273:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm273.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm274:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm274.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm254.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm254.LevelModifier.Value);
                            }
                            
                            // MerchantContainer
                            writer.WritePropertyName("MerchantContainer");
                            if (itm254.MerchantContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.MerchantContainer.FormKey.ToString());
                            
                            // Count
                            writer.WritePropertyName("Count");
                            if (itm254.Count == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm254.Count.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm254.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm254.Radius.Value);
                            }
                            
                            // Health
                            writer.WritePropertyName("Health");
                            if (itm254.Health == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm254.Health.Value);
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm254.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm275 in itm254.LinkedReferences)
                                {
                                    if (itm275 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm275.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm275.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm275.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm254.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm254.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm254.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm276 in itm254.ActivateParents.Parents)
                                    {
                                        if (itm276 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm276.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm276.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferenceColor
                            writer.WritePropertyName("LinkedReferenceColor");
                            if (itm254.LinkedReferenceColor != null)
                            {
                                writer.WriteStartObject();
                                
                                // Start
                                writer.WritePropertyName("Start");
                                writer.WriteStringValue(itm254.LinkedReferenceColor.Start.ToArgb().ToString("x8"));
                                
                                // End
                                writer.WritePropertyName("End");
                                writer.WriteStringValue(itm254.LinkedReferenceColor.End.ToArgb().ToString("x8"));
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm254.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.PersistentLocation.FormKey.ToString());
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm254.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.LocationReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm254.IsIgnoredBySandbox);
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm254.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm277 in itm254.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm277.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm254.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm254.HeadTrackingWeight.Value);
                            }
                            
                            // Horse
                            writer.WritePropertyName("Horse");
                            if (itm254.Horse.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.Horse.FormKey.ToString());
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm254.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm254.FavorCost.Value);
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm254.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm254.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm254.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm254.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm254.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm254.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm254.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm254.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm254.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm254.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm254.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.Emittance.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm254.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm254.MultiboundReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox2
                            writer.WritePropertyName("IsIgnoredBySandbox2");
                            writer.WriteBooleanValue(itm254.IsIgnoredBySandbox2);
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm254.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm254.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm254.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm254.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm254.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm254.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm254.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm254.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm254.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm254.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm254.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm254.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm254.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedObjectGetter itm278:
                            writer.WriteString("$type", "PlacedObject");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm278.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm278.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm278.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm278.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm279 in itm278.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm279 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm279.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm279.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm279.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm280 in itm279.Properties)
                                                {
                                                    if (itm280 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm280)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm281:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm281.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm281.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm281.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm281.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm281.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm282:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm282.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm282.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm282.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm283:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm283.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm283.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm283.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm284:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm284.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm284.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm284.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm285:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm285.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm285.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm285.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm286:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm286.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm287 in itm286.Objects)
                                                                    {
                                                                        if (itm287 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm287.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm287.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm287.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm287.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm287.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm286.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm286.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm288:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm288.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm289 in itm288.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm289);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm288.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm288.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm290:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm290.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm291 in itm290.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm291);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm290.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm290.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm292:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm292.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm293 in itm292.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm293);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm292.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm292.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm294:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm294.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm295 in itm294.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm295);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm294.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm294.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm278.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.Base.FormKey.ToString());
                            
                            // BoundHalfExtents
                            writer.WritePropertyName("BoundHalfExtents");
                            if (itm278.BoundHalfExtents == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteP3Float(itm278.BoundHalfExtents, options);
                            }
                            
                            // Primitive
                            writer.WritePropertyName("Primitive");
                            if (itm278.Primitive != null)
                            {
                                writer.WriteStartObject();
                                
                                // Bounds
                                writer.WritePropertyName("Bounds");
                                writer.WriteP3Float(itm278.Primitive.Bounds, options);
                                
                                // Color
                                writer.WritePropertyName("Color");
                                writer.WriteStringValue(itm278.Primitive.Color.ToArgb().ToString("x8"));
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm278.Primitive.Unknown);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm278.Primitive.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XORD
                            writer.WritePropertyName("XORD");
                            if (itm278.XORD == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.XORD.Value);
                            }
                            
                            // OcclusionPlane
                            writer.WritePropertyName("OcclusionPlane");
                            if (itm278.OcclusionPlane != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm278.OcclusionPlane.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm278.OcclusionPlane.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm278.OcclusionPlane.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm278.OcclusionPlane.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm278.OcclusionPlane.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm278.OcclusionPlane.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm278.OcclusionPlane.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Portals
                            writer.WritePropertyName("Portals");
                            if (itm278.Portals != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm296 in itm278.Portals)
                                {
                                    if (itm296 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Origin
                                        writer.WritePropertyName("Origin");
                                        writer.WriteStringValue(itm296.Origin.FormKey.ToString());
                                        
                                        // Destination
                                        writer.WritePropertyName("Destination");
                                        writer.WriteStringValue(itm296.Destination.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // RoomPortal
                            writer.WritePropertyName("RoomPortal");
                            if (itm278.RoomPortal != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm278.RoomPortal.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm278.RoomPortal.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm278.RoomPortal.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm278.RoomPortal.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm278.RoomPortal.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm278.RoomPortal.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm278.RoomPortal.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Unknown
                            writer.WritePropertyName("Unknown");
                            writer.WriteNumberValue(itm278.Unknown);
                            
                            // LightingTemplate
                            writer.WritePropertyName("LightingTemplate");
                            if (itm278.LightingTemplate.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.LightingTemplate.FormKey.ToString());
                            
                            // ImageSpace
                            writer.WritePropertyName("ImageSpace");
                            if (itm278.ImageSpace.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.ImageSpace.FormKey.ToString());
                            
                            // LinkedRooms
                            writer.WritePropertyName("LinkedRooms");
                            if (itm278.LinkedRooms != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm297 in itm278.LinkedRooms)
                                {
                                    writer.WriteStringValue(itm297.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsMultiBoundPrimitive
                            writer.WritePropertyName("IsMultiBoundPrimitive");
                            writer.WriteBooleanValue(itm278.IsMultiBoundPrimitive);
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm278.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm278.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.RagdollBipedData.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm278.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm278.Radius.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm278.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm298 in itm278.Reflections)
                                {
                                    if (itm298 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm298.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm298.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm298.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LitWater
                            writer.WritePropertyName("LitWater");
                            if (itm278.LitWater != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm299 in itm278.LitWater)
                                {
                                    writer.WriteStringValue(itm299.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm278.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.Emittance.FormKey.ToString());
                            
                            // LightData
                            writer.WritePropertyName("LightData");
                            if (itm278.LightData != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm278.LightData.Versioning);
                                
                                // FovOffset
                                writer.WritePropertyName("FovOffset");
                                writer.WriteNumberValue(itm278.LightData.FovOffset);
                                
                                // FadeOffset
                                writer.WritePropertyName("FadeOffset");
                                writer.WriteNumberValue(itm278.LightData.FadeOffset);
                                
                                // EndDistanceCap
                                writer.WritePropertyName("EndDistanceCap");
                                writer.WriteNumberValue(itm278.LightData.EndDistanceCap);
                                
                                // ShadowDepthBias
                                writer.WritePropertyName("ShadowDepthBias");
                                writer.WriteNumberValue(itm278.LightData.ShadowDepthBias);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm278.LightData.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Alpha
                            writer.WritePropertyName("Alpha");
                            if (itm278.Alpha != null)
                            {
                                writer.WriteStartObject();
                                
                                // Cutoff
                                writer.WritePropertyName("Cutoff");
                                writer.WriteNumberValue(itm278.Alpha.Cutoff);
                                
                                // Base
                                writer.WritePropertyName("Base");
                                writer.WriteNumberValue(itm278.Alpha.Base);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportDestination
                            writer.WritePropertyName("TeleportDestination");
                            if (itm278.TeleportDestination != null)
                            {
                                writer.WriteStartObject();
                                
                                // Door
                                writer.WritePropertyName("Door");
                                writer.WriteStringValue(itm278.TeleportDestination.Door.FormKey.ToString());
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm278.TeleportDestination.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm278.TeleportDestination.Rotation, options);
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm278.TeleportDestination.Flags);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportMessageBox
                            writer.WritePropertyName("TeleportMessageBox");
                            if (itm278.TeleportMessageBox.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.TeleportMessageBox.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm278.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.MultiboundReference.FormKey.ToString());
                            
                            // XWCN
                            writer.WritePropertyName("XWCN");
                            if (itm278.XWCN == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.XWCN.Value);
                            }
                            
                            // XWCS
                            writer.WritePropertyName("XWCS");
                            if (itm278.XWCS == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.XWCS.Value);
                            }
                            
                            // WaterVelocity
                            writer.WritePropertyName("WaterVelocity");
                            if (itm278.WaterVelocity != null)
                            {
                                writer.WriteStartObject();
                                
                                // Offset
                                writer.WritePropertyName("Offset");
                                writer.WriteP3Float(itm278.WaterVelocity.Offset, options);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm278.WaterVelocity.Unknown);
                                
                                // Angle
                                writer.WritePropertyName("Angle");
                                writer.WriteP3Float(itm278.WaterVelocity.Angle, options);
                                
                                // Unknown2
                                writer.WritePropertyName("Unknown2");
                                writer.WriteBase64StringValue(itm278.WaterVelocity.Unknown2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XCVL
                            writer.WritePropertyName("XCVL");
                            if (itm278.XCVL == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.XCVL.Value);
                            }
                            
                            // XCZR
                            writer.WritePropertyName("XCZR");
                            if (itm278.XCZR.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.XCZR.FormKey.ToString());
                            
                            // XCZA
                            writer.WritePropertyName("XCZA");
                            if (itm278.XCZA == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.XCZA.Value);
                            }
                            
                            // XCZC
                            writer.WritePropertyName("XCZC");
                            if (itm278.XCZC.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.XCZC.FormKey.ToString());
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm278.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm278.Scale.Value);
                            }
                            
                            // SpawnContainer
                            writer.WritePropertyName("SpawnContainer");
                            if (itm278.SpawnContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.SpawnContainer.FormKey.ToString());
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm278.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm278.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm278.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm300 in itm278.ActivateParents.Parents)
                                    {
                                        if (itm300 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm300.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm300.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LeveledItemBaseObject
                            writer.WritePropertyName("LeveledItemBaseObject");
                            if (itm278.LeveledItemBaseObject.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.LeveledItemBaseObject.FormKey.ToString());
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm278.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm278.LevelModifier.Value);
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm278.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.PersistentLocation.FormKey.ToString());
                            
                            // CollisionLayer
                            writer.WritePropertyName("CollisionLayer");
                            if (itm278.CollisionLayer == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm278.CollisionLayer.Value);
                            }
                            
                            // Lock
                            writer.WritePropertyName("Lock");
                            if (itm278.Lock != null)
                            {
                                writer.WriteStartObject();
                                
                                // Level
                                writer.WritePropertyName("Level");
                                writer.WriteEnum(itm278.Lock.Level);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteBase64StringValue(itm278.Lock.Unused);
                                
                                // Key
                                writer.WritePropertyName("Key");
                                writer.WriteStringValue(itm278.Lock.Key.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm278.Lock.Flags);
                                
                                // Unused2
                                writer.WritePropertyName("Unused2");
                                writer.WriteBase64StringValue(itm278.Lock.Unused2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm278.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.EncounterZone.FormKey.ToString());
                            
                            // NavigationDoorLink
                            writer.WritePropertyName("NavigationDoorLink");
                            if (itm278.NavigationDoorLink != null)
                            {
                                writer.WriteStartObject();
                                
                                // NavMesh
                                writer.WritePropertyName("NavMesh");
                                writer.WriteStringValue(itm278.NavigationDoorLink.NavMesh.FormKey.ToString());
                                
                                // TeleportMarkerTriangle
                                writer.WritePropertyName("TeleportMarkerTriangle");
                                writer.WriteNumberValue(itm278.NavigationDoorLink.TeleportMarkerTriangle);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteNumberValue(itm278.NavigationDoorLink.Unused);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm278.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm301 in itm278.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm301.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm278.IsIgnoredBySandbox);
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm278.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm278.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm278.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm278.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm278.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ItemCount
                            writer.WritePropertyName("ItemCount");
                            if (itm278.ItemCount == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm278.ItemCount.Value);
                            }
                            
                            // Charge
                            writer.WritePropertyName("Charge");
                            if (itm278.Charge == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm278.Charge.Value);
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm278.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.LocationReference.FormKey.ToString());
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm278.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm278.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm278.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm278.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm278.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm278.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm302 in itm278.LinkedReferences)
                                {
                                    if (itm302 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm302.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm302.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm302.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm278.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm278.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm278.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm278.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm278.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm278.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm278.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm278.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm303 in itm278.Patrol.Topics)
                                    {
                                        if (itm303 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm303)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm304:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm304.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm305:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm305.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Action
                            writer.WritePropertyName("Action");
                            if (itm278.Action == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm278.Action.Value);
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm278.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm278.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm278.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm278.FavorCost.Value);
                            }
                            
                            // IsOpenByDefault
                            writer.WritePropertyName("IsOpenByDefault");
                            writer.WriteBooleanValue(itm278.IsOpenByDefault);
                            
                            // MapMarker
                            writer.WritePropertyName("MapMarker");
                            if (itm278.MapMarker != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm278.MapMarker.Flags);
                                
                                // Name
                                writer.WritePropertyName("Name");
                                writer.WriteTranslatedString(itm278.MapMarker.Name, options);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm278.MapMarker.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // AttachRef
                            writer.WritePropertyName("AttachRef");
                            if (itm278.AttachRef.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm278.AttachRef.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm278.DistantLodData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm278.DistantLodData.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm278.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm278.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm278.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm278.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm278.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm278.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm278.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm278.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm278.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm278.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedArrowGetter itm306:
                            writer.WriteString("$type", "PlacedArrow");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm306.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm306.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm306.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm306.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm306.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm307 in itm306.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm307 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm307.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm307.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm307.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm308 in itm307.Properties)
                                                {
                                                    if (itm308 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm308)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm309:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm309.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm309.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm309.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm309.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm309.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm310:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm310.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm310.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm310.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm311:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm311.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm311.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm311.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm312:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm312.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm312.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm312.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm313:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm313.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm313.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm313.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm314:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm314.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm315 in itm314.Objects)
                                                                    {
                                                                        if (itm315 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm315.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm315.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm315.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm315.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm315.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm314.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm314.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm316:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm316.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm317 in itm316.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm317);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm316.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm316.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm318:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm318.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm319 in itm318.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm319);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm318.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm318.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm320:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm320.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm321 in itm320.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm321);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm320.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm320.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm322:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm322.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm323 in itm322.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm323);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm322.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm322.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm306.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm306.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm306.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm306.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm306.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm306.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm306.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm306.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm306.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm306.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm306.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm306.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm324 in itm306.Reflections)
                                {
                                    if (itm324 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm324.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm324.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm324.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm306.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm325 in itm306.LinkedReferences)
                                {
                                    if (itm325 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm325.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm325.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm325.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm306.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm306.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm306.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm326 in itm306.ActivateParents.Parents)
                                    {
                                        if (itm326 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm326.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm326.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm306.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm306.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm306.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm306.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm306.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm306.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm306.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm306.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm306.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm306.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm306.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm306.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm327 in itm306.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm327.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm306.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm306.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm306.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm328 in itm306.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm328);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm306.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm306.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm306.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm306.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm306.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm306.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm306.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm306.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm306.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm306.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm306.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm306.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm306.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBeamGetter itm329:
                            writer.WriteString("$type", "PlacedBeam");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm329.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm329.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm329.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm329.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm329.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm330 in itm329.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm330 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm330.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm330.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm330.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm331 in itm330.Properties)
                                                {
                                                    if (itm331 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm331)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm332:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm332.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm332.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm332.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm332.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm332.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm333:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm333.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm333.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm333.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm334:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm334.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm334.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm334.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm335:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm335.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm335.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm335.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm336:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm336.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm336.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm336.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm337:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm337.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm338 in itm337.Objects)
                                                                    {
                                                                        if (itm338 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm338.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm338.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm338.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm338.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm338.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm337.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm337.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm339:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm339.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm340 in itm339.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm340);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm339.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm339.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm341:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm341.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm342 in itm341.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm342);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm341.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm341.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm343:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm343.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm344 in itm343.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm344);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm343.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm343.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm345:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm345.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm346 in itm345.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm346);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm345.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm345.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm329.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm329.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm329.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm329.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm329.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm329.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm329.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm329.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm329.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm329.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm329.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm329.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm347 in itm329.Reflections)
                                {
                                    if (itm347 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm347.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm347.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm347.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm329.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm348 in itm329.LinkedReferences)
                                {
                                    if (itm348 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm348.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm348.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm348.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm329.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm329.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm329.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm349 in itm329.ActivateParents.Parents)
                                    {
                                        if (itm349 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm349.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm349.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm329.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm329.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm329.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm329.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm329.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm329.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm329.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm329.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm329.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm329.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm329.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm329.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm350 in itm329.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm350.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm329.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm329.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm329.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm351 in itm329.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm351);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm329.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm329.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm329.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm329.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm329.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm329.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm329.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm329.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm329.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm329.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm329.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm329.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm329.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedFlameGetter itm352:
                            writer.WriteString("$type", "PlacedFlame");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm352.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm352.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm352.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm352.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm352.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm353 in itm352.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm353 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm353.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm353.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm353.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm354 in itm353.Properties)
                                                {
                                                    if (itm354 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm354)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm355:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm355.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm355.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm355.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm355.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm355.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm356:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm356.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm356.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm356.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm357:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm357.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm357.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm357.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm358:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm358.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm358.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm358.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm359:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm359.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm359.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm359.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm360:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm360.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm361 in itm360.Objects)
                                                                    {
                                                                        if (itm361 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm361.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm361.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm361.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm361.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm361.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm360.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm360.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm362:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm362.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm363 in itm362.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm363);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm362.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm362.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm364:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm364.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm365 in itm364.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm365);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm364.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm364.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm366:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm366.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm367 in itm366.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm367);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm366.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm366.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm368:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm368.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm369 in itm368.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm369);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm368.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm368.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm352.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm352.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm352.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm352.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm352.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm352.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm352.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm352.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm352.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm352.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm352.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm352.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm370 in itm352.Reflections)
                                {
                                    if (itm370 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm370.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm370.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm370.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm352.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm371 in itm352.LinkedReferences)
                                {
                                    if (itm371 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm371.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm371.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm371.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm352.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm352.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm352.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm372 in itm352.ActivateParents.Parents)
                                    {
                                        if (itm372 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm372.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm372.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm352.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm352.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm352.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm352.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm352.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm352.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm352.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm352.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm352.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm352.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm352.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm352.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm373 in itm352.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm373.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm352.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm352.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm352.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm374 in itm352.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm374);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm352.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm352.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm352.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm352.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm352.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm352.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm352.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm352.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm352.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm352.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm352.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm352.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm352.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedConeGetter itm375:
                            writer.WriteString("$type", "PlacedCone");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm375.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm375.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm375.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm375.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm375.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm376 in itm375.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm376 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm376.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm376.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm376.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm377 in itm376.Properties)
                                                {
                                                    if (itm377 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm377)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm378:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm378.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm378.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm378.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm378.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm378.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm379:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm379.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm379.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm379.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm380:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm380.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm380.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm380.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm381:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm381.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm381.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm381.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm382:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm382.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm382.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm382.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm383:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm383.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm384 in itm383.Objects)
                                                                    {
                                                                        if (itm384 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm384.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm384.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm384.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm384.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm384.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm383.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm383.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm385:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm385.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm386 in itm385.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm386);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm385.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm385.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm387:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm387.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm388 in itm387.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm388);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm387.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm387.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm389:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm389.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm390 in itm389.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm390);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm389.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm389.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm391:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm391.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm392 in itm391.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm392);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm391.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm391.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm375.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm375.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm375.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm375.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm375.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm375.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm375.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm375.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm375.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm375.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm375.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm375.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm393 in itm375.Reflections)
                                {
                                    if (itm393 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm393.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm393.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm393.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm375.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm394 in itm375.LinkedReferences)
                                {
                                    if (itm394 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm394.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm394.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm394.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm375.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm375.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm375.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm395 in itm375.ActivateParents.Parents)
                                    {
                                        if (itm395 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm395.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm395.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm375.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm375.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm375.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm375.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm375.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm375.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm375.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm375.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm375.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm375.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm375.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm375.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm396 in itm375.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm396.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm375.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm375.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm375.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm397 in itm375.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm397);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm375.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm375.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm375.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm375.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm375.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm375.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm375.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm375.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm375.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm375.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm375.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm375.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm375.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBarrierGetter itm398:
                            writer.WriteString("$type", "PlacedBarrier");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm398.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm398.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm398.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm398.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm398.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm399 in itm398.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm399 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm399.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm399.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm399.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm400 in itm399.Properties)
                                                {
                                                    if (itm400 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm400)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm401:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm401.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm401.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm401.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm401.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm401.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm402:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm402.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm402.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm402.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm403:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm403.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm403.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm403.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm404:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm404.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm404.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm404.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm405:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm405.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm405.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm405.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm406:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm406.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm407 in itm406.Objects)
                                                                    {
                                                                        if (itm407 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm407.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm407.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm407.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm407.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm407.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm406.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm406.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm408:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm408.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm409 in itm408.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm409);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm408.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm408.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm410:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm410.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm411 in itm410.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm411);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm410.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm410.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm412:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm412.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm413 in itm412.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm413);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm412.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm412.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm414:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm414.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm415 in itm414.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm415);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm414.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm414.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm398.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm398.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm398.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm398.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm398.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm398.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm398.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm398.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm398.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm398.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm398.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm398.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm416 in itm398.Reflections)
                                {
                                    if (itm416 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm416.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm416.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm416.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm398.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm417 in itm398.LinkedReferences)
                                {
                                    if (itm417 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm417.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm417.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm417.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm398.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm398.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm398.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm418 in itm398.ActivateParents.Parents)
                                    {
                                        if (itm418 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm418.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm418.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm398.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm398.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm398.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm398.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm398.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm398.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm398.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm398.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm398.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm398.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm398.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm398.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm419 in itm398.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm419.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm398.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm398.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm398.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm420 in itm398.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm420);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm398.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm398.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm398.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm398.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm398.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm398.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm398.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm398.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm398.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm398.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm398.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm398.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm398.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedTrapGetter itm421:
                            writer.WriteString("$type", "PlacedTrap");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm421.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm421.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm421.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm421.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm421.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm422 in itm421.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm422 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm422.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm422.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm422.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm423 in itm422.Properties)
                                                {
                                                    if (itm423 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm423)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm424:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm424.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm424.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm424.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm424.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm424.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm425:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm425.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm425.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm425.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm426:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm426.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm426.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm426.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm427:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm427.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm427.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm427.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm428:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm428.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm428.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm428.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm429:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm429.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm430 in itm429.Objects)
                                                                    {
                                                                        if (itm430 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm430.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm430.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm430.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm430.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm430.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm429.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm429.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm431:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm431.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm432 in itm431.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm432);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm431.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm431.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm433:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm433.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm434 in itm433.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm434);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm433.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm433.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm435:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm435.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm436 in itm435.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm436);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm435.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm435.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm437:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm437.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm438 in itm437.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm438);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm437.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm437.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm421.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm421.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm421.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm421.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm421.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm421.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm421.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm421.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm421.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm421.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm421.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm421.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm439 in itm421.Reflections)
                                {
                                    if (itm439 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm439.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm439.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm439.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm421.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm440 in itm421.LinkedReferences)
                                {
                                    if (itm440 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm440.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm440.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm440.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm421.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm421.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm421.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm441 in itm421.ActivateParents.Parents)
                                    {
                                        if (itm441 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm441.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm441.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm421.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm421.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm421.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm421.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm421.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm421.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm421.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm421.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm421.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm421.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm421.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm421.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm442 in itm421.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm442.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm421.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm421.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm421.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm443 in itm421.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm443);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm421.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm421.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm421.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm421.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm421.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm421.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm421.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm421.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm421.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm421.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm421.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm421.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm421.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedHazardGetter itm444:
                            writer.WriteString("$type", "PlacedHazard");
                            
                            // Hazard
                            writer.WritePropertyName("Hazard");
                            writer.WriteStringValue(itm444.Hazard.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm444.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm444.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm444.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm444.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm445 in itm444.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm445 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm445.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm445.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm445.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm446 in itm445.Properties)
                                                {
                                                    if (itm446 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm446)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm447:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm447.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm447.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm447.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm447.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm447.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm448:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm448.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm448.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm448.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm449:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm449.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm449.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm449.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm450:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm450.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm450.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm450.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm451:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm451.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm451.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm451.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm452:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm452.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm453 in itm452.Objects)
                                                                    {
                                                                        if (itm453 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm453.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm453.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm453.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm453.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm453.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm452.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm452.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm454:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm454.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm455 in itm454.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm455);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm454.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm454.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm456:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm456.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm457 in itm456.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm457);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm456.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm456.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm458:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm458.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm459 in itm458.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm459);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm458.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm458.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm460:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm460.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm461 in itm460.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm461);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm460.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm460.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm444.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm444.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm444.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm444.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm444.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm444.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm444.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm444.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm444.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm444.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm444.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm444.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm462 in itm444.Reflections)
                                {
                                    if (itm462 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm462.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm462.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm462.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm444.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm463 in itm444.LinkedReferences)
                                {
                                    if (itm463 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm463.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm463.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm463.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm444.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm444.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm444.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm464 in itm444.ActivateParents.Parents)
                                    {
                                        if (itm464 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm464.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm464.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm444.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm444.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm444.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm444.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm444.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm444.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm444.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm444.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm444.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm444.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm444.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm444.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm465 in itm444.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm465.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm444.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm444.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm444.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm466 in itm444.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm466);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm444.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm444.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm444.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm444.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm444.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm444.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm444.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm444.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm444.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm444.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm444.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm444.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm444.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedMissileGetter itm467:
                            writer.WriteString("$type", "PlacedMissile");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm467.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm467.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm467.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm467.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm467.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm468 in itm467.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm468 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm468.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm468.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm468.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm469 in itm468.Properties)
                                                {
                                                    if (itm469 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm469)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm470:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm470.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm470.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm470.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm470.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm470.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm471:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm471.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm471.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm471.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm472:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm472.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm472.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm472.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm473:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm473.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm473.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm473.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm474:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm474.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm474.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm474.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm475:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm475.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm476 in itm475.Objects)
                                                                    {
                                                                        if (itm476 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm476.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm476.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm476.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm476.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm476.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm475.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm475.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm477:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm477.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm478 in itm477.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm478);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm477.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm477.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm479:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm479.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm480 in itm479.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm480);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm479.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm479.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm481:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm481.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm482 in itm481.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm482);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm481.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm481.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm483:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm483.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm484 in itm483.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm484);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm483.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm483.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm467.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm467.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm467.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm467.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm467.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm467.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm467.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm467.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm467.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm467.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm467.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm467.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm485 in itm467.Reflections)
                                {
                                    if (itm485 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm485.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm485.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm485.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm467.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm486 in itm467.LinkedReferences)
                                {
                                    if (itm486 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm486.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm486.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm486.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm467.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm467.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm467.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm487 in itm467.ActivateParents.Parents)
                                    {
                                        if (itm487 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm487.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm487.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm467.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm467.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm467.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm467.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm467.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm467.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm467.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm467.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm467.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm467.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm467.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm467.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm488 in itm467.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm488.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm467.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm467.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm467.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm489 in itm467.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm489);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm467.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm467.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm467.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm467.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm467.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm467.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm467.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm467.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm467.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm467.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm467.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm467.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm467.EditorID);
                            break;
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // TemporaryTimestamp
        writer.WritePropertyName("TemporaryTimestamp");
        writer.WriteNumberValue(value.TemporaryTimestamp);
        
        // TemporaryUnknownGroupData
        writer.WritePropertyName("TemporaryUnknownGroupData");
        writer.WriteNumberValue(value.TemporaryUnknownGroupData);
        
        // Timestamp
        writer.WritePropertyName("Timestamp");
        writer.WriteNumberValue(value.Timestamp);
        
        // UnknownGroupData
        writer.WritePropertyName("UnknownGroupData");
        writer.WriteNumberValue(value.UnknownGroupData);
        
        // Version2
        writer.WritePropertyName("Version2");
        writer.WriteNumberValue((uint)value.Version2);
        
        // VersionControl
        writer.WritePropertyName("VersionControl");
        writer.WriteNumberValue(value.VersionControl);
        
        // Water
        writer.WritePropertyName("Water");
        if (value.Water.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Water.FormKey.ToString());
        
        // WaterEnvironmentMap
        writer.WritePropertyName("WaterEnvironmentMap");
        writer.WriteStringValue(value.WaterEnvironmentMap);
        
        // WaterHeight
        writer.WritePropertyName("WaterHeight");
        if (value.WaterHeight == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteNumberValue(value.WaterHeight.Value);
        }
        
        // WaterNoiseTexture
        writer.WritePropertyName("WaterNoiseTexture");
        writer.WriteStringValue(value.WaterNoiseTexture);
        
        // WaterVelocity
        writer.WritePropertyName("WaterVelocity");
        if (value.WaterVelocity != null)
        {
            writer.WriteStartObject();
            
            // Offset
            writer.WritePropertyName("Offset");
            writer.WriteP3Float(value.WaterVelocity.Offset, options);
            
            // Unknown
            writer.WritePropertyName("Unknown");
            writer.WriteNumberValue(value.WaterVelocity.Unknown);
            
            // Angle
            writer.WritePropertyName("Angle");
            writer.WriteP3Float(value.WaterVelocity.Angle, options);
            
            // Unknown2
            writer.WritePropertyName("Unknown2");
            writer.WriteBase64StringValue(value.WaterVelocity.Unknown2);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // XWCN
        writer.WritePropertyName("XWCN");
        if (value.XWCN == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.XWCN.Value);
        }
        
        // XWCS
        writer.WritePropertyName("XWCS");
        if (value.XWCS == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.XWCS.Value);
        }
        writer.WriteEndObject();
    }
}
public class Cell_Converter : JsonConverter<Mutagen.Bethesda.Skyrim.Cell>
{
    private ICellGetter_Converter _getterConverter;
    public Cell_Converter()
    {
        _getterConverter = new ICellGetter_Converter();
    }
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Cell));
    }
    public override void Write(Utf8JsonWriter writer, Mutagen.Bethesda.Skyrim.Cell value, JsonSerializerOptions options)
    {
        _getterConverter.Write(writer, (ICellGetter)value, options);
    }
    public override Mutagen.Bethesda.Skyrim.Cell Read(
        ref Utf8JsonReader reader,
        Type typeToConvert,
        JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
        reader.Read();
        Mutagen.Bethesda.Skyrim.Cell retval = new Mutagen.Bethesda.Skyrim.Cell(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                reader.Read();
                break;
            }
            var prop = reader.GetString();
            reader.Read();
            switch (prop)
            {
                case "AcousticSpace":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.AcousticSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "EditorID":
                    retval.EditorID = reader.GetString();
                    break;
                case "EncounterZone":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Flags":
                    retval.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Cell.Flag>(ref reader, options);
                    break;
                case "FormVersion":
                    retval.FormVersion = reader.GetUInt16();
                    break;
                case "Grid":
                    retval.Grid = new Mutagen.Bethesda.Skyrim.CellGrid();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop490 = reader.GetString();
                            reader.Read();
                            switch(prop490)
                            {
                                case "Point":
                                    retval.Grid.Point = SerializerExtensions.ReadP2Int(ref reader, options);
                                    break;
                                case "Flags":
                                    retval.Grid.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellGrid.Flag>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "ImageSpace":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "IsCompressed":
                    retval.IsCompressed = reader.GetBoolean();
                    break;
                case "IsDeleted":
                    retval.IsDeleted = reader.GetBoolean();
                    break;
                case "Landscape":
                    retval.Landscape = new Mutagen.Bethesda.Skyrim.Landscape(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop491 = reader.GetString();
                            reader.Read();
                            switch(prop491)
                            {
                                case "Flags":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Landscape.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Landscape.Flag>(ref reader, options);
                                    }
                                    break;
                                case "VertexNormals":
                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                    {
                                        Noggog.P3UInt8 itm492 = default;
                                        itm492 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                        return itm492;
                                    }
                                    );
                                    break;
                                case "VertexHeightMap":
                                    retval.Landscape.VertexHeightMap = new Mutagen.Bethesda.Skyrim.LandscapeVertexHeightMap();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop493 = reader.GetString();
                                            reader.Read();
                                            switch(prop493)
                                            {
                                                case "Offset":
                                                    retval.Landscape.VertexHeightMap.Offset = reader.GetSingle();
                                                    break;
                                                case "HeightMap":
                                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                                    {
                                                        Byte itm494 = default;
                                                        itm494 = reader.GetByte();
                                                        return itm494;
                                                    }
                                                    );
                                                    break;
                                                case "Unknown":
                                                    retval.Landscape.VertexHeightMap.Unknown = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "VertexColors":
                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                    {
                                        Noggog.P3UInt8 itm495 = default;
                                        itm495 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                        return itm495;
                                    }
                                    );
                                    break;
                                case "Layers":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.BaseLayer itm496 = new Mutagen.Bethesda.Skyrim.BaseLayer();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop497 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop497)
                                                    {
                                                        case "Header":
                                                            itm496.Header = new Mutagen.Bethesda.Skyrim.LayerHeader();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop498 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop498)
                                                                    {
                                                                        case "Texture":
                                                                            itm496.Header.Texture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Quadrant":
                                                                            itm496.Header.Quadrant = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Plugins.Records.Quadrant>(ref reader, options);
                                                                            break;
                                                                        case "Unused":
                                                                            itm496.Header.Unused = reader.GetByte();
                                                                            break;
                                                                        case "LayerNumber":
                                                                            itm496.Header.LayerNumber = reader.GetUInt16();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            retval.Landscape.Layers.Add(itm496);
                                        }
                                    }
                                    break;
                                case "Textures":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Landscape.Textures ??= new();
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            retval.Landscape.Textures.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                        }
                                    }
                                    break;
                                case "SkyrimMajorRecordFlags":
                                    retval.Landscape.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                    break;
                                case "FormVersion":
                                    retval.Landscape.FormVersion = reader.GetUInt16();
                                    break;
                                case "Version2":
                                    retval.Landscape.Version2 = reader.GetUInt16();
                                    break;
                                case "EditorID":
                                    retval.Landscape.EditorID = reader.GetString();
                                    break;
                                case "TitleString":
                                    retval.Landscape.TitleString = reader.GetString();
                                    break;
                                case "IsCompressed":
                                    retval.Landscape.IsCompressed = reader.GetBoolean();
                                    break;
                                case "IsDeleted":
                                    retval.Landscape.IsDeleted = reader.GetBoolean();
                                    break;
                                case "MajorRecordFlagsRaw":
                                    retval.Landscape.MajorRecordFlagsRaw = reader.GetInt32();
                                    break;
                                case "FormKey":
                                    retval.Landscape.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                    break;
                                case "VersionControl":
                                    retval.Landscape.VersionControl = reader.GetUInt32();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Lighting":
                    retval.Lighting = new Mutagen.Bethesda.Skyrim.CellLighting();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop499 = reader.GetString();
                            reader.Read();
                            switch(prop499)
                            {
                                case "Versioning":
                                    retval.Lighting.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellLighting.VersioningBreaks>(ref reader, options);
                                    break;
                                case "AmbientColor":
                                    retval.Lighting.AmbientColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "DirectionalColor":
                                    retval.Lighting.DirectionalColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogNearColor":
                                    retval.Lighting.FogNearColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogNear":
                                    retval.Lighting.FogNear = reader.GetSingle();
                                    break;
                                case "FogFar":
                                    retval.Lighting.FogFar = reader.GetSingle();
                                    break;
                                case "DirectionalRotationXY":
                                    retval.Lighting.DirectionalRotationXY = reader.GetInt32();
                                    break;
                                case "DirectionalRotationZ":
                                    retval.Lighting.DirectionalRotationZ = reader.GetInt32();
                                    break;
                                case "DirectionalFade":
                                    retval.Lighting.DirectionalFade = reader.GetSingle();
                                    break;
                                case "FogClipDistance":
                                    retval.Lighting.FogClipDistance = reader.GetSingle();
                                    break;
                                case "FogPower":
                                    retval.Lighting.FogPower = reader.GetSingle();
                                    break;
                                case "AmbientColors":
                                    retval.Lighting.AmbientColors = new Mutagen.Bethesda.Skyrim.AmbientColors();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop500 = reader.GetString();
                                            reader.Read();
                                            switch(prop500)
                                            {
                                                case "Versioning":
                                                    retval.Lighting.AmbientColors.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.AmbientColors.VersioningBreaks>(ref reader, options);
                                                    break;
                                                case "DirectionalXPlus":
                                                    retval.Lighting.AmbientColors.DirectionalXPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalXMinus":
                                                    retval.Lighting.AmbientColors.DirectionalXMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalYPlus":
                                                    retval.Lighting.AmbientColors.DirectionalYPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalYMinus":
                                                    retval.Lighting.AmbientColors.DirectionalYMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalZPlus":
                                                    retval.Lighting.AmbientColors.DirectionalZPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalZMinus":
                                                    retval.Lighting.AmbientColors.DirectionalZMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "Specular":
                                                    retval.Lighting.AmbientColors.Specular = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "Scale":
                                                    retval.Lighting.AmbientColors.Scale = reader.GetSingle();
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "FogFarColor":
                                    retval.Lighting.FogFarColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogMax":
                                    retval.Lighting.FogMax = reader.GetSingle();
                                    break;
                                case "LightFadeBegin":
                                    retval.Lighting.LightFadeBegin = reader.GetSingle();
                                    break;
                                case "LightFadeEnd":
                                    retval.Lighting.LightFadeEnd = reader.GetSingle();
                                    break;
                                case "Inherits":
                                    retval.Lighting.Inherits = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellLighting.Inherit>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "LightingTemplate":
                    retval.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LNAM":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.LNAM = reader.GetBytesFromBase64();
                    }
                    break;
                case "Location":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Location.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LockList":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.LockList.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "MajorFlags":
                    retval.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Cell.MajorFlag>(ref reader, options);
                    break;
                case "MajorRecordFlagsRaw":
                    retval.MajorRecordFlagsRaw = reader.GetInt32();
                    break;
                case "MaxHeightData":
                    retval.MaxHeightData = new Mutagen.Bethesda.Skyrim.CellMaxHeightData();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop501 = reader.GetString();
                            reader.Read();
                            switch(prop501)
                            {
                                case "Offset":
                                    retval.MaxHeightData.Offset = reader.GetSingle();
                                    break;
                                case "HeightMap":
                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                    {
                                        Byte itm502 = default;
                                        itm502 = reader.GetByte();
                                        return itm502;
                                    }
                                    );
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Music":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Music.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Name":
                    retval.Name ??= new TranslatedString(Language.English);
                    SerializerExtensions.ReadTranslatedString(ref reader, retval.Name, options);
                    break;
                case "NavigationMeshes":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.NavigationMesh itm503 = new Mutagen.Bethesda.Skyrim.NavigationMesh(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop504 = reader.GetString();
                                    reader.Read();
                                    switch(prop504)
                                    {
                                        case "Data":
                                            itm503.Data = new Mutagen.Bethesda.Skyrim.NavigationMeshData();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop505 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop505)
                                                    {
                                                        case "NavmeshVersion":
                                                            itm503.Data.NavmeshVersion = reader.GetUInt32();
                                                            break;
                                                        case "Magic":
                                                            itm503.Data.Magic = reader.GetUInt32();
                                                            break;
                                                        case "Parent":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                {
                                                                    case "WorldspaceNavmeshParent":
                                                                        Mutagen.Bethesda.Skyrim.WorldspaceNavmeshParent itm506 = new();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop507 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop507)
                                                                            {
                                                                                case "Parent":
                                                                                    itm506.Parent.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                                case "Coordinates":
                                                                                    itm506.Coordinates = SerializerExtensions.ReadP2Int16(ref reader, options);
                                                                                    break;
                                                                            }
                                                                        }
                                                                        itm503.Data.Parent = itm506;
                                                                        break;
                                                                    case "CellNavmeshParent":
                                                                        Mutagen.Bethesda.Skyrim.CellNavmeshParent itm508 = new();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop509 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop509)
                                                                            {
                                                                                case "UnusedWorldspaceParent":
                                                                                    itm508.UnusedWorldspaceParent.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                                case "Parent":
                                                                                    itm508.Parent.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                            }
                                                                        }
                                                                        itm503.Data.Parent = itm508;
                                                                        break;
                                                                    default:
                                                                        reader.Skip();
                                                                        break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            break;
                                                        case "Vertices":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Noggog.P3Float itm510 = default;
                                                                    itm510 = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    itm503.Data.Vertices.Add(itm510);
                                                                }
                                                            }
                                                            break;
                                                        case "Triangles":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.NavmeshTriangle itm511 = new Mutagen.Bethesda.Skyrim.NavmeshTriangle();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop512 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop512)
                                                                            {
                                                                                case "Vertices":
                                                                                    itm511.Vertices = SerializerExtensions.ReadP3Int16(ref reader, options);
                                                                                    break;
                                                                                case "EdgeLink_0_1":
                                                                                    itm511.EdgeLink_0_1 = reader.GetInt16();
                                                                                    break;
                                                                                case "EdgeLink_1_2":
                                                                                    itm511.EdgeLink_1_2 = reader.GetInt16();
                                                                                    break;
                                                                                case "EdgeLink_2_0":
                                                                                    itm511.EdgeLink_2_0 = reader.GetInt16();
                                                                                    break;
                                                                                case "Flags":
                                                                                    itm511.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavmeshTriangle.Flag>(ref reader, options);
                                                                                    break;
                                                                                case "CoverFlags":
                                                                                    itm511.CoverFlags = reader.GetUInt16();
                                                                                    break;
                                                                                case "IsCover":
                                                                                    itm511.IsCover = reader.GetBoolean();
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm503.Data.Triangles.Add(itm511);
                                                                }
                                                            }
                                                            break;
                                                        case "EdgeLinks":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.EdgeLink itm513 = new Mutagen.Bethesda.Skyrim.EdgeLink();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop514 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop514)
                                                                            {
                                                                                case "Unknown":
                                                                                    itm513.Unknown = reader.GetInt32();
                                                                                    break;
                                                                                case "Mesh":
                                                                                    itm513.Mesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                                case "TriangleIndex":
                                                                                    itm513.TriangleIndex = reader.GetInt16();
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm503.Data.EdgeLinks.Add(itm513);
                                                                }
                                                            }
                                                            break;
                                                        case "DoorTriangles":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.DoorTriangle itm515 = new Mutagen.Bethesda.Skyrim.DoorTriangle();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop516 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop516)
                                                                            {
                                                                                case "TriangleBeforeDoor":
                                                                                    itm515.TriangleBeforeDoor = reader.GetInt16();
                                                                                    break;
                                                                                case "Unknown":
                                                                                    itm515.Unknown = reader.GetInt32();
                                                                                    break;
                                                                                case "Door":
                                                                                    itm515.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm503.Data.DoorTriangles.Add(itm515);
                                                                }
                                                            }
                                                            break;
                                                        case "NavmeshGridDivisor":
                                                            itm503.Data.NavmeshGridDivisor = reader.GetUInt32();
                                                            break;
                                                        case "MaxDistanceX":
                                                            itm503.Data.MaxDistanceX = reader.GetSingle();
                                                            break;
                                                        case "MaxDistanceY":
                                                            itm503.Data.MaxDistanceY = reader.GetSingle();
                                                            break;
                                                        case "Min":
                                                            itm503.Data.Min = SerializerExtensions.ReadP3Float(ref reader, options);
                                                            break;
                                                        case "Max":
                                                            itm503.Data.Max = SerializerExtensions.ReadP3Float(ref reader, options);
                                                            break;
                                                        case "NavmeshGrid":
                                                            itm503.Data.NavmeshGrid = reader.GetBytesFromBase64();
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            break;
                                        case "ONAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm503.ONAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "PNAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm503.PNAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "NNAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm503.NNAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "MajorFlags":
                                            itm503.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavigationMesh.MajorFlag>(ref reader, options);
                                            break;
                                        case "SkyrimMajorRecordFlags":
                                            itm503.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                            break;
                                        case "FormVersion":
                                            itm503.FormVersion = reader.GetUInt16();
                                            break;
                                        case "Version2":
                                            itm503.Version2 = reader.GetUInt16();
                                            break;
                                        case "EditorID":
                                            itm503.EditorID = reader.GetString();
                                            break;
                                        case "TitleString":
                                            itm503.TitleString = reader.GetString();
                                            break;
                                        case "IsCompressed":
                                            itm503.IsCompressed = reader.GetBoolean();
                                            break;
                                        case "IsDeleted":
                                            itm503.IsDeleted = reader.GetBoolean();
                                            break;
                                        case "MajorRecordFlagsRaw":
                                            itm503.MajorRecordFlagsRaw = reader.GetInt32();
                                            break;
                                        case "FormKey":
                                            itm503.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                            break;
                                        case "VersionControl":
                                            itm503.VersionControl = reader.GetUInt32();
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.NavigationMeshes.Add(itm503);
                        }
                    }
                    break;
                case "OcclusionData":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.OcclusionData = reader.GetBytesFromBase64();
                    }
                    break;
                case "Ownership":
                    retval.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop517 = reader.GetString();
                            reader.Read();
                            switch(prop517)
                            {
                                case "Owner":
                                    if (reader.TokenType != JsonTokenType.Null)
                                        retval.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "FactionRank":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Ownership.FactionRank = reader.GetInt32();
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Persistent":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            IPlaced itm518 = default;
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                {
                                    case "PlacedNpc":
                                        Mutagen.Bethesda.Skyrim.PlacedNpc itm519 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop520 = reader.GetString();
                                            reader.Read();
                                            switch(prop520)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm519.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop521 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop521)
                                                            {
                                                                case "Version":
                                                                    itm519.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm519.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm522 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop523 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop523)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm522.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm522.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm524 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm525 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop526 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop526)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm525.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm525.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm525.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm525.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm525.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm525;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm527 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop528 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop528)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm527.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm527.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm527.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm527;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm529 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop530 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop530)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm529.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm529.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm529.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm529;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm531 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop532 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop532)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm531.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm531.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm531.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm531;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm533 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop534 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop534)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm533.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm533.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm533.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm533;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm535 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop536 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop536)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm537 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop538 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop538)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm537.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm537.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm537.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm537.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm537.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm535.Objects.Add(itm537);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm535.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm535.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm535;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm539 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop540 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop540)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm541 = default;
                                                                                                                                    itm541 = reader.GetInt32();
                                                                                                                                    itm539.Data.Add(itm541);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm539.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm539.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm539;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm542 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop543 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop543)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm544 = default;
                                                                                                                                    itm544 = reader.GetSingle();
                                                                                                                                    itm542.Data.Add(itm544);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm542.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm542.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm542;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm545 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop546 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop546)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm547 = default;
                                                                                                                                    itm547 = reader.GetBoolean();
                                                                                                                                    itm545.Data.Add(itm547);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm545.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm545.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm545;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm548 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop549 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop549)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm550 = default;
                                                                                                                                    itm550 = reader.GetString();
                                                                                                                                    itm548.Data.Add(itm550);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm548.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm548.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm524 = itm548;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm522.Properties.Add(itm524);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm519.VirtualMachineAdapter.Scripts.Add(itm522);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm519.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop551 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop551)
                                                            {
                                                                case "IdleTime":
                                                                    itm519.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm519.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm519.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm519.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm552 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm553 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop554 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop554)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm553.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm552 = itm553;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm555 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop556 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop556)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm555.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm552 = itm555;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm519.Patrol.Topics.Add(itm552);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "MerchantContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.MerchantContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Count":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.Count = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Health":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.Health = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm557 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop558 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop558)
                                                                    {
                                                                        case "Versioning":
                                                                            itm557.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm557.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm557.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm519.LinkedReferences.Add(itm557);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm519.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop559 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop559)
                                                            {
                                                                case "Flags":
                                                                    itm519.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm560 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop561 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop561)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm560.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm560.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm519.ActivateParents.Parents.Add(itm560);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferenceColor":
                                                    itm519.LinkedReferenceColor = new Mutagen.Bethesda.Skyrim.LinkedReferenceColor();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop562 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop562)
                                                            {
                                                                case "Start":
                                                                    itm519.LinkedReferenceColor.Start = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "End":
                                                                    itm519.LinkedReferenceColor.End = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm519.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm519.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Horse":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.Horse.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm519.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop563 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop563)
                                                            {
                                                                case "Versioning":
                                                                    itm519.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm519.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm519.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm519.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Ownership":
                                                    itm519.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop564 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop564)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm519.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm519.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm519.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox2":
                                                    itm519.IsIgnoredBySandbox2 = reader.GetBoolean();
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm519.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm519.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop565 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop565)
                                                            {
                                                                case "Position":
                                                                    itm519.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm519.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm519.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.PlacedNpc.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm519.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm519.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm519.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm519.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm519.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm519.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm519.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm519.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm519.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm519.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm519;
                                        break;
                                    case "PlacedObject":
                                        Mutagen.Bethesda.Skyrim.PlacedObject itm566 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop567 = reader.GetString();
                                            reader.Read();
                                            switch(prop567)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm566.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop568 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop568)
                                                            {
                                                                case "Version":
                                                                    itm566.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm566.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm569 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop570 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop570)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm569.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm569.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm571 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm572 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop573 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop573)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm572.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm572.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm572.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm572.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm572.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm572;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm574 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop575 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop575)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm574.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm574.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm574.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm574;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm576 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop577 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop577)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm576.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm576.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm576.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm576;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm578 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop579 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop579)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm578.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm578.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm578.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm578;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm580 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop581 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop581)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm580.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm580.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm580.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm580;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm582 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop583 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop583)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm584 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop585 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop585)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm584.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm584.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm584.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm584.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm584.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm582.Objects.Add(itm584);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm582.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm582.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm582;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm586 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop587 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop587)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm588 = default;
                                                                                                                                    itm588 = reader.GetInt32();
                                                                                                                                    itm586.Data.Add(itm588);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm586.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm586.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm586;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm589 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop590 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop590)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm591 = default;
                                                                                                                                    itm591 = reader.GetSingle();
                                                                                                                                    itm589.Data.Add(itm591);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm589.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm589.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm589;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm592 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop593 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop593)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm594 = default;
                                                                                                                                    itm594 = reader.GetBoolean();
                                                                                                                                    itm592.Data.Add(itm594);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm592.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm592.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm592;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm595 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop596 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop596)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm597 = default;
                                                                                                                                    itm597 = reader.GetString();
                                                                                                                                    itm595.Data.Add(itm597);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm595.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm595.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm571 = itm595;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm569.Properties.Add(itm571);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm566.VirtualMachineAdapter.Scripts.Add(itm569);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "BoundHalfExtents":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.BoundHalfExtents = SerializerExtensions.ReadP3Float(ref reader, options);
                                                    }
                                                    break;
                                                case "Primitive":
                                                    itm566.Primitive = new Mutagen.Bethesda.Skyrim.PlacedPrimitive();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop598 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop598)
                                                            {
                                                                case "Bounds":
                                                                    itm566.Primitive.Bounds = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Color":
                                                                    itm566.Primitive.Color = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "Unknown":
                                                                    itm566.Primitive.Unknown = reader.GetSingle();
                                                                    break;
                                                                case "Type":
                                                                    itm566.Primitive.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedPrimitive.TypeEnum>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XORD":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.XORD = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "OcclusionPlane":
                                                    itm566.OcclusionPlane = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop599 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop599)
                                                            {
                                                                case "Width":
                                                                    itm566.OcclusionPlane.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm566.OcclusionPlane.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm566.OcclusionPlane.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm566.OcclusionPlane.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm566.OcclusionPlane.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm566.OcclusionPlane.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm566.OcclusionPlane.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Portals":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.Portals ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.Portal itm600 = new Mutagen.Bethesda.Skyrim.Portal();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop601 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop601)
                                                                    {
                                                                        case "Origin":
                                                                            itm600.Origin.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Destination":
                                                                            itm600.Destination.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm566.Portals.Add(itm600);
                                                        }
                                                    }
                                                    break;
                                                case "RoomPortal":
                                                    itm566.RoomPortal = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop602 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop602)
                                                            {
                                                                case "Width":
                                                                    itm566.RoomPortal.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm566.RoomPortal.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm566.RoomPortal.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm566.RoomPortal.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm566.RoomPortal.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm566.RoomPortal.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm566.RoomPortal.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Unknown":
                                                    itm566.Unknown = reader.GetInt16();
                                                    break;
                                                case "LightingTemplate":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ImageSpace":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LinkedRooms":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm566.LinkedRooms.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsMultiBoundPrimitive":
                                                    itm566.IsMultiBoundPrimitive = reader.GetBoolean();
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm603 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop604 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop604)
                                                                    {
                                                                        case "Versioning":
                                                                            itm603.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm603.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm603.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm566.Reflections.Add(itm603);
                                                        }
                                                    }
                                                    break;
                                                case "LitWater":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm566.LitWater.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LightData":
                                                    itm566.LightData = new Mutagen.Bethesda.Skyrim.LightData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop605 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop605)
                                                            {
                                                                case "Versioning":
                                                                    itm566.LightData.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LightData.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "FovOffset":
                                                                    itm566.LightData.FovOffset = reader.GetSingle();
                                                                    break;
                                                                case "FadeOffset":
                                                                    itm566.LightData.FadeOffset = reader.GetSingle();
                                                                    break;
                                                                case "EndDistanceCap":
                                                                    itm566.LightData.EndDistanceCap = reader.GetSingle();
                                                                    break;
                                                                case "ShadowDepthBias":
                                                                    itm566.LightData.ShadowDepthBias = reader.GetSingle();
                                                                    break;
                                                                case "Unknown":
                                                                    itm566.LightData.Unknown = reader.GetInt32();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Alpha":
                                                    itm566.Alpha = new Mutagen.Bethesda.Skyrim.Alpha();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop606 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop606)
                                                            {
                                                                case "Cutoff":
                                                                    itm566.Alpha.Cutoff = reader.GetByte();
                                                                    break;
                                                                case "Base":
                                                                    itm566.Alpha.Base = reader.GetByte();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportDestination":
                                                    itm566.TeleportDestination = new Mutagen.Bethesda.Skyrim.TeleportDestination();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop607 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop607)
                                                            {
                                                                case "Door":
                                                                    itm566.TeleportDestination.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Position":
                                                                    itm566.TeleportDestination.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm566.TeleportDestination.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Flags":
                                                                    itm566.TeleportDestination.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.TeleportDestination.Flag>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportMessageBox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.TeleportMessageBox.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XWCN":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.XWCN = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XWCS":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.XWCS = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "WaterVelocity":
                                                    itm566.WaterVelocity = new Mutagen.Bethesda.Skyrim.WaterVelocity();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop608 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop608)
                                                            {
                                                                case "Offset":
                                                                    itm566.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm566.WaterVelocity.Unknown = reader.GetInt32();
                                                                    break;
                                                                case "Angle":
                                                                    itm566.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown2":
                                                                    itm566.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XCVL":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.XCVL = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZR":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.XCZR.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XCZA":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.XCZA = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZC":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.XCZC.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "SpawnContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.SpawnContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ActivateParents":
                                                    itm566.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop609 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop609)
                                                            {
                                                                case "Flags":
                                                                    itm566.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm610 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop611 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop611)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm610.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm610.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm566.ActivateParents.Parents.Add(itm610);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LeveledItemBaseObject":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.LeveledItemBaseObject.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "CollisionLayer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.CollisionLayer = reader.GetUInt32();
                                                    }
                                                    break;
                                                case "Lock":
                                                    itm566.Lock = new Mutagen.Bethesda.Skyrim.LockData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop612 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop612)
                                                            {
                                                                case "Level":
                                                                    itm566.Lock.Level = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.LockLevel>(ref reader, options);
                                                                    break;
                                                                case "Unused":
                                                                    itm566.Lock.Unused = reader.GetBytesFromBase64();
                                                                    break;
                                                                case "Key":
                                                                    itm566.Lock.Key.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm566.Lock.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LockData.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unused2":
                                                                    itm566.Lock.Unused2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "NavigationDoorLink":
                                                    itm566.NavigationDoorLink = new Mutagen.Bethesda.Skyrim.NavigationDoorLink();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop613 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop613)
                                                            {
                                                                case "NavMesh":
                                                                    itm566.NavigationDoorLink.NavMesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "TeleportMarkerTriangle":
                                                                    itm566.NavigationDoorLink.TeleportMarkerTriangle = reader.GetInt16();
                                                                    break;
                                                                case "Unused":
                                                                    itm566.NavigationDoorLink.Unused = reader.GetInt16();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm566.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm566.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "Ownership":
                                                    itm566.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop614 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop614)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm566.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm566.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "ItemCount":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.ItemCount = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Charge":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.Charge = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EnableParent":
                                                    itm566.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop615 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop615)
                                                            {
                                                                case "Versioning":
                                                                    itm566.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm566.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm566.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm566.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm616 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop617 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop617)
                                                                    {
                                                                        case "Versioning":
                                                                            itm616.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm616.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm616.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm566.LinkedReferences.Add(itm616);
                                                        }
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm566.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop618 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop618)
                                                            {
                                                                case "IdleTime":
                                                                    itm566.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm566.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm566.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm566.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm619 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm620 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop621 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop621)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm620.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm619 = itm620;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm622 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop623 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop623)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm622.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm619 = itm622;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm566.Patrol.Topics.Add(itm619);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Action":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.Action = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedObject.ActionFlag>(ref reader, options);
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "IsOpenByDefault":
                                                    itm566.IsOpenByDefault = reader.GetBoolean();
                                                    break;
                                                case "MapMarker":
                                                    itm566.MapMarker = new Mutagen.Bethesda.Skyrim.MapMarker();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop624 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop624)
                                                            {
                                                                case "Flags":
                                                                    itm566.MapMarker.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.MapMarker.Flag>(ref reader, options);
                                                                    break;
                                                                case "Name":
                                                                    itm566.MapMarker.Name ??= new TranslatedString(Language.English);
                                                                    SerializerExtensions.ReadTranslatedString(ref reader, itm566.MapMarker.Name, options);
                                                                    break;
                                                                case "Type":
                                                                    itm566.MapMarker.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.MapMarker.MarkerType>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "AttachRef":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm566.AttachRef.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm566.DistantLodData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm566.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop625 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop625)
                                                            {
                                                                case "Position":
                                                                    itm566.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm566.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm566.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm566.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm566.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm566.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm566.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm566.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm566.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm566.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm566.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm566.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm566;
                                        break;
                                    case "PlacedArrow":
                                        Mutagen.Bethesda.Skyrim.PlacedArrow itm626 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop627 = reader.GetString();
                                            reader.Read();
                                            switch(prop627)
                                            {
                                                case "Projectile":
                                                    itm626.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm626.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop628 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop628)
                                                            {
                                                                case "Version":
                                                                    itm626.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm626.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm629 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop630 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop630)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm629.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm629.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm631 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm632 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop633 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop633)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm632.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm632.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm632.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm632.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm632.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm632;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm634 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop635 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop635)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm634.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm634.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm634.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm634;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm636 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop637 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop637)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm636.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm636.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm636.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm636;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm638 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop639 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop639)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm638.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm638.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm638.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm638;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm640 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop641 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop641)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm640.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm640.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm640.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm640;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm642 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop643 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop643)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm644 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop645 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop645)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm644.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm644.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm644.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm644.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm644.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm642.Objects.Add(itm644);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm642.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm642.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm642;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm646 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop647 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop647)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm648 = default;
                                                                                                                                    itm648 = reader.GetInt32();
                                                                                                                                    itm646.Data.Add(itm648);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm646.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm646.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm646;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm649 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop650 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop650)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm651 = default;
                                                                                                                                    itm651 = reader.GetSingle();
                                                                                                                                    itm649.Data.Add(itm651);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm649.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm649.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm649;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm652 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop653 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop653)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm654 = default;
                                                                                                                                    itm654 = reader.GetBoolean();
                                                                                                                                    itm652.Data.Add(itm654);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm652.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm652.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm652;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm655 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop656 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop656)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm657 = default;
                                                                                                                                    itm657 = reader.GetString();
                                                                                                                                    itm655.Data.Add(itm657);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm655.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm655.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm631 = itm655;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm629.Properties.Add(itm631);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm626.VirtualMachineAdapter.Scripts.Add(itm629);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm626.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm626.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop658 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop658)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm626.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm626.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm626.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm626.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm659 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop660 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop660)
                                                                    {
                                                                        case "Versioning":
                                                                            itm659.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm659.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm659.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm626.Reflections.Add(itm659);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm661 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop662 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop662)
                                                                    {
                                                                        case "Versioning":
                                                                            itm661.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm661.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm661.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm626.LinkedReferences.Add(itm661);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm626.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop663 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop663)
                                                            {
                                                                case "Flags":
                                                                    itm626.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm664 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop665 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop665)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm664.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm664.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm626.ActivateParents.Parents.Add(itm664);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm626.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop666 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop666)
                                                            {
                                                                case "Versioning":
                                                                    itm626.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm626.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm626.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm626.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm626.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm626.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm626.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm626.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm626.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm626.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm626.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm667 = default;
                                                            itm667 = reader.GetSingle();
                                                            itm626.DistantLodData.Add(itm667);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm626.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm626.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop668 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop668)
                                                            {
                                                                case "Position":
                                                                    itm626.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm626.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm626.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm626.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm626.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm626.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm626.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm626.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm626.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm626.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm626.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm626.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm626.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm626;
                                        break;
                                    case "PlacedBeam":
                                        Mutagen.Bethesda.Skyrim.PlacedBeam itm669 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop670 = reader.GetString();
                                            reader.Read();
                                            switch(prop670)
                                            {
                                                case "Projectile":
                                                    itm669.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm669.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop671 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop671)
                                                            {
                                                                case "Version":
                                                                    itm669.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm669.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm672 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop673 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop673)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm672.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm672.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm674 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm675 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop676 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop676)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm675.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm675.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm675.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm675.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm675.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm675;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm677 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop678 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop678)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm677.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm677.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm677.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm677;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm679 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop680 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop680)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm679.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm679.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm679.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm679;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm681 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop682 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop682)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm681.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm681.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm681.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm681;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm683 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop684 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop684)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm683.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm683.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm683.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm683;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm685 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop686 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop686)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm687 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop688 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop688)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm687.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm687.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm687.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm687.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm687.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm685.Objects.Add(itm687);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm685.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm685.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm685;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm689 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop690 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop690)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm691 = default;
                                                                                                                                    itm691 = reader.GetInt32();
                                                                                                                                    itm689.Data.Add(itm691);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm689.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm689.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm689;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm692 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop693 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop693)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm694 = default;
                                                                                                                                    itm694 = reader.GetSingle();
                                                                                                                                    itm692.Data.Add(itm694);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm692.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm692.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm692;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm695 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop696 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop696)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm697 = default;
                                                                                                                                    itm697 = reader.GetBoolean();
                                                                                                                                    itm695.Data.Add(itm697);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm695.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm695.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm695;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm698 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop699 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop699)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm700 = default;
                                                                                                                                    itm700 = reader.GetString();
                                                                                                                                    itm698.Data.Add(itm700);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm698.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm698.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm674 = itm698;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm672.Properties.Add(itm674);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm669.VirtualMachineAdapter.Scripts.Add(itm672);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm669.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm669.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop701 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop701)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm669.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm669.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm669.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm669.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm702 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop703 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop703)
                                                                    {
                                                                        case "Versioning":
                                                                            itm702.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm702.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm702.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm669.Reflections.Add(itm702);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm704 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop705 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop705)
                                                                    {
                                                                        case "Versioning":
                                                                            itm704.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm704.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm704.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm669.LinkedReferences.Add(itm704);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm669.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop706 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop706)
                                                            {
                                                                case "Flags":
                                                                    itm669.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm707 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop708 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop708)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm707.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm707.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm669.ActivateParents.Parents.Add(itm707);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm669.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop709 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop709)
                                                            {
                                                                case "Versioning":
                                                                    itm669.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm669.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm669.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm669.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm669.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm669.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm669.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm669.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm669.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm669.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm669.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm710 = default;
                                                            itm710 = reader.GetSingle();
                                                            itm669.DistantLodData.Add(itm710);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm669.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm669.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop711 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop711)
                                                            {
                                                                case "Position":
                                                                    itm669.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm669.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm669.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm669.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm669.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm669.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm669.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm669.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm669.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm669.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm669.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm669.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm669.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm669;
                                        break;
                                    case "PlacedFlame":
                                        Mutagen.Bethesda.Skyrim.PlacedFlame itm712 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop713 = reader.GetString();
                                            reader.Read();
                                            switch(prop713)
                                            {
                                                case "Projectile":
                                                    itm712.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm712.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop714 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop714)
                                                            {
                                                                case "Version":
                                                                    itm712.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm712.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm715 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop716 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop716)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm715.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm715.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm717 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm718 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop719 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop719)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm718.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm718.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm718.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm718.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm718.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm718;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm720 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop721 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop721)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm720.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm720.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm720.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm720;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm722 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop723 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop723)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm722.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm722.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm722.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm722;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm724 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop725 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop725)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm724.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm724.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm724.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm724;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm726 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop727 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop727)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm726.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm726.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm726.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm726;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm728 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop729 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop729)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm730 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop731 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop731)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm730.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm730.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm730.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm730.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm730.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm728.Objects.Add(itm730);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm728.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm728.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm728;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm732 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop733 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop733)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm734 = default;
                                                                                                                                    itm734 = reader.GetInt32();
                                                                                                                                    itm732.Data.Add(itm734);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm732.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm732.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm732;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm735 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop736 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop736)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm737 = default;
                                                                                                                                    itm737 = reader.GetSingle();
                                                                                                                                    itm735.Data.Add(itm737);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm735.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm735.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm735;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm738 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop739 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop739)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm740 = default;
                                                                                                                                    itm740 = reader.GetBoolean();
                                                                                                                                    itm738.Data.Add(itm740);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm738.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm738.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm738;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm741 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop742 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop742)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm743 = default;
                                                                                                                                    itm743 = reader.GetString();
                                                                                                                                    itm741.Data.Add(itm743);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm741.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm741.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm717 = itm741;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm715.Properties.Add(itm717);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm712.VirtualMachineAdapter.Scripts.Add(itm715);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm712.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm712.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop744 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop744)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm712.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm712.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm712.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm712.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm745 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop746 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop746)
                                                                    {
                                                                        case "Versioning":
                                                                            itm745.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm745.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm745.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm712.Reflections.Add(itm745);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm747 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop748 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop748)
                                                                    {
                                                                        case "Versioning":
                                                                            itm747.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm747.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm747.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm712.LinkedReferences.Add(itm747);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm712.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop749 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop749)
                                                            {
                                                                case "Flags":
                                                                    itm712.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm750 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop751 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop751)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm750.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm750.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm712.ActivateParents.Parents.Add(itm750);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm712.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop752 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop752)
                                                            {
                                                                case "Versioning":
                                                                    itm712.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm712.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm712.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm712.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm712.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm712.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm712.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm712.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm712.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm712.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm712.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm753 = default;
                                                            itm753 = reader.GetSingle();
                                                            itm712.DistantLodData.Add(itm753);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm712.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm712.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop754 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop754)
                                                            {
                                                                case "Position":
                                                                    itm712.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm712.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm712.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm712.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm712.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm712.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm712.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm712.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm712.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm712.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm712.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm712.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm712.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm712;
                                        break;
                                    case "PlacedCone":
                                        Mutagen.Bethesda.Skyrim.PlacedCone itm755 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop756 = reader.GetString();
                                            reader.Read();
                                            switch(prop756)
                                            {
                                                case "Projectile":
                                                    itm755.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm755.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop757 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop757)
                                                            {
                                                                case "Version":
                                                                    itm755.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm755.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm758 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop759 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop759)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm758.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm758.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm760 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm761 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop762 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop762)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm761.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm761.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm761.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm761.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm761.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm761;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm763 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop764 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop764)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm763.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm763.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm763.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm763;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm765 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop766 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop766)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm765.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm765.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm765.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm765;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm767 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop768 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop768)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm767.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm767.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm767.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm767;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm769 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop770 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop770)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm769.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm769.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm769.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm769;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm771 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop772 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop772)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm773 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop774 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop774)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm773.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm773.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm773.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm773.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm773.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm771.Objects.Add(itm773);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm771.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm771.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm771;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm775 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop776 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop776)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm777 = default;
                                                                                                                                    itm777 = reader.GetInt32();
                                                                                                                                    itm775.Data.Add(itm777);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm775.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm775.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm775;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm778 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop779 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop779)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm780 = default;
                                                                                                                                    itm780 = reader.GetSingle();
                                                                                                                                    itm778.Data.Add(itm780);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm778.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm778.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm778;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm781 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop782 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop782)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm783 = default;
                                                                                                                                    itm783 = reader.GetBoolean();
                                                                                                                                    itm781.Data.Add(itm783);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm781.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm781.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm781;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm784 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop785 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop785)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm786 = default;
                                                                                                                                    itm786 = reader.GetString();
                                                                                                                                    itm784.Data.Add(itm786);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm784.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm784.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm760 = itm784;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm758.Properties.Add(itm760);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm755.VirtualMachineAdapter.Scripts.Add(itm758);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm755.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm755.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop787 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop787)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm755.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm755.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm755.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm755.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm788 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop789 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop789)
                                                                    {
                                                                        case "Versioning":
                                                                            itm788.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm788.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm788.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm755.Reflections.Add(itm788);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm790 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop791 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop791)
                                                                    {
                                                                        case "Versioning":
                                                                            itm790.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm790.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm790.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm755.LinkedReferences.Add(itm790);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm755.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop792 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop792)
                                                            {
                                                                case "Flags":
                                                                    itm755.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm793 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop794 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop794)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm793.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm793.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm755.ActivateParents.Parents.Add(itm793);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm755.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop795 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop795)
                                                            {
                                                                case "Versioning":
                                                                    itm755.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm755.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm755.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm755.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm755.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm755.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm755.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm755.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm755.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm755.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm755.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm796 = default;
                                                            itm796 = reader.GetSingle();
                                                            itm755.DistantLodData.Add(itm796);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm755.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm755.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop797 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop797)
                                                            {
                                                                case "Position":
                                                                    itm755.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm755.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm755.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm755.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm755.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm755.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm755.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm755.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm755.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm755.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm755.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm755.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm755.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm755;
                                        break;
                                    case "PlacedBarrier":
                                        Mutagen.Bethesda.Skyrim.PlacedBarrier itm798 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop799 = reader.GetString();
                                            reader.Read();
                                            switch(prop799)
                                            {
                                                case "Projectile":
                                                    itm798.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm798.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop800 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop800)
                                                            {
                                                                case "Version":
                                                                    itm798.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm798.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm801 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop802 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop802)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm801.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm801.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm803 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm804 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop805 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop805)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm804.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm804.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm804.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm804.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm804.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm804;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm806 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop807 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop807)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm806.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm806.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm806.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm806;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm808 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop809 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop809)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm808.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm808.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm808.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm808;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm810 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop811 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop811)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm810.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm810.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm810.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm810;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm812 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop813 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop813)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm812.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm812.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm812.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm812;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm814 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop815 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop815)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm816 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop817 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop817)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm816.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm816.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm816.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm816.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm816.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm814.Objects.Add(itm816);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm814.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm814.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm814;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm818 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop819 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop819)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm820 = default;
                                                                                                                                    itm820 = reader.GetInt32();
                                                                                                                                    itm818.Data.Add(itm820);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm818.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm818.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm818;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm821 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop822 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop822)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm823 = default;
                                                                                                                                    itm823 = reader.GetSingle();
                                                                                                                                    itm821.Data.Add(itm823);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm821.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm821.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm821;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm824 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop825 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop825)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm826 = default;
                                                                                                                                    itm826 = reader.GetBoolean();
                                                                                                                                    itm824.Data.Add(itm826);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm824.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm824.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm824;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm827 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop828 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop828)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm829 = default;
                                                                                                                                    itm829 = reader.GetString();
                                                                                                                                    itm827.Data.Add(itm829);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm827.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm827.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm803 = itm827;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm801.Properties.Add(itm803);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm798.VirtualMachineAdapter.Scripts.Add(itm801);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm798.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm798.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop830 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop830)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm798.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm798.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm798.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm798.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm831 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop832 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop832)
                                                                    {
                                                                        case "Versioning":
                                                                            itm831.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm831.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm831.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm798.Reflections.Add(itm831);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm833 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop834 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop834)
                                                                    {
                                                                        case "Versioning":
                                                                            itm833.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm833.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm833.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm798.LinkedReferences.Add(itm833);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm798.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop835 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop835)
                                                            {
                                                                case "Flags":
                                                                    itm798.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm836 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop837 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop837)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm836.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm836.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm798.ActivateParents.Parents.Add(itm836);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm798.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop838 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop838)
                                                            {
                                                                case "Versioning":
                                                                    itm798.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm798.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm798.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm798.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm798.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm798.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm798.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm798.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm798.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm798.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm798.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm839 = default;
                                                            itm839 = reader.GetSingle();
                                                            itm798.DistantLodData.Add(itm839);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm798.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm798.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop840 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop840)
                                                            {
                                                                case "Position":
                                                                    itm798.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm798.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm798.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm798.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm798.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm798.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm798.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm798.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm798.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm798.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm798.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm798.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm798.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm798;
                                        break;
                                    case "PlacedTrap":
                                        Mutagen.Bethesda.Skyrim.PlacedTrap itm841 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop842 = reader.GetString();
                                            reader.Read();
                                            switch(prop842)
                                            {
                                                case "Projectile":
                                                    itm841.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm841.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop843 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop843)
                                                            {
                                                                case "Version":
                                                                    itm841.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm841.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm844 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop845 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop845)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm844.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm844.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm846 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm847 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop848 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop848)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm847.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm847.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm847.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm847.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm847.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm847;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm849 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop850 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop850)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm849.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm849.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm849.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm849;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm851 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop852 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop852)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm851.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm851.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm851.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm851;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm853 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop854 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop854)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm853.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm853.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm853.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm853;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm855 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop856 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop856)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm855.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm855.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm855.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm855;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm857 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop858 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop858)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm859 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop860 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop860)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm859.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm859.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm859.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm859.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm859.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm857.Objects.Add(itm859);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm857.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm857.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm857;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm861 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop862 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop862)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm863 = default;
                                                                                                                                    itm863 = reader.GetInt32();
                                                                                                                                    itm861.Data.Add(itm863);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm861.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm861.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm861;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm864 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop865 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop865)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm866 = default;
                                                                                                                                    itm866 = reader.GetSingle();
                                                                                                                                    itm864.Data.Add(itm866);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm864.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm864.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm864;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm867 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop868 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop868)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm869 = default;
                                                                                                                                    itm869 = reader.GetBoolean();
                                                                                                                                    itm867.Data.Add(itm869);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm867.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm867.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm867;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm870 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop871 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop871)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm872 = default;
                                                                                                                                    itm872 = reader.GetString();
                                                                                                                                    itm870.Data.Add(itm872);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm870.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm870.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm846 = itm870;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm844.Properties.Add(itm846);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm841.VirtualMachineAdapter.Scripts.Add(itm844);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm841.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm841.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop873 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop873)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm841.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm841.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm841.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm841.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm874 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop875 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop875)
                                                                    {
                                                                        case "Versioning":
                                                                            itm874.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm874.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm874.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm841.Reflections.Add(itm874);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm876 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop877 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop877)
                                                                    {
                                                                        case "Versioning":
                                                                            itm876.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm876.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm876.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm841.LinkedReferences.Add(itm876);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm841.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop878 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop878)
                                                            {
                                                                case "Flags":
                                                                    itm841.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm879 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop880 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop880)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm879.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm879.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm841.ActivateParents.Parents.Add(itm879);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm841.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop881 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop881)
                                                            {
                                                                case "Versioning":
                                                                    itm841.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm841.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm841.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm841.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm841.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm841.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm841.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm841.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm841.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm841.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm841.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm882 = default;
                                                            itm882 = reader.GetSingle();
                                                            itm841.DistantLodData.Add(itm882);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm841.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm841.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop883 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop883)
                                                            {
                                                                case "Position":
                                                                    itm841.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm841.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm841.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm841.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm841.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm841.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm841.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm841.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm841.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm841.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm841.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm841.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm841.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm841;
                                        break;
                                    case "PlacedHazard":
                                        Mutagen.Bethesda.Skyrim.PlacedHazard itm884 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop885 = reader.GetString();
                                            reader.Read();
                                            switch(prop885)
                                            {
                                                case "Hazard":
                                                    itm884.Hazard.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm884.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop886 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop886)
                                                            {
                                                                case "Version":
                                                                    itm884.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm884.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm887 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop888 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop888)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm887.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm887.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm889 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm890 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop891 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop891)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm890.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm890.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm890.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm890.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm890.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm890;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm892 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop893 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop893)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm892.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm892.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm892.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm892;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm894 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop895 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop895)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm894.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm894.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm894.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm894;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm896 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop897 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop897)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm896.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm896.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm896.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm896;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm898 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop899 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop899)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm898.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm898.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm898.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm898;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm900 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop901 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop901)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm902 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop903 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop903)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm902.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm902.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm902.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm902.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm902.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm900.Objects.Add(itm902);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm900.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm900.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm900;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm904 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop905 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop905)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm906 = default;
                                                                                                                                    itm906 = reader.GetInt32();
                                                                                                                                    itm904.Data.Add(itm906);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm904.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm904.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm904;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm907 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop908 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop908)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm909 = default;
                                                                                                                                    itm909 = reader.GetSingle();
                                                                                                                                    itm907.Data.Add(itm909);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm907.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm907.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm907;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm910 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop911 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop911)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm912 = default;
                                                                                                                                    itm912 = reader.GetBoolean();
                                                                                                                                    itm910.Data.Add(itm912);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm910.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm910.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm910;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm913 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop914 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop914)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm915 = default;
                                                                                                                                    itm915 = reader.GetString();
                                                                                                                                    itm913.Data.Add(itm915);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm913.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm913.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm889 = itm913;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm887.Properties.Add(itm889);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm884.VirtualMachineAdapter.Scripts.Add(itm887);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm884.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm884.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop916 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop916)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm884.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm884.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm884.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm884.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm917 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop918 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop918)
                                                                    {
                                                                        case "Versioning":
                                                                            itm917.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm917.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm917.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm884.Reflections.Add(itm917);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm919 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop920 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop920)
                                                                    {
                                                                        case "Versioning":
                                                                            itm919.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm919.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm919.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm884.LinkedReferences.Add(itm919);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm884.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop921 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop921)
                                                            {
                                                                case "Flags":
                                                                    itm884.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm922 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop923 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop923)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm922.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm922.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm884.ActivateParents.Parents.Add(itm922);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm884.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop924 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop924)
                                                            {
                                                                case "Versioning":
                                                                    itm884.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm884.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm884.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm884.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm884.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm884.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm884.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm884.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm884.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm884.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm884.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm925 = default;
                                                            itm925 = reader.GetSingle();
                                                            itm884.DistantLodData.Add(itm925);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm884.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm884.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop926 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop926)
                                                            {
                                                                case "Position":
                                                                    itm884.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm884.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm884.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm884.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm884.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm884.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm884.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm884.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm884.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm884.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm884.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm884.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm884.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm884;
                                        break;
                                    case "PlacedMissile":
                                        Mutagen.Bethesda.Skyrim.PlacedMissile itm927 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop928 = reader.GetString();
                                            reader.Read();
                                            switch(prop928)
                                            {
                                                case "Projectile":
                                                    itm927.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm927.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop929 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop929)
                                                            {
                                                                case "Version":
                                                                    itm927.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm927.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm930 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop931 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop931)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm930.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm930.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm932 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm933 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop934 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop934)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm933.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm933.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm933.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm933.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm933.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm933;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm935 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop936 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop936)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm935.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm935.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm935.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm935;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm937 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop938 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop938)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm937.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm937.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm937.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm937;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm939 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop940 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop940)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm939.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm939.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm939.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm939;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm941 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop942 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop942)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm941.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm941.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm941.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm941;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm943 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop944 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop944)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm945 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop946 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop946)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm945.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm945.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm945.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm945.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm945.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm943.Objects.Add(itm945);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm943.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm943.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm943;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm947 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop948 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop948)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm949 = default;
                                                                                                                                    itm949 = reader.GetInt32();
                                                                                                                                    itm947.Data.Add(itm949);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm947.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm947.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm947;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm950 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop951 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop951)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm952 = default;
                                                                                                                                    itm952 = reader.GetSingle();
                                                                                                                                    itm950.Data.Add(itm952);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm950.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm950.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm950;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm953 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop954 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop954)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm955 = default;
                                                                                                                                    itm955 = reader.GetBoolean();
                                                                                                                                    itm953.Data.Add(itm955);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm953.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm953.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm953;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm956 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop957 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop957)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm958 = default;
                                                                                                                                    itm958 = reader.GetString();
                                                                                                                                    itm956.Data.Add(itm958);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm956.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm956.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm932 = itm956;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm930.Properties.Add(itm932);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm927.VirtualMachineAdapter.Scripts.Add(itm930);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm927.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm927.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop959 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop959)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm927.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm927.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm927.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm927.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm960 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop961 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop961)
                                                                    {
                                                                        case "Versioning":
                                                                            itm960.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm960.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm960.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm927.Reflections.Add(itm960);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm962 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop963 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop963)
                                                                    {
                                                                        case "Versioning":
                                                                            itm962.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm962.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm962.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm927.LinkedReferences.Add(itm962);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm927.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop964 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop964)
                                                            {
                                                                case "Flags":
                                                                    itm927.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm965 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop966 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop966)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm965.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm965.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm927.ActivateParents.Parents.Add(itm965);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm927.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop967 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop967)
                                                            {
                                                                case "Versioning":
                                                                    itm927.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm927.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm927.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm927.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm927.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm927.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm927.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm927.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm927.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm927.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm927.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm968 = default;
                                                            itm968 = reader.GetSingle();
                                                            itm927.DistantLodData.Add(itm968);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm927.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm927.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop969 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop969)
                                                            {
                                                                case "Position":
                                                                    itm927.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm927.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm927.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm927.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm927.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm927.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm927.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm927.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm927.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm927.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm927.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm927.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm927.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm518 = itm927;
                                        break;
                                    default:
                                        reader.Skip();
                                        break;
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.Persistent.Add(itm518);
                        }
                    }
                    break;
                case "PersistentTimestamp":
                    retval.PersistentTimestamp = reader.GetInt32();
                    break;
                case "PersistentUnknownGroupData":
                    retval.PersistentUnknownGroupData = reader.GetInt32();
                    break;
                case "Regions":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.Regions ??= new();
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.Regions.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "SkyAndWeatherFromRegion":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.SkyAndWeatherFromRegion.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "SkyrimMajorRecordFlags":
                    retval.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                    break;
                case "Temporary":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            IPlaced itm970 = default;
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                {
                                    case "PlacedNpc":
                                        Mutagen.Bethesda.Skyrim.PlacedNpc itm971 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop972 = reader.GetString();
                                            reader.Read();
                                            switch(prop972)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm971.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop973 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop973)
                                                            {
                                                                case "Version":
                                                                    itm971.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm971.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm974 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop975 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop975)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm974.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm974.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm976 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm977 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop978 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop978)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm977.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm977.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm977.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm977.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm977.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm977;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm979 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop980 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop980)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm979.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm979.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm979.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm979;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm981 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop982 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop982)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm981.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm981.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm981.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm981;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm983 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop984 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop984)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm983.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm983.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm983.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm983;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm985 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop986 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop986)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm985.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm985.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm985.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm985;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm987 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop988 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop988)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm989 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop990 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop990)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm989.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm989.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm989.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm989.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm989.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm987.Objects.Add(itm989);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm987.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm987.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm987;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm991 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop992 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop992)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm993 = default;
                                                                                                                                    itm993 = reader.GetInt32();
                                                                                                                                    itm991.Data.Add(itm993);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm991.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm991.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm991;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm994 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop995 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop995)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm996 = default;
                                                                                                                                    itm996 = reader.GetSingle();
                                                                                                                                    itm994.Data.Add(itm996);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm994.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm994.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm994;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm997 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop998 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop998)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm999 = default;
                                                                                                                                    itm999 = reader.GetBoolean();
                                                                                                                                    itm997.Data.Add(itm999);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm997.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm997.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm997;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1000 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1001 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1001)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1002 = default;
                                                                                                                                    itm1002 = reader.GetString();
                                                                                                                                    itm1000.Data.Add(itm1002);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1000.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1000.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm976 = itm1000;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm974.Properties.Add(itm976);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm971.VirtualMachineAdapter.Scripts.Add(itm974);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm971.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1003 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1003)
                                                            {
                                                                case "IdleTime":
                                                                    itm971.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm971.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm971.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm971.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm1004 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm1005 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1006 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1006)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm1005.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1004 = itm1005;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm1007 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1008 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1008)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm1007.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1004 = itm1007;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm971.Patrol.Topics.Add(itm1004);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "MerchantContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.MerchantContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Count":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.Count = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Health":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.Health = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1009 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1010 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1010)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1009.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1009.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1009.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm971.LinkedReferences.Add(itm1009);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm971.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1011 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1011)
                                                            {
                                                                case "Flags":
                                                                    itm971.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1012 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1013 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1013)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1012.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1012.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm971.ActivateParents.Parents.Add(itm1012);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferenceColor":
                                                    itm971.LinkedReferenceColor = new Mutagen.Bethesda.Skyrim.LinkedReferenceColor();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1014 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1014)
                                                            {
                                                                case "Start":
                                                                    itm971.LinkedReferenceColor.Start = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "End":
                                                                    itm971.LinkedReferenceColor.End = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm971.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm971.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Horse":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.Horse.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm971.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1015 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1015)
                                                            {
                                                                case "Versioning":
                                                                    itm971.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm971.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm971.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm971.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Ownership":
                                                    itm971.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1016 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1016)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm971.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm971.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm971.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox2":
                                                    itm971.IsIgnoredBySandbox2 = reader.GetBoolean();
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm971.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm971.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1017 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1017)
                                                            {
                                                                case "Position":
                                                                    itm971.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm971.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm971.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.PlacedNpc.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm971.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm971.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm971.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm971.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm971.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm971.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm971.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm971.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm971.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm971.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm971;
                                        break;
                                    case "PlacedObject":
                                        Mutagen.Bethesda.Skyrim.PlacedObject itm1018 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1019 = reader.GetString();
                                            reader.Read();
                                            switch(prop1019)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm1018.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1020 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1020)
                                                            {
                                                                case "Version":
                                                                    itm1018.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1018.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1021 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1022 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1022)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1021.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1021.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1023 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1024 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1025 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1025)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1024.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1024.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1024.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1024.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1024.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1024;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1026 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1027 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1027)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1026.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1026.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1026.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1026;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1028 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1029 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1029)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1028.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1028.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1028.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1028;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1030 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1031 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1031)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1030.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1030.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1030.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1030;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1032 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1033 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1033)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1032.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1032.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1032.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1032;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1034 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1035 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1035)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1036 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1037 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1037)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1036.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1036.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1036.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1036.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1036.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1034.Objects.Add(itm1036);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1034.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1034.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1034;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1038 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1039 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1039)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1040 = default;
                                                                                                                                    itm1040 = reader.GetInt32();
                                                                                                                                    itm1038.Data.Add(itm1040);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1038.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1038.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1038;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1041 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1042 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1042)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1043 = default;
                                                                                                                                    itm1043 = reader.GetSingle();
                                                                                                                                    itm1041.Data.Add(itm1043);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1041.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1041.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1041;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1044 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1045 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1045)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1046 = default;
                                                                                                                                    itm1046 = reader.GetBoolean();
                                                                                                                                    itm1044.Data.Add(itm1046);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1044.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1044.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1044;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1047 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1048 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1048)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1049 = default;
                                                                                                                                    itm1049 = reader.GetString();
                                                                                                                                    itm1047.Data.Add(itm1049);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1047.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1047.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1023 = itm1047;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1021.Properties.Add(itm1023);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1018.VirtualMachineAdapter.Scripts.Add(itm1021);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "BoundHalfExtents":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.BoundHalfExtents = SerializerExtensions.ReadP3Float(ref reader, options);
                                                    }
                                                    break;
                                                case "Primitive":
                                                    itm1018.Primitive = new Mutagen.Bethesda.Skyrim.PlacedPrimitive();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1050 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1050)
                                                            {
                                                                case "Bounds":
                                                                    itm1018.Primitive.Bounds = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Color":
                                                                    itm1018.Primitive.Color = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "Unknown":
                                                                    itm1018.Primitive.Unknown = reader.GetSingle();
                                                                    break;
                                                                case "Type":
                                                                    itm1018.Primitive.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedPrimitive.TypeEnum>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XORD":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.XORD = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "OcclusionPlane":
                                                    itm1018.OcclusionPlane = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1051 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1051)
                                                            {
                                                                case "Width":
                                                                    itm1018.OcclusionPlane.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm1018.OcclusionPlane.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm1018.OcclusionPlane.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm1018.OcclusionPlane.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm1018.OcclusionPlane.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm1018.OcclusionPlane.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm1018.OcclusionPlane.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Portals":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.Portals ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.Portal itm1052 = new Mutagen.Bethesda.Skyrim.Portal();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1053 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1053)
                                                                    {
                                                                        case "Origin":
                                                                            itm1052.Origin.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Destination":
                                                                            itm1052.Destination.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1018.Portals.Add(itm1052);
                                                        }
                                                    }
                                                    break;
                                                case "RoomPortal":
                                                    itm1018.RoomPortal = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1054 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1054)
                                                            {
                                                                case "Width":
                                                                    itm1018.RoomPortal.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm1018.RoomPortal.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm1018.RoomPortal.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm1018.RoomPortal.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm1018.RoomPortal.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm1018.RoomPortal.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm1018.RoomPortal.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Unknown":
                                                    itm1018.Unknown = reader.GetInt16();
                                                    break;
                                                case "LightingTemplate":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ImageSpace":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LinkedRooms":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1018.LinkedRooms.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsMultiBoundPrimitive":
                                                    itm1018.IsMultiBoundPrimitive = reader.GetBoolean();
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1055 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1056 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1056)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1055.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1055.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1055.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1018.Reflections.Add(itm1055);
                                                        }
                                                    }
                                                    break;
                                                case "LitWater":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1018.LitWater.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LightData":
                                                    itm1018.LightData = new Mutagen.Bethesda.Skyrim.LightData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1057 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1057)
                                                            {
                                                                case "Versioning":
                                                                    itm1018.LightData.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LightData.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "FovOffset":
                                                                    itm1018.LightData.FovOffset = reader.GetSingle();
                                                                    break;
                                                                case "FadeOffset":
                                                                    itm1018.LightData.FadeOffset = reader.GetSingle();
                                                                    break;
                                                                case "EndDistanceCap":
                                                                    itm1018.LightData.EndDistanceCap = reader.GetSingle();
                                                                    break;
                                                                case "ShadowDepthBias":
                                                                    itm1018.LightData.ShadowDepthBias = reader.GetSingle();
                                                                    break;
                                                                case "Unknown":
                                                                    itm1018.LightData.Unknown = reader.GetInt32();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Alpha":
                                                    itm1018.Alpha = new Mutagen.Bethesda.Skyrim.Alpha();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1058 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1058)
                                                            {
                                                                case "Cutoff":
                                                                    itm1018.Alpha.Cutoff = reader.GetByte();
                                                                    break;
                                                                case "Base":
                                                                    itm1018.Alpha.Base = reader.GetByte();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportDestination":
                                                    itm1018.TeleportDestination = new Mutagen.Bethesda.Skyrim.TeleportDestination();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1059 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1059)
                                                            {
                                                                case "Door":
                                                                    itm1018.TeleportDestination.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Position":
                                                                    itm1018.TeleportDestination.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1018.TeleportDestination.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Flags":
                                                                    itm1018.TeleportDestination.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.TeleportDestination.Flag>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportMessageBox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.TeleportMessageBox.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XWCN":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.XWCN = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XWCS":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.XWCS = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "WaterVelocity":
                                                    itm1018.WaterVelocity = new Mutagen.Bethesda.Skyrim.WaterVelocity();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1060 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1060)
                                                            {
                                                                case "Offset":
                                                                    itm1018.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1018.WaterVelocity.Unknown = reader.GetInt32();
                                                                    break;
                                                                case "Angle":
                                                                    itm1018.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown2":
                                                                    itm1018.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XCVL":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.XCVL = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZR":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.XCZR.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XCZA":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.XCZA = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZC":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.XCZC.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "SpawnContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.SpawnContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ActivateParents":
                                                    itm1018.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1061 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1061)
                                                            {
                                                                case "Flags":
                                                                    itm1018.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1062 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1063 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1063)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1062.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1062.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1018.ActivateParents.Parents.Add(itm1062);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LeveledItemBaseObject":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.LeveledItemBaseObject.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "CollisionLayer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.CollisionLayer = reader.GetUInt32();
                                                    }
                                                    break;
                                                case "Lock":
                                                    itm1018.Lock = new Mutagen.Bethesda.Skyrim.LockData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1064 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1064)
                                                            {
                                                                case "Level":
                                                                    itm1018.Lock.Level = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.LockLevel>(ref reader, options);
                                                                    break;
                                                                case "Unused":
                                                                    itm1018.Lock.Unused = reader.GetBytesFromBase64();
                                                                    break;
                                                                case "Key":
                                                                    itm1018.Lock.Key.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1018.Lock.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LockData.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unused2":
                                                                    itm1018.Lock.Unused2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "NavigationDoorLink":
                                                    itm1018.NavigationDoorLink = new Mutagen.Bethesda.Skyrim.NavigationDoorLink();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1065 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1065)
                                                            {
                                                                case "NavMesh":
                                                                    itm1018.NavigationDoorLink.NavMesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "TeleportMarkerTriangle":
                                                                    itm1018.NavigationDoorLink.TeleportMarkerTriangle = reader.GetInt16();
                                                                    break;
                                                                case "Unused":
                                                                    itm1018.NavigationDoorLink.Unused = reader.GetInt16();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1018.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm1018.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "Ownership":
                                                    itm1018.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1066 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1066)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1018.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1018.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "ItemCount":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.ItemCount = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Charge":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.Charge = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EnableParent":
                                                    itm1018.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1067 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1067)
                                                            {
                                                                case "Versioning":
                                                                    itm1018.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1018.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1018.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1018.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1068 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1069 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1069)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1068.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1068.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1068.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1018.LinkedReferences.Add(itm1068);
                                                        }
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm1018.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1070 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1070)
                                                            {
                                                                case "IdleTime":
                                                                    itm1018.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm1018.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1018.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1018.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm1071 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm1072 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1073 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1073)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm1072.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1071 = itm1072;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm1074 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1075 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1075)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm1074.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1071 = itm1074;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1018.Patrol.Topics.Add(itm1071);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Action":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.Action = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedObject.ActionFlag>(ref reader, options);
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "IsOpenByDefault":
                                                    itm1018.IsOpenByDefault = reader.GetBoolean();
                                                    break;
                                                case "MapMarker":
                                                    itm1018.MapMarker = new Mutagen.Bethesda.Skyrim.MapMarker();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1076 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1076)
                                                            {
                                                                case "Flags":
                                                                    itm1018.MapMarker.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.MapMarker.Flag>(ref reader, options);
                                                                    break;
                                                                case "Name":
                                                                    itm1018.MapMarker.Name ??= new TranslatedString(Language.English);
                                                                    SerializerExtensions.ReadTranslatedString(ref reader, itm1018.MapMarker.Name, options);
                                                                    break;
                                                                case "Type":
                                                                    itm1018.MapMarker.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.MapMarker.MarkerType>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "AttachRef":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1018.AttachRef.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1018.DistantLodData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1018.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1077 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1077)
                                                            {
                                                                case "Position":
                                                                    itm1018.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1018.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1018.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1018.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1018.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1018.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1018.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1018.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1018.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1018.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1018.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1018.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1018;
                                        break;
                                    case "PlacedArrow":
                                        Mutagen.Bethesda.Skyrim.PlacedArrow itm1078 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1079 = reader.GetString();
                                            reader.Read();
                                            switch(prop1079)
                                            {
                                                case "Projectile":
                                                    itm1078.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1078.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1080 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1080)
                                                            {
                                                                case "Version":
                                                                    itm1078.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1078.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1081 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1082 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1082)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1081.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1081.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1083 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1084 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1085 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1085)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1084.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1084.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1084.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1084.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1084.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1084;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1086 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1087 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1087)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1086.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1086.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1086.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1086;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1088 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1089 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1089)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1088.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1088.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1088.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1088;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1090 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1091 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1091)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1090.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1090.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1090.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1090;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1092 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1093 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1093)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1092.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1092.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1092.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1092;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1094 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1095 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1095)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1096 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1097 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1097)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1096.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1096.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1096.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1096.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1096.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1094.Objects.Add(itm1096);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1094.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1094.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1094;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1098 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1099 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1099)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1100 = default;
                                                                                                                                    itm1100 = reader.GetInt32();
                                                                                                                                    itm1098.Data.Add(itm1100);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1098.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1098.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1098;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1101 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1102 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1102)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1103 = default;
                                                                                                                                    itm1103 = reader.GetSingle();
                                                                                                                                    itm1101.Data.Add(itm1103);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1101.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1101.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1101;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1104 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1105 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1105)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1106 = default;
                                                                                                                                    itm1106 = reader.GetBoolean();
                                                                                                                                    itm1104.Data.Add(itm1106);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1104.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1104.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1104;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1107 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1108 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1108)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1109 = default;
                                                                                                                                    itm1109 = reader.GetString();
                                                                                                                                    itm1107.Data.Add(itm1109);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1107.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1107.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1083 = itm1107;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1081.Properties.Add(itm1083);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1078.VirtualMachineAdapter.Scripts.Add(itm1081);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1078.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1078.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1110 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1110)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1078.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1078.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1078.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1078.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1111 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1112 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1112)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1111.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1111.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1111.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1078.Reflections.Add(itm1111);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1113 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1114 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1114)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1113.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1113.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1113.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1078.LinkedReferences.Add(itm1113);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1078.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1115 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1115)
                                                            {
                                                                case "Flags":
                                                                    itm1078.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1116 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1117 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1117)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1116.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1116.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1078.ActivateParents.Parents.Add(itm1116);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1078.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1118 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1118)
                                                            {
                                                                case "Versioning":
                                                                    itm1078.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1078.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1078.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1078.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1078.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1078.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1078.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1078.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1078.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1078.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1078.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1119 = default;
                                                            itm1119 = reader.GetSingle();
                                                            itm1078.DistantLodData.Add(itm1119);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1078.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1078.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1120 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1120)
                                                            {
                                                                case "Position":
                                                                    itm1078.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1078.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1078.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1078.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1078.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1078.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1078.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1078.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1078.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1078.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1078.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1078.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1078.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1078;
                                        break;
                                    case "PlacedBeam":
                                        Mutagen.Bethesda.Skyrim.PlacedBeam itm1121 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1122 = reader.GetString();
                                            reader.Read();
                                            switch(prop1122)
                                            {
                                                case "Projectile":
                                                    itm1121.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1121.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1123 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1123)
                                                            {
                                                                case "Version":
                                                                    itm1121.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1121.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1124 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1125 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1125)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1124.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1124.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1126 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1127 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1128 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1128)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1127.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1127.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1127.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1127.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1127.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1127;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1129 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1130 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1130)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1129.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1129.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1129.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1129;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1131 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1132 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1132)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1131.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1131.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1131.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1131;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1133 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1134 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1134)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1133.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1133.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1133.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1133;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1135 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1136 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1136)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1135.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1135.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1135.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1135;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1137 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1138 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1138)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1139 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1140 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1140)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1139.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1139.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1139.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1139.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1139.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1137.Objects.Add(itm1139);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1137.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1137.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1137;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1141 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1142 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1142)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1143 = default;
                                                                                                                                    itm1143 = reader.GetInt32();
                                                                                                                                    itm1141.Data.Add(itm1143);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1141.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1141.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1141;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1144 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1145 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1145)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1146 = default;
                                                                                                                                    itm1146 = reader.GetSingle();
                                                                                                                                    itm1144.Data.Add(itm1146);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1144.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1144.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1144;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1147 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1148 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1148)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1149 = default;
                                                                                                                                    itm1149 = reader.GetBoolean();
                                                                                                                                    itm1147.Data.Add(itm1149);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1147.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1147.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1147;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1150 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1151 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1151)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1152 = default;
                                                                                                                                    itm1152 = reader.GetString();
                                                                                                                                    itm1150.Data.Add(itm1152);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1150.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1150.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1126 = itm1150;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1124.Properties.Add(itm1126);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1121.VirtualMachineAdapter.Scripts.Add(itm1124);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1121.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1121.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1153 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1153)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1121.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1121.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1121.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1121.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1154 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1155 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1155)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1154.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1154.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1154.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1121.Reflections.Add(itm1154);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1156 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1157 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1157)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1156.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1156.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1156.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1121.LinkedReferences.Add(itm1156);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1121.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1158 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1158)
                                                            {
                                                                case "Flags":
                                                                    itm1121.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1159 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1160 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1160)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1159.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1159.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1121.ActivateParents.Parents.Add(itm1159);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1121.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1161 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1161)
                                                            {
                                                                case "Versioning":
                                                                    itm1121.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1121.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1121.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1121.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1121.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1121.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1121.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1121.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1121.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1121.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1121.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1162 = default;
                                                            itm1162 = reader.GetSingle();
                                                            itm1121.DistantLodData.Add(itm1162);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1121.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1121.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1163 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1163)
                                                            {
                                                                case "Position":
                                                                    itm1121.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1121.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1121.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1121.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1121.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1121.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1121.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1121.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1121.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1121.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1121.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1121.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1121.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1121;
                                        break;
                                    case "PlacedFlame":
                                        Mutagen.Bethesda.Skyrim.PlacedFlame itm1164 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1165 = reader.GetString();
                                            reader.Read();
                                            switch(prop1165)
                                            {
                                                case "Projectile":
                                                    itm1164.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1164.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1166 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1166)
                                                            {
                                                                case "Version":
                                                                    itm1164.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1164.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1167 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1168 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1168)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1167.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1167.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1169 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1170 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1171 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1171)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1170.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1170.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1170.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1170.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1170.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1170;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1172 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1173 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1173)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1172.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1172.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1172.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1172;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1174 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1175 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1175)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1174.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1174.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1174.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1174;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1176 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1177 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1177)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1176.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1176.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1176.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1176;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1178 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1179 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1179)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1178.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1178.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1178.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1178;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1180 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1181 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1181)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1182 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1183 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1183)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1182.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1182.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1182.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1182.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1182.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1180.Objects.Add(itm1182);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1180.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1180.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1180;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1184 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1185 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1185)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1186 = default;
                                                                                                                                    itm1186 = reader.GetInt32();
                                                                                                                                    itm1184.Data.Add(itm1186);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1184.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1184.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1184;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1187 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1188 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1188)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1189 = default;
                                                                                                                                    itm1189 = reader.GetSingle();
                                                                                                                                    itm1187.Data.Add(itm1189);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1187.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1187.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1187;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1190 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1191 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1191)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1192 = default;
                                                                                                                                    itm1192 = reader.GetBoolean();
                                                                                                                                    itm1190.Data.Add(itm1192);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1190.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1190.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1190;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1193 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1194 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1194)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1195 = default;
                                                                                                                                    itm1195 = reader.GetString();
                                                                                                                                    itm1193.Data.Add(itm1195);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1193.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1193.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1169 = itm1193;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1167.Properties.Add(itm1169);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1164.VirtualMachineAdapter.Scripts.Add(itm1167);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1164.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1164.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1196 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1196)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1164.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1164.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1164.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1164.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1197 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1198 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1198)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1197.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1197.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1197.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1164.Reflections.Add(itm1197);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1199 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1200 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1200)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1199.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1199.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1199.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1164.LinkedReferences.Add(itm1199);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1164.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1201 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1201)
                                                            {
                                                                case "Flags":
                                                                    itm1164.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1202 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1203 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1203)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1202.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1202.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1164.ActivateParents.Parents.Add(itm1202);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1164.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1204 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1204)
                                                            {
                                                                case "Versioning":
                                                                    itm1164.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1164.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1164.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1164.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1164.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1164.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1164.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1164.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1164.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1164.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1164.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1205 = default;
                                                            itm1205 = reader.GetSingle();
                                                            itm1164.DistantLodData.Add(itm1205);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1164.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1164.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1206 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1206)
                                                            {
                                                                case "Position":
                                                                    itm1164.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1164.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1164.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1164.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1164.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1164.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1164.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1164.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1164.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1164.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1164.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1164.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1164.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1164;
                                        break;
                                    case "PlacedCone":
                                        Mutagen.Bethesda.Skyrim.PlacedCone itm1207 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1208 = reader.GetString();
                                            reader.Read();
                                            switch(prop1208)
                                            {
                                                case "Projectile":
                                                    itm1207.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1207.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1209 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1209)
                                                            {
                                                                case "Version":
                                                                    itm1207.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1207.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1210 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1211 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1211)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1210.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1210.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1212 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1213 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1214 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1214)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1213.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1213.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1213.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1213.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1213.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1213;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1215 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1216 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1216)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1215.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1215.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1215.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1215;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1217 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1218 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1218)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1217.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1217.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1217.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1217;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1219 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1220 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1220)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1219.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1219.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1219.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1219;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1221 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1222 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1222)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1221.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1221.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1221.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1221;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1223 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1224 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1224)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1225 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1226 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1226)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1225.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1225.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1225.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1225.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1225.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1223.Objects.Add(itm1225);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1223.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1223.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1223;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1227 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1228 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1228)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1229 = default;
                                                                                                                                    itm1229 = reader.GetInt32();
                                                                                                                                    itm1227.Data.Add(itm1229);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1227.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1227.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1227;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1230 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1231 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1231)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1232 = default;
                                                                                                                                    itm1232 = reader.GetSingle();
                                                                                                                                    itm1230.Data.Add(itm1232);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1230.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1230.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1230;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1233 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1234 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1234)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1235 = default;
                                                                                                                                    itm1235 = reader.GetBoolean();
                                                                                                                                    itm1233.Data.Add(itm1235);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1233.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1233.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1233;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1236 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1237 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1237)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1238 = default;
                                                                                                                                    itm1238 = reader.GetString();
                                                                                                                                    itm1236.Data.Add(itm1238);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1236.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1236.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1212 = itm1236;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1210.Properties.Add(itm1212);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1207.VirtualMachineAdapter.Scripts.Add(itm1210);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1207.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1207.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1239 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1239)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1207.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1207.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1207.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1207.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1240 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1241 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1241)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1240.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1240.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1240.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1207.Reflections.Add(itm1240);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1242 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1243 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1243)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1242.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1242.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1242.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1207.LinkedReferences.Add(itm1242);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1207.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1244 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1244)
                                                            {
                                                                case "Flags":
                                                                    itm1207.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1245 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1246 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1246)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1245.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1245.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1207.ActivateParents.Parents.Add(itm1245);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1207.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1247 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1247)
                                                            {
                                                                case "Versioning":
                                                                    itm1207.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1207.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1207.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1207.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1207.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1207.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1207.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1207.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1207.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1207.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1207.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1248 = default;
                                                            itm1248 = reader.GetSingle();
                                                            itm1207.DistantLodData.Add(itm1248);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1207.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1207.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1249 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1249)
                                                            {
                                                                case "Position":
                                                                    itm1207.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1207.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1207.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1207.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1207.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1207.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1207.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1207.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1207.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1207.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1207.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1207.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1207.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1207;
                                        break;
                                    case "PlacedBarrier":
                                        Mutagen.Bethesda.Skyrim.PlacedBarrier itm1250 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1251 = reader.GetString();
                                            reader.Read();
                                            switch(prop1251)
                                            {
                                                case "Projectile":
                                                    itm1250.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1250.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1252 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1252)
                                                            {
                                                                case "Version":
                                                                    itm1250.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1250.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1253 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1254 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1254)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1253.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1253.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1255 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1256 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1257 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1257)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1256.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1256.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1256.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1256.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1256.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1256;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1258 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1259 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1259)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1258.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1258.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1258.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1258;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1260 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1261 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1261)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1260.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1260.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1260.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1260;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1262 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1263 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1263)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1262.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1262.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1262.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1262;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1264 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1265 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1265)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1264.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1264.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1264.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1264;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1266 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1267 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1267)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1268 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1269 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1269)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1268.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1268.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1268.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1268.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1268.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1266.Objects.Add(itm1268);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1266.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1266.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1266;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1270 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1271 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1271)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1272 = default;
                                                                                                                                    itm1272 = reader.GetInt32();
                                                                                                                                    itm1270.Data.Add(itm1272);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1270.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1270.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1270;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1273 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1274 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1274)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1275 = default;
                                                                                                                                    itm1275 = reader.GetSingle();
                                                                                                                                    itm1273.Data.Add(itm1275);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1273.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1273.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1273;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1276 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1277 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1277)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1278 = default;
                                                                                                                                    itm1278 = reader.GetBoolean();
                                                                                                                                    itm1276.Data.Add(itm1278);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1276.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1276.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1276;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1279 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1280 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1280)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1281 = default;
                                                                                                                                    itm1281 = reader.GetString();
                                                                                                                                    itm1279.Data.Add(itm1281);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1279.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1279.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1255 = itm1279;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1253.Properties.Add(itm1255);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1250.VirtualMachineAdapter.Scripts.Add(itm1253);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1250.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1250.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1282 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1282)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1250.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1250.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1250.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1250.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1283 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1284 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1284)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1283.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1283.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1283.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1250.Reflections.Add(itm1283);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1285 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1286 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1286)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1285.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1285.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1285.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1250.LinkedReferences.Add(itm1285);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1250.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1287 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1287)
                                                            {
                                                                case "Flags":
                                                                    itm1250.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1288 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1289 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1289)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1288.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1288.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1250.ActivateParents.Parents.Add(itm1288);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1250.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1290 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1290)
                                                            {
                                                                case "Versioning":
                                                                    itm1250.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1250.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1250.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1250.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1250.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1250.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1250.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1250.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1250.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1250.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1250.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1291 = default;
                                                            itm1291 = reader.GetSingle();
                                                            itm1250.DistantLodData.Add(itm1291);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1250.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1250.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1292 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1292)
                                                            {
                                                                case "Position":
                                                                    itm1250.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1250.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1250.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1250.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1250.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1250.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1250.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1250.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1250.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1250.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1250.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1250.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1250.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1250;
                                        break;
                                    case "PlacedTrap":
                                        Mutagen.Bethesda.Skyrim.PlacedTrap itm1293 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1294 = reader.GetString();
                                            reader.Read();
                                            switch(prop1294)
                                            {
                                                case "Projectile":
                                                    itm1293.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1293.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1295 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1295)
                                                            {
                                                                case "Version":
                                                                    itm1293.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1293.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1296 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1297 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1297)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1296.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1296.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1298 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1299 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1300 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1300)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1299.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1299.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1299.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1299.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1299.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1299;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1301 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1302 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1302)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1301.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1301.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1301.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1301;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1303 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1304 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1304)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1303.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1303.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1303.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1303;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1305 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1306 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1306)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1305.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1305.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1305.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1305;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1307 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1308 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1308)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1307.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1307.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1307.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1307;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1309 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1310 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1310)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1311 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1312 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1312)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1311.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1311.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1311.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1311.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1311.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1309.Objects.Add(itm1311);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1309.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1309.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1309;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1313 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1314 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1314)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1315 = default;
                                                                                                                                    itm1315 = reader.GetInt32();
                                                                                                                                    itm1313.Data.Add(itm1315);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1313.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1313.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1313;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1316 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1317 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1317)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1318 = default;
                                                                                                                                    itm1318 = reader.GetSingle();
                                                                                                                                    itm1316.Data.Add(itm1318);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1316.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1316.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1316;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1319 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1320 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1320)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1321 = default;
                                                                                                                                    itm1321 = reader.GetBoolean();
                                                                                                                                    itm1319.Data.Add(itm1321);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1319.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1319.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1319;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1322 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1323 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1323)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1324 = default;
                                                                                                                                    itm1324 = reader.GetString();
                                                                                                                                    itm1322.Data.Add(itm1324);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1322.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1322.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1298 = itm1322;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1296.Properties.Add(itm1298);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1293.VirtualMachineAdapter.Scripts.Add(itm1296);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1293.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1293.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1325 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1325)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1293.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1293.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1293.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1293.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1326 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1327 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1327)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1326.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1326.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1326.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1293.Reflections.Add(itm1326);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1328 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1329 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1329)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1328.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1328.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1328.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1293.LinkedReferences.Add(itm1328);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1293.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1330 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1330)
                                                            {
                                                                case "Flags":
                                                                    itm1293.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1331 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1332 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1332)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1331.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1331.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1293.ActivateParents.Parents.Add(itm1331);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1293.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1333 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1333)
                                                            {
                                                                case "Versioning":
                                                                    itm1293.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1293.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1293.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1293.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1293.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1293.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1293.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1293.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1293.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1293.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1293.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1334 = default;
                                                            itm1334 = reader.GetSingle();
                                                            itm1293.DistantLodData.Add(itm1334);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1293.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1293.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1335 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1335)
                                                            {
                                                                case "Position":
                                                                    itm1293.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1293.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1293.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1293.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1293.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1293.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1293.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1293.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1293.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1293.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1293.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1293.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1293.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1293;
                                        break;
                                    case "PlacedHazard":
                                        Mutagen.Bethesda.Skyrim.PlacedHazard itm1336 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1337 = reader.GetString();
                                            reader.Read();
                                            switch(prop1337)
                                            {
                                                case "Hazard":
                                                    itm1336.Hazard.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1336.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1338 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1338)
                                                            {
                                                                case "Version":
                                                                    itm1336.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1336.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1339 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1340 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1340)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1339.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1339.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1341 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1342 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1343 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1343)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1342.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1342.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1342.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1342.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1342.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1342;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1344 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1345 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1345)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1344.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1344.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1344.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1344;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1346 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1347 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1347)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1346.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1346.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1346.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1346;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1348 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1349 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1349)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1348.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1348.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1348.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1348;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1350 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1351 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1351)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1350.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1350.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1350.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1350;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1352 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1353 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1353)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1354 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1355 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1355)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1354.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1354.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1354.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1354.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1354.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1352.Objects.Add(itm1354);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1352.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1352.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1352;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1356 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1357 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1357)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1358 = default;
                                                                                                                                    itm1358 = reader.GetInt32();
                                                                                                                                    itm1356.Data.Add(itm1358);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1356.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1356.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1356;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1359 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1360 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1360)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1361 = default;
                                                                                                                                    itm1361 = reader.GetSingle();
                                                                                                                                    itm1359.Data.Add(itm1361);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1359.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1359.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1359;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1362 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1363 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1363)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1364 = default;
                                                                                                                                    itm1364 = reader.GetBoolean();
                                                                                                                                    itm1362.Data.Add(itm1364);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1362.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1362.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1362;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1365 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1366 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1366)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1367 = default;
                                                                                                                                    itm1367 = reader.GetString();
                                                                                                                                    itm1365.Data.Add(itm1367);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1365.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1365.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1341 = itm1365;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1339.Properties.Add(itm1341);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1336.VirtualMachineAdapter.Scripts.Add(itm1339);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1336.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1336.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1368 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1368)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1336.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1336.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1336.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1336.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1369 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1370 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1370)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1369.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1369.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1369.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1336.Reflections.Add(itm1369);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1371 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1372 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1372)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1371.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1371.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1371.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1336.LinkedReferences.Add(itm1371);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1336.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1373 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1373)
                                                            {
                                                                case "Flags":
                                                                    itm1336.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1374 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1375 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1375)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1374.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1374.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1336.ActivateParents.Parents.Add(itm1374);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1336.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1376 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1376)
                                                            {
                                                                case "Versioning":
                                                                    itm1336.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1336.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1336.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1336.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1336.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1336.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1336.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1336.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1336.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1336.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1336.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1377 = default;
                                                            itm1377 = reader.GetSingle();
                                                            itm1336.DistantLodData.Add(itm1377);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1336.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1336.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1378 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1378)
                                                            {
                                                                case "Position":
                                                                    itm1336.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1336.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1336.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1336.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1336.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1336.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1336.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1336.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1336.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1336.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1336.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1336.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1336.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1336;
                                        break;
                                    case "PlacedMissile":
                                        Mutagen.Bethesda.Skyrim.PlacedMissile itm1379 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1380 = reader.GetString();
                                            reader.Read();
                                            switch(prop1380)
                                            {
                                                case "Projectile":
                                                    itm1379.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1379.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1381 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1381)
                                                            {
                                                                case "Version":
                                                                    itm1379.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1379.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1382 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1383 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1383)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1382.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1382.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1384 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1385 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1386 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1386)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1385.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1385.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1385.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1385.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1385.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1385;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1387 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1388 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1388)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1387.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1387.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1387.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1387;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1389 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1390 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1390)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1389.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1389.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1389.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1389;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1391 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1392 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1392)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1391.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1391.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1391.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1391;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1393 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1394 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1394)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1393.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1393.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1393.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1393;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1395 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1396 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1396)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1397 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1398 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1398)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1397.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1397.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1397.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1397.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1397.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1395.Objects.Add(itm1397);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1395.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1395.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1395;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1399 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1400 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1400)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1401 = default;
                                                                                                                                    itm1401 = reader.GetInt32();
                                                                                                                                    itm1399.Data.Add(itm1401);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1399.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1399.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1399;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1402 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1403 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1403)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1404 = default;
                                                                                                                                    itm1404 = reader.GetSingle();
                                                                                                                                    itm1402.Data.Add(itm1404);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1402.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1402.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1402;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1405 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1406 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1406)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1407 = default;
                                                                                                                                    itm1407 = reader.GetBoolean();
                                                                                                                                    itm1405.Data.Add(itm1407);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1405.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1405.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1405;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1408 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1409 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1409)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1410 = default;
                                                                                                                                    itm1410 = reader.GetString();
                                                                                                                                    itm1408.Data.Add(itm1410);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1408.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1408.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1384 = itm1408;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1382.Properties.Add(itm1384);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1379.VirtualMachineAdapter.Scripts.Add(itm1382);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1379.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1379.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1411 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1411)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1379.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1379.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1379.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1379.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1412 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1413 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1413)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1412.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1412.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1412.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1379.Reflections.Add(itm1412);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1414 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1415 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1415)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1414.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1414.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1414.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1379.LinkedReferences.Add(itm1414);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1379.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1416 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1416)
                                                            {
                                                                case "Flags":
                                                                    itm1379.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1417 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1418 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1418)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1417.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1417.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1379.ActivateParents.Parents.Add(itm1417);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1379.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1419 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1419)
                                                            {
                                                                case "Versioning":
                                                                    itm1379.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1379.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1379.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1379.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1379.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1379.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1379.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1379.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1379.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1379.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1379.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1420 = default;
                                                            itm1420 = reader.GetSingle();
                                                            itm1379.DistantLodData.Add(itm1420);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1379.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1379.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1421 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1421)
                                                            {
                                                                case "Position":
                                                                    itm1379.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1379.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1379.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1379.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1379.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1379.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1379.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1379.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1379.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1379.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1379.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1379.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1379.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm970 = itm1379;
                                        break;
                                    default:
                                        reader.Skip();
                                        break;
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.Temporary.Add(itm970);
                        }
                    }
                    break;
                case "TemporaryTimestamp":
                    retval.TemporaryTimestamp = reader.GetInt32();
                    break;
                case "TemporaryUnknownGroupData":
                    retval.TemporaryUnknownGroupData = reader.GetInt32();
                    break;
                case "Timestamp":
                    retval.Timestamp = reader.GetInt32();
                    break;
                case "UnknownGroupData":
                    retval.UnknownGroupData = reader.GetInt32();
                    break;
                case "Version2":
                    retval.Version2 = reader.GetUInt16();
                    break;
                case "VersionControl":
                    retval.VersionControl = reader.GetUInt32();
                    break;
                case "Water":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "WaterEnvironmentMap":
                    retval.WaterEnvironmentMap = reader.GetString();
                    break;
                case "WaterHeight":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.WaterHeight = reader.GetSingle();
                    }
                    break;
                case "WaterNoiseTexture":
                    retval.WaterNoiseTexture = reader.GetString();
                    break;
                case "WaterVelocity":
                    retval.WaterVelocity = new Mutagen.Bethesda.Skyrim.CellWaterVelocity();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop1422 = reader.GetString();
                            reader.Read();
                            switch(prop1422)
                            {
                                case "Offset":
                                    retval.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown":
                                    retval.WaterVelocity.Unknown = reader.GetInt32();
                                    break;
                                case "Angle":
                                    retval.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown2":
                                    retval.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "XWCN":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.XWCN = reader.GetBytesFromBase64();
                    }
                    break;
                case "XWCS":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.XWCS = reader.GetBytesFromBase64();
                    }
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }
        return retval;
    }
}
