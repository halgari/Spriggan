// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

public class ICellGetter_Converter : JsonConverter<ICellGetter>
{
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.ICellGetter)) && !t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Cell));
    }
    public override ICellGetter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer, ICellGetter value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WriteFormKeyHeader(value, options);
        
        // AcousticSpace
        writer.WritePropertyName("AcousticSpace");
        if (value.AcousticSpace.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.AcousticSpace.FormKey.ToString());
        
        // EditorID
        writer.WritePropertyName("EditorID");
        writer.WriteStringValue(value.EditorID);
        
        // EncounterZone
        writer.WritePropertyName("EncounterZone");
        if (value.EncounterZone.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.EncounterZone.FormKey.ToString());
        
        // Flags
        writer.WritePropertyName("Flags");
        writer.WriteFlags(value.Flags);
        
        // Grid
        writer.WritePropertyName("Grid");
        if (value.Grid != null)
        {
            writer.WriteStartObject();
            
            // Point
            writer.WritePropertyName("Point");
            writer.WriteP2Int(value.Grid.Point, options);
            
            // Flags
            writer.WritePropertyName("Flags");
            writer.WriteFlags(value.Grid.Flags);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // ImageSpace
        writer.WritePropertyName("ImageSpace");
        if (value.ImageSpace.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.ImageSpace.FormKey.ToString());
        
        // IsCompressed
        writer.WritePropertyName("IsCompressed");
        writer.WriteBooleanValue(value.IsCompressed);
        
        // IsDeleted
        writer.WritePropertyName("IsDeleted");
        writer.WriteBooleanValue(value.IsDeleted);
        
        // Landscape
        writer.WritePropertyName("Landscape");
        if (value.Landscape != null)
        {
            writer.WriteStartObject();
            
            // Flags
            writer.WritePropertyName("Flags");
            if (value.Landscape.Flags == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteFlags(value.Landscape.Flags.Value);
            }
            
            // VertexNormals
            writer.WritePropertyName("VertexNormals");
            writer.ReadOnlyArray2dWriter(value.Landscape.VertexNormals, itm =>
            {
                Noggog.P3UInt8 itm1 = default;
                writer.WriteP3UInt8(itm1, options);
            }
            );
            
            // VertexHeightMap
            writer.WritePropertyName("VertexHeightMap");
            if (value.Landscape.VertexHeightMap != null)
            {
                writer.WriteStartObject();
                
                // Offset
                writer.WritePropertyName("Offset");
                writer.WriteNumberValue(value.Landscape.VertexHeightMap.Offset);
                
                // HeightMap
                writer.WritePropertyName("HeightMap");
                writer.WriteBase64StringValue(value.Landscape.VertexHeightMap.HeightMap);
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteP3UInt8(value.Landscape.VertexHeightMap.Unknown, options);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // VertexColors
            writer.WritePropertyName("VertexColors");
            writer.ReadOnlyArray2dWriter(value.Landscape.VertexColors, itm =>
            {
                Noggog.P3UInt8 itm2 = default;
                writer.WriteP3UInt8(itm2, options);
            }
            );
            
            // Layers
            writer.WritePropertyName("Layers");
            if (value.Landscape.Layers != null)
            {
                writer.WriteStartArray();
                foreach(var itm3 in value.Landscape.Layers)
                {
                    if (itm3 != null)
                    {
                        writer.WriteStartObject();
                        switch (itm3)
                        {
                            case Mutagen.Bethesda.Skyrim.IAlphaLayerGetter itm4:
                                writer.WriteString("$type", "AlphaLayer");
                                
                                // AlphaLayerData
                                writer.WritePropertyName("AlphaLayerData");
                                if (itm4.AlphaLayerData == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm4.AlphaLayerData.Value);
                                }
                                
                                // Header
                                writer.WritePropertyName("Header");
                                if (itm4.Header != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Texture
                                    writer.WritePropertyName("Texture");
                                    writer.WriteStringValue(itm4.Header.Texture.FormKey.ToString());
                                    
                                    // Quadrant
                                    writer.WritePropertyName("Quadrant");
                                    writer.WriteEnum(itm4.Header.Quadrant);
                                    
                                    // Unused
                                    writer.WritePropertyName("Unused");
                                    writer.WriteNumberValue(itm4.Header.Unused);
                                    
                                    // LayerNumber
                                    writer.WritePropertyName("LayerNumber");
                                    writer.WriteNumberValue((uint)itm4.Header.LayerNumber);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                break;
                        }
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Textures
            writer.WritePropertyName("Textures");
            if (value.Landscape.Textures != null)
            {
                writer.WriteStartArray();
                foreach(var itm5 in value.Landscape.Textures)
                {
                    writer.WriteStringValue(itm5.FormKey.ToString());
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // FormVersion
            writer.WritePropertyName("FormVersion");
            writer.WriteNumberValue((uint)value.Landscape.FormVersion);
            
            // Version2
            writer.WritePropertyName("Version2");
            writer.WriteNumberValue((uint)value.Landscape.Version2);
            
            // IsCompressed
            writer.WritePropertyName("IsCompressed");
            writer.WriteBooleanValue(value.Landscape.IsCompressed);
            
            // IsDeleted
            writer.WritePropertyName("IsDeleted");
            writer.WriteBooleanValue(value.Landscape.IsDeleted);
            
            // MajorRecordFlagsRaw
            writer.WritePropertyName("MajorRecordFlagsRaw");
            writer.WriteNumberValue(value.Landscape.MajorRecordFlagsRaw);
            
            // VersionControl
            writer.WritePropertyName("VersionControl");
            writer.WriteNumberValue(value.Landscape.VersionControl);
            
            // EditorID
            writer.WritePropertyName("EditorID");
            writer.WriteStringValue(value.Landscape.EditorID);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Lighting
        writer.WritePropertyName("Lighting");
        if (value.Lighting != null)
        {
            writer.WriteStartObject();
            
            // Versioning
            writer.WritePropertyName("Versioning");
            writer.WriteFlags(value.Lighting.Versioning);
            
            // AmbientColor
            writer.WritePropertyName("AmbientColor");
            writer.WriteStringValue(value.Lighting.AmbientColor.Value.ToArgb().ToString("x8"));
            
            // DirectionalColor
            writer.WritePropertyName("DirectionalColor");
            writer.WriteStringValue(value.Lighting.DirectionalColor.Value.ToArgb().ToString("x8"));
            
            // FogNearColor
            writer.WritePropertyName("FogNearColor");
            writer.WriteStringValue(value.Lighting.FogNearColor.Value.ToArgb().ToString("x8"));
            
            // FogNear
            writer.WritePropertyName("FogNear");
            writer.WriteNumberValue(value.Lighting.FogNear);
            
            // FogFar
            writer.WritePropertyName("FogFar");
            writer.WriteNumberValue(value.Lighting.FogFar);
            
            // DirectionalRotationXY
            writer.WritePropertyName("DirectionalRotationXY");
            writer.WriteNumberValue(value.Lighting.DirectionalRotationXY);
            
            // DirectionalRotationZ
            writer.WritePropertyName("DirectionalRotationZ");
            writer.WriteNumberValue(value.Lighting.DirectionalRotationZ);
            
            // DirectionalFade
            writer.WritePropertyName("DirectionalFade");
            writer.WriteNumberValue(value.Lighting.DirectionalFade);
            
            // FogClipDistance
            writer.WritePropertyName("FogClipDistance");
            writer.WriteNumberValue(value.Lighting.FogClipDistance);
            
            // FogPower
            writer.WritePropertyName("FogPower");
            writer.WriteNumberValue(value.Lighting.FogPower);
            
            // AmbientColors
            writer.WritePropertyName("AmbientColors");
            if (value.Lighting.AmbientColors != null)
            {
                writer.WriteStartObject();
                
                // Versioning
                writer.WritePropertyName("Versioning");
                writer.WriteFlags(value.Lighting.AmbientColors.Versioning);
                
                // DirectionalXPlus
                writer.WritePropertyName("DirectionalXPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalXPlus.Value.ToArgb().ToString("x8"));
                
                // DirectionalXMinus
                writer.WritePropertyName("DirectionalXMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalXMinus.Value.ToArgb().ToString("x8"));
                
                // DirectionalYPlus
                writer.WritePropertyName("DirectionalYPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalYPlus.Value.ToArgb().ToString("x8"));
                
                // DirectionalYMinus
                writer.WritePropertyName("DirectionalYMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalYMinus.Value.ToArgb().ToString("x8"));
                
                // DirectionalZPlus
                writer.WritePropertyName("DirectionalZPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalZPlus.Value.ToArgb().ToString("x8"));
                
                // DirectionalZMinus
                writer.WritePropertyName("DirectionalZMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalZMinus.Value.ToArgb().ToString("x8"));
                
                // Specular
                writer.WritePropertyName("Specular");
                writer.WriteStringValue(value.Lighting.AmbientColors.Specular.Value.ToArgb().ToString("x8"));
                
                // Scale
                writer.WritePropertyName("Scale");
                writer.WriteNumberValue(value.Lighting.AmbientColors.Scale);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // FogFarColor
            writer.WritePropertyName("FogFarColor");
            writer.WriteStringValue(value.Lighting.FogFarColor.Value.ToArgb().ToString("x8"));
            
            // FogMax
            writer.WritePropertyName("FogMax");
            writer.WriteNumberValue(value.Lighting.FogMax);
            
            // LightFadeBegin
            writer.WritePropertyName("LightFadeBegin");
            writer.WriteNumberValue(value.Lighting.LightFadeBegin);
            
            // LightFadeEnd
            writer.WritePropertyName("LightFadeEnd");
            writer.WriteNumberValue(value.Lighting.LightFadeEnd);
            
            // Inherits
            writer.WritePropertyName("Inherits");
            writer.WriteFlags(value.Lighting.Inherits);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // LightingTemplate
        writer.WritePropertyName("LightingTemplate");
        writer.WriteStringValue(value.LightingTemplate.FormKey.ToString());
        
        // LNAM
        writer.WritePropertyName("LNAM");
        if (value.LNAM == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.LNAM.Value);
        }
        
        // Location
        writer.WritePropertyName("Location");
        if (value.Location.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Location.FormKey.ToString());
        
        // LockList
        writer.WritePropertyName("LockList");
        if (value.LockList.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.LockList.FormKey.ToString());
        
        // MajorFlags
        writer.WritePropertyName("MajorFlags");
        writer.WriteFlags(value.MajorFlags);
        
        // MajorRecordFlagsRaw
        writer.WritePropertyName("MajorRecordFlagsRaw");
        writer.WriteNumberValue(value.MajorRecordFlagsRaw);
        
        // MaxHeightData
        writer.WritePropertyName("MaxHeightData");
        if (value.MaxHeightData != null)
        {
            writer.WriteStartObject();
            
            // Offset
            writer.WritePropertyName("Offset");
            writer.WriteNumberValue(value.MaxHeightData.Offset);
            
            // HeightMap
            writer.WritePropertyName("HeightMap");
            writer.WriteBase64StringValue(value.MaxHeightData.HeightMap);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Music
        writer.WritePropertyName("Music");
        if (value.Music.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Music.FormKey.ToString());
        
        // Name
        writer.WritePropertyName("Name");
        writer.WriteTranslatedString(value.Name, options);
        
        // NavigationMeshes
        writer.WritePropertyName("NavigationMeshes");
        if (value.NavigationMeshes != null)
        {
            writer.WriteStartArray();
            foreach(var itm6 in value.NavigationMeshes)
            {
                if (itm6 != null)
                {
                    writer.WriteStartObject();
                    
                    // Data
                    writer.WritePropertyName("Data");
                    if (itm6.Data != null)
                    {
                        writer.WriteStartObject();
                        
                        // NavmeshVersion
                        writer.WritePropertyName("NavmeshVersion");
                        writer.WriteNumberValue(itm6.Data.NavmeshVersion);
                        
                        // Magic
                        writer.WritePropertyName("Magic");
                        writer.WriteNumberValue(itm6.Data.Magic);
                        
                        // Parent
                        writer.WritePropertyName("Parent");
                        if (itm6.Data.Parent != null)
                        {
                            writer.WriteStartObject();
                            switch (itm6.Data.Parent)
                            {
                                case Mutagen.Bethesda.Skyrim.IWorldspaceNavmeshParentGetter itm7:
                                    writer.WriteString("$type", "WorldspaceNavmeshParent");
                                    
                                    // Parent
                                    writer.WritePropertyName("Parent");
                                    writer.WriteStringValue(itm7.Parent.FormKey.ToString());
                                    
                                    // Coordinates
                                    writer.WritePropertyName("Coordinates");
                                    writer.WriteP2Int16(itm7.Coordinates, options);
                                    break;
                                case Mutagen.Bethesda.Skyrim.ICellNavmeshParentGetter itm8:
                                    writer.WriteString("$type", "CellNavmeshParent");
                                    
                                    // UnusedWorldspaceParent
                                    writer.WritePropertyName("UnusedWorldspaceParent");
                                    writer.WriteStringValue(itm8.UnusedWorldspaceParent.FormKey.ToString());
                                    
                                    // Parent
                                    writer.WritePropertyName("Parent");
                                    writer.WriteStringValue(itm8.Parent.FormKey.ToString());
                                    break;
                            }
                            writer.WriteEndObject();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // Vertices
                        writer.WritePropertyName("Vertices");
                        if (itm6.Data.Vertices != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm9 in itm6.Data.Vertices)
                            {
                                writer.WriteP3Float(itm9, options);
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // Triangles
                        writer.WritePropertyName("Triangles");
                        if (itm6.Data.Triangles != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm10 in itm6.Data.Triangles)
                            {
                                if (itm10 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Vertices
                                    writer.WritePropertyName("Vertices");
                                    writer.WriteP3Int16(itm10.Vertices, options);
                                    
                                    // EdgeLink_0_1
                                    writer.WritePropertyName("EdgeLink_0_1");
                                    writer.WriteNumberValue(itm10.EdgeLink_0_1);
                                    
                                    // EdgeLink_1_2
                                    writer.WritePropertyName("EdgeLink_1_2");
                                    writer.WriteNumberValue(itm10.EdgeLink_1_2);
                                    
                                    // EdgeLink_2_0
                                    writer.WritePropertyName("EdgeLink_2_0");
                                    writer.WriteNumberValue(itm10.EdgeLink_2_0);
                                    
                                    // Flags
                                    writer.WritePropertyName("Flags");
                                    writer.WriteFlags(itm10.Flags);
                                    
                                    // CoverFlags
                                    writer.WritePropertyName("CoverFlags");
                                    writer.WriteNumberValue((uint)itm10.CoverFlags);
                                    
                                    // IsCover
                                    writer.WritePropertyName("IsCover");
                                    writer.WriteBooleanValue(itm10.IsCover);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // EdgeLinks
                        writer.WritePropertyName("EdgeLinks");
                        if (itm6.Data.EdgeLinks != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm11 in itm6.Data.EdgeLinks)
                            {
                                if (itm11 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Unknown
                                    writer.WritePropertyName("Unknown");
                                    writer.WriteNumberValue(itm11.Unknown);
                                    
                                    // Mesh
                                    writer.WritePropertyName("Mesh");
                                    writer.WriteStringValue(itm11.Mesh.FormKey.ToString());
                                    
                                    // TriangleIndex
                                    writer.WritePropertyName("TriangleIndex");
                                    writer.WriteNumberValue(itm11.TriangleIndex);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // DoorTriangles
                        writer.WritePropertyName("DoorTriangles");
                        if (itm6.Data.DoorTriangles != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm12 in itm6.Data.DoorTriangles)
                            {
                                if (itm12 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // TriangleBeforeDoor
                                    writer.WritePropertyName("TriangleBeforeDoor");
                                    writer.WriteNumberValue(itm12.TriangleBeforeDoor);
                                    
                                    // Unknown
                                    writer.WritePropertyName("Unknown");
                                    writer.WriteNumberValue(itm12.Unknown);
                                    
                                    // Door
                                    writer.WritePropertyName("Door");
                                    writer.WriteStringValue(itm12.Door.FormKey.ToString());
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // NavmeshGridDivisor
                        writer.WritePropertyName("NavmeshGridDivisor");
                        writer.WriteNumberValue(itm6.Data.NavmeshGridDivisor);
                        
                        // MaxDistanceX
                        writer.WritePropertyName("MaxDistanceX");
                        writer.WriteNumberValue(itm6.Data.MaxDistanceX);
                        
                        // MaxDistanceY
                        writer.WritePropertyName("MaxDistanceY");
                        writer.WriteNumberValue(itm6.Data.MaxDistanceY);
                        
                        // Min
                        writer.WritePropertyName("Min");
                        writer.WriteP3Float(itm6.Data.Min, options);
                        
                        // Max
                        writer.WritePropertyName("Max");
                        writer.WriteP3Float(itm6.Data.Max, options);
                        
                        // NavmeshGrid
                        writer.WritePropertyName("NavmeshGrid");
                        writer.WriteBase64StringValue(itm6.Data.NavmeshGrid);
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                    
                    // ONAM
                    writer.WritePropertyName("ONAM");
                    if (itm6.ONAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm6.ONAM.Value);
                    }
                    
                    // PNAM
                    writer.WritePropertyName("PNAM");
                    if (itm6.PNAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm6.PNAM.Value);
                    }
                    
                    // NNAM
                    writer.WritePropertyName("NNAM");
                    if (itm6.NNAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm6.NNAM.Value);
                    }
                    
                    // MajorFlags
                    writer.WritePropertyName("MajorFlags");
                    writer.WriteFlags(itm6.MajorFlags);
                    
                    // FormVersion
                    writer.WritePropertyName("FormVersion");
                    writer.WriteNumberValue((uint)itm6.FormVersion);
                    
                    // Version2
                    writer.WritePropertyName("Version2");
                    writer.WriteNumberValue((uint)itm6.Version2);
                    
                    // IsCompressed
                    writer.WritePropertyName("IsCompressed");
                    writer.WriteBooleanValue(itm6.IsCompressed);
                    
                    // IsDeleted
                    writer.WritePropertyName("IsDeleted");
                    writer.WriteBooleanValue(itm6.IsDeleted);
                    
                    // MajorRecordFlagsRaw
                    writer.WritePropertyName("MajorRecordFlagsRaw");
                    writer.WriteNumberValue(itm6.MajorRecordFlagsRaw);
                    
                    // VersionControl
                    writer.WritePropertyName("VersionControl");
                    writer.WriteNumberValue(itm6.VersionControl);
                    
                    // EditorID
                    writer.WritePropertyName("EditorID");
                    writer.WriteStringValue(itm6.EditorID);
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // OcclusionData
        writer.WritePropertyName("OcclusionData");
        if (value.OcclusionData == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.OcclusionData.Value);
        }
        
        // Ownership
        writer.WritePropertyName("Ownership");
        if (value.Ownership != null)
        {
            writer.WriteStartObject();
            
            // Owner
            writer.WritePropertyName("Owner");
            if (value.Ownership.Owner.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.Ownership.Owner.FormKey.ToString());
            
            // FactionRank
            writer.WritePropertyName("FactionRank");
            if (value.Ownership.FactionRank == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.Ownership.FactionRank.Value);
            }
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Persistent
        writer.WritePropertyName("Persistent");
        if (value.Persistent != null)
        {
            writer.WriteStartArray();
            foreach(var itm13 in value.Persistent)
            {
                if (itm13 != null)
                {
                    writer.WriteStartObject();
                    switch (itm13)
                    {
                        case Mutagen.Bethesda.Skyrim.IPlacedNpcGetter itm14:
                            writer.WriteString("$type", "PlacedNpc");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm14.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm14.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm14.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm14.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm15 in itm14.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm15 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm15.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm15.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm15.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm16 in itm15.Properties)
                                                {
                                                    if (itm16 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm16)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm17:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm17.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm17.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm17.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm17.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm17.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm18:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm18.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm18.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm18.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm19:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm19.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm19.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm19.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm20:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm20.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm20.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm20.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm21:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm21.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm21.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm21.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm22:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm22.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm23 in itm22.Objects)
                                                                    {
                                                                        if (itm23 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm23.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm23.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm23.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm23.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm23.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm22.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm22.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm24:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm24.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm25 in itm24.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm25);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm24.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm24.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm26:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm26.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm27 in itm26.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm27);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm26.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm26.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm28:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm28.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm29 in itm28.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm29);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm28.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm28.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm30:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm30.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm31 in itm30.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm31);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm30.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm30.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm14.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.Base.FormKey.ToString());
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm14.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.EncounterZone.FormKey.ToString());
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm14.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm14.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm14.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm14.RagdollBipedData.Value);
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm14.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm14.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm14.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm14.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm14.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm14.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm14.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm14.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm32 in itm14.Patrol.Topics)
                                    {
                                        if (itm32 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm32)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm33:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm33.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm34:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm34.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm14.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm14.LevelModifier.Value);
                            }
                            
                            // MerchantContainer
                            writer.WritePropertyName("MerchantContainer");
                            if (itm14.MerchantContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.MerchantContainer.FormKey.ToString());
                            
                            // Count
                            writer.WritePropertyName("Count");
                            if (itm14.Count == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm14.Count.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm14.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm14.Radius.Value);
                            }
                            
                            // Health
                            writer.WritePropertyName("Health");
                            if (itm14.Health == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm14.Health.Value);
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm14.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm35 in itm14.LinkedReferences)
                                {
                                    if (itm35 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm35.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm35.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm35.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm14.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm14.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm14.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm36 in itm14.ActivateParents.Parents)
                                    {
                                        if (itm36 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm36.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm36.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferenceColor
                            writer.WritePropertyName("LinkedReferenceColor");
                            if (itm14.LinkedReferenceColor != null)
                            {
                                writer.WriteStartObject();
                                
                                // Start
                                writer.WritePropertyName("Start");
                                writer.WriteStringValue(itm14.LinkedReferenceColor.Start.Value.ToArgb().ToString("x8"));
                                
                                // End
                                writer.WritePropertyName("End");
                                writer.WriteStringValue(itm14.LinkedReferenceColor.End.Value.ToArgb().ToString("x8"));
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm14.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.PersistentLocation.FormKey.ToString());
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm14.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.LocationReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm14.IsIgnoredBySandbox);
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm14.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm37 in itm14.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm37.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm14.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm14.HeadTrackingWeight.Value);
                            }
                            
                            // Horse
                            writer.WritePropertyName("Horse");
                            if (itm14.Horse.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.Horse.FormKey.ToString());
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm14.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm14.FavorCost.Value);
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm14.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm14.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm14.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm14.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm14.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm14.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm14.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm14.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm14.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm14.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm14.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.Emittance.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm14.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm14.MultiboundReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox2
                            writer.WritePropertyName("IsIgnoredBySandbox2");
                            writer.WriteBooleanValue(itm14.IsIgnoredBySandbox2);
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm14.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm14.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm14.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm14.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm14.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm14.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm14.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm14.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm14.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm14.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm14.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm14.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm14.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedObjectGetter itm38:
                            writer.WriteString("$type", "PlacedObject");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm38.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm38.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm38.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm38.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm39 in itm38.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm39 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm39.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm39.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm39.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm40 in itm39.Properties)
                                                {
                                                    if (itm40 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm40)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm41:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm41.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm41.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm41.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm41.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm41.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm42:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm42.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm42.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm42.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm43:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm43.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm43.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm43.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm44:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm44.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm44.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm44.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm45:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm45.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm45.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm45.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm46:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm46.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm47 in itm46.Objects)
                                                                    {
                                                                        if (itm47 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm47.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm47.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm47.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm47.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm47.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm46.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm46.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm48:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm48.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm49 in itm48.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm49);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm48.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm48.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm50:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm50.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm51 in itm50.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm51);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm50.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm50.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm52:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm52.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm53 in itm52.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm53);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm52.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm52.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm54:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm54.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm55 in itm54.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm55);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm54.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm54.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm38.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.Base.FormKey.ToString());
                            
                            // BoundHalfExtents
                            writer.WritePropertyName("BoundHalfExtents");
                            if (itm38.BoundHalfExtents == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteP3Float(itm38.BoundHalfExtents, options);
                            }
                            
                            // Primitive
                            writer.WritePropertyName("Primitive");
                            if (itm38.Primitive != null)
                            {
                                writer.WriteStartObject();
                                
                                // Bounds
                                writer.WritePropertyName("Bounds");
                                writer.WriteP3Float(itm38.Primitive.Bounds, options);
                                
                                // Color
                                writer.WritePropertyName("Color");
                                writer.WriteStringValue(itm38.Primitive.Color.Value.ToArgb().ToString("x8"));
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm38.Primitive.Unknown);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm38.Primitive.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XORD
                            writer.WritePropertyName("XORD");
                            if (itm38.XORD == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.XORD.Value);
                            }
                            
                            // OcclusionPlane
                            writer.WritePropertyName("OcclusionPlane");
                            if (itm38.OcclusionPlane != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm38.OcclusionPlane.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm38.OcclusionPlane.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm38.OcclusionPlane.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm38.OcclusionPlane.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm38.OcclusionPlane.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm38.OcclusionPlane.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm38.OcclusionPlane.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Portals
                            writer.WritePropertyName("Portals");
                            if (itm38.Portals != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm56 in itm38.Portals)
                                {
                                    if (itm56 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Origin
                                        writer.WritePropertyName("Origin");
                                        writer.WriteStringValue(itm56.Origin.FormKey.ToString());
                                        
                                        // Destination
                                        writer.WritePropertyName("Destination");
                                        writer.WriteStringValue(itm56.Destination.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // RoomPortal
                            writer.WritePropertyName("RoomPortal");
                            if (itm38.RoomPortal != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm38.RoomPortal.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm38.RoomPortal.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm38.RoomPortal.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm38.RoomPortal.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm38.RoomPortal.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm38.RoomPortal.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm38.RoomPortal.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Unknown
                            writer.WritePropertyName("Unknown");
                            writer.WriteNumberValue(itm38.Unknown);
                            
                            // LightingTemplate
                            writer.WritePropertyName("LightingTemplate");
                            if (itm38.LightingTemplate.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.LightingTemplate.FormKey.ToString());
                            
                            // ImageSpace
                            writer.WritePropertyName("ImageSpace");
                            if (itm38.ImageSpace.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.ImageSpace.FormKey.ToString());
                            
                            // LinkedRooms
                            writer.WritePropertyName("LinkedRooms");
                            if (itm38.LinkedRooms != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm57 in itm38.LinkedRooms)
                                {
                                    writer.WriteStringValue(itm57.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsMultiBoundPrimitive
                            writer.WritePropertyName("IsMultiBoundPrimitive");
                            writer.WriteBooleanValue(itm38.IsMultiBoundPrimitive);
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm38.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm38.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.RagdollBipedData.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm38.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm38.Radius.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm38.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm58 in itm38.Reflections)
                                {
                                    if (itm58 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm58.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm58.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm58.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LitWater
                            writer.WritePropertyName("LitWater");
                            if (itm38.LitWater != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm59 in itm38.LitWater)
                                {
                                    writer.WriteStringValue(itm59.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm38.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.Emittance.FormKey.ToString());
                            
                            // LightData
                            writer.WritePropertyName("LightData");
                            if (itm38.LightData != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm38.LightData.Versioning);
                                
                                // FovOffset
                                writer.WritePropertyName("FovOffset");
                                writer.WriteNumberValue(itm38.LightData.FovOffset);
                                
                                // FadeOffset
                                writer.WritePropertyName("FadeOffset");
                                writer.WriteNumberValue(itm38.LightData.FadeOffset);
                                
                                // EndDistanceCap
                                writer.WritePropertyName("EndDistanceCap");
                                writer.WriteNumberValue(itm38.LightData.EndDistanceCap);
                                
                                // ShadowDepthBias
                                writer.WritePropertyName("ShadowDepthBias");
                                writer.WriteNumberValue(itm38.LightData.ShadowDepthBias);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm38.LightData.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Alpha
                            writer.WritePropertyName("Alpha");
                            if (itm38.Alpha != null)
                            {
                                writer.WriteStartObject();
                                
                                // Cutoff
                                writer.WritePropertyName("Cutoff");
                                writer.WriteNumberValue(itm38.Alpha.Cutoff);
                                
                                // Base
                                writer.WritePropertyName("Base");
                                writer.WriteNumberValue(itm38.Alpha.Base);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportDestination
                            writer.WritePropertyName("TeleportDestination");
                            if (itm38.TeleportDestination != null)
                            {
                                writer.WriteStartObject();
                                
                                // Door
                                writer.WritePropertyName("Door");
                                writer.WriteStringValue(itm38.TeleportDestination.Door.FormKey.ToString());
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm38.TeleportDestination.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm38.TeleportDestination.Rotation, options);
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm38.TeleportDestination.Flags);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportMessageBox
                            writer.WritePropertyName("TeleportMessageBox");
                            if (itm38.TeleportMessageBox.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.TeleportMessageBox.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm38.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.MultiboundReference.FormKey.ToString());
                            
                            // XWCN
                            writer.WritePropertyName("XWCN");
                            if (itm38.XWCN == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.XWCN.Value);
                            }
                            
                            // XWCS
                            writer.WritePropertyName("XWCS");
                            if (itm38.XWCS == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.XWCS.Value);
                            }
                            
                            // WaterVelocity
                            writer.WritePropertyName("WaterVelocity");
                            if (itm38.WaterVelocity != null)
                            {
                                writer.WriteStartObject();
                                
                                // Offset
                                writer.WritePropertyName("Offset");
                                writer.WriteP3Float(itm38.WaterVelocity.Offset, options);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm38.WaterVelocity.Unknown);
                                
                                // Angle
                                writer.WritePropertyName("Angle");
                                writer.WriteP3Float(itm38.WaterVelocity.Angle, options);
                                
                                // Unknown2
                                writer.WritePropertyName("Unknown2");
                                writer.WriteBase64StringValue(itm38.WaterVelocity.Unknown2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XCVL
                            writer.WritePropertyName("XCVL");
                            if (itm38.XCVL == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.XCVL.Value);
                            }
                            
                            // XCZR
                            writer.WritePropertyName("XCZR");
                            if (itm38.XCZR.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.XCZR.FormKey.ToString());
                            
                            // XCZA
                            writer.WritePropertyName("XCZA");
                            if (itm38.XCZA == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.XCZA.Value);
                            }
                            
                            // XCZC
                            writer.WritePropertyName("XCZC");
                            if (itm38.XCZC.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.XCZC.FormKey.ToString());
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm38.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm38.Scale.Value);
                            }
                            
                            // SpawnContainer
                            writer.WritePropertyName("SpawnContainer");
                            if (itm38.SpawnContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.SpawnContainer.FormKey.ToString());
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm38.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm38.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm38.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm60 in itm38.ActivateParents.Parents)
                                    {
                                        if (itm60 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm60.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm60.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LeveledItemBaseObject
                            writer.WritePropertyName("LeveledItemBaseObject");
                            if (itm38.LeveledItemBaseObject.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.LeveledItemBaseObject.FormKey.ToString());
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm38.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm38.LevelModifier.Value);
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm38.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.PersistentLocation.FormKey.ToString());
                            
                            // CollisionLayer
                            writer.WritePropertyName("CollisionLayer");
                            if (itm38.CollisionLayer == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm38.CollisionLayer.Value);
                            }
                            
                            // Lock
                            writer.WritePropertyName("Lock");
                            if (itm38.Lock != null)
                            {
                                writer.WriteStartObject();
                                
                                // Level
                                writer.WritePropertyName("Level");
                                writer.WriteEnum(itm38.Lock.Level);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteBase64StringValue(itm38.Lock.Unused);
                                
                                // Key
                                writer.WritePropertyName("Key");
                                writer.WriteStringValue(itm38.Lock.Key.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm38.Lock.Flags);
                                
                                // Unused2
                                writer.WritePropertyName("Unused2");
                                writer.WriteBase64StringValue(itm38.Lock.Unused2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm38.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.EncounterZone.FormKey.ToString());
                            
                            // NavigationDoorLink
                            writer.WritePropertyName("NavigationDoorLink");
                            if (itm38.NavigationDoorLink != null)
                            {
                                writer.WriteStartObject();
                                
                                // NavMesh
                                writer.WritePropertyName("NavMesh");
                                writer.WriteStringValue(itm38.NavigationDoorLink.NavMesh.FormKey.ToString());
                                
                                // TeleportMarkerTriangle
                                writer.WritePropertyName("TeleportMarkerTriangle");
                                writer.WriteNumberValue(itm38.NavigationDoorLink.TeleportMarkerTriangle);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteNumberValue(itm38.NavigationDoorLink.Unused);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm38.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm61 in itm38.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm61.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm38.IsIgnoredBySandbox);
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm38.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm38.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm38.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm38.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm38.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ItemCount
                            writer.WritePropertyName("ItemCount");
                            if (itm38.ItemCount == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm38.ItemCount.Value);
                            }
                            
                            // Charge
                            writer.WritePropertyName("Charge");
                            if (itm38.Charge == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm38.Charge.Value);
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm38.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.LocationReference.FormKey.ToString());
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm38.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm38.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm38.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm38.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm38.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm38.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm62 in itm38.LinkedReferences)
                                {
                                    if (itm62 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm62.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm62.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm62.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm38.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm38.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm38.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm38.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm38.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm38.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm38.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm38.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm63 in itm38.Patrol.Topics)
                                    {
                                        if (itm63 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm63)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm64:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm64.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm65:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm65.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Action
                            writer.WritePropertyName("Action");
                            if (itm38.Action == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm38.Action.Value);
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm38.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm38.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm38.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm38.FavorCost.Value);
                            }
                            
                            // IsOpenByDefault
                            writer.WritePropertyName("IsOpenByDefault");
                            writer.WriteBooleanValue(itm38.IsOpenByDefault);
                            
                            // MapMarker
                            writer.WritePropertyName("MapMarker");
                            if (itm38.MapMarker != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm38.MapMarker.Flags);
                                
                                // Name
                                writer.WritePropertyName("Name");
                                writer.WriteTranslatedString(itm38.MapMarker.Name, options);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm38.MapMarker.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // AttachRef
                            writer.WritePropertyName("AttachRef");
                            if (itm38.AttachRef.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm38.AttachRef.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm38.DistantLodData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm38.DistantLodData.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm38.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm38.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm38.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm38.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm38.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm38.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm38.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm38.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm38.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm38.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedArrowGetter itm66:
                            writer.WriteString("$type", "PlacedArrow");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm66.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm66.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm66.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm66.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm66.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm67 in itm66.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm67 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm67.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm67.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm67.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm68 in itm67.Properties)
                                                {
                                                    if (itm68 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm68)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm69:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm69.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm69.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm69.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm69.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm69.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm70:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm70.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm70.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm70.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm71:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm71.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm71.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm71.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm72:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm72.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm72.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm72.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm73:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm73.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm73.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm73.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm74:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm74.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm75 in itm74.Objects)
                                                                    {
                                                                        if (itm75 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm75.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm75.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm75.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm75.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm75.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm74.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm74.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm76:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm76.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm77 in itm76.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm77);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm76.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm76.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm78:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm78.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm79 in itm78.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm79);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm78.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm78.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm80:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm80.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm81 in itm80.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm81);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm80.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm80.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm82:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm82.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm83 in itm82.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm83);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm82.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm82.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm66.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm66.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm66.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm66.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm66.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm66.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm66.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm66.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm66.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm66.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm66.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm66.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm84 in itm66.Reflections)
                                {
                                    if (itm84 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm84.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm84.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm84.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm66.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm85 in itm66.LinkedReferences)
                                {
                                    if (itm85 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm85.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm85.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm85.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm66.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm66.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm66.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm86 in itm66.ActivateParents.Parents)
                                    {
                                        if (itm86 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm86.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm86.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm66.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm66.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm66.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm66.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm66.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm66.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm66.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm66.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm66.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm66.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm66.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm66.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm87 in itm66.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm87.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm66.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm66.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm66.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm88 in itm66.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm88);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm66.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm66.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm66.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm66.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm66.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm66.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm66.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm66.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm66.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm66.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm66.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm66.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm66.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBeamGetter itm89:
                            writer.WriteString("$type", "PlacedBeam");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm89.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm89.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm89.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm89.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm89.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm90 in itm89.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm90 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm90.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm90.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm90.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm91 in itm90.Properties)
                                                {
                                                    if (itm91 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm91)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm92:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm92.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm92.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm92.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm92.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm92.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm93:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm93.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm93.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm93.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm94:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm94.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm94.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm94.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm95:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm95.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm95.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm95.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm96:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm96.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm96.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm96.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm97:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm97.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm98 in itm97.Objects)
                                                                    {
                                                                        if (itm98 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm98.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm98.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm98.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm98.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm98.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm97.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm97.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm99:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm99.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm100 in itm99.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm100);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm99.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm99.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm101:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm101.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm102 in itm101.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm102);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm101.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm101.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm103:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm103.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm104 in itm103.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm104);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm103.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm103.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm105:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm105.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm106 in itm105.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm106);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm105.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm105.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm89.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm89.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm89.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm89.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm89.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm89.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm89.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm89.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm89.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm89.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm89.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm89.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm107 in itm89.Reflections)
                                {
                                    if (itm107 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm107.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm107.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm107.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm89.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm108 in itm89.LinkedReferences)
                                {
                                    if (itm108 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm108.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm108.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm108.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm89.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm89.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm89.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm109 in itm89.ActivateParents.Parents)
                                    {
                                        if (itm109 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm109.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm109.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm89.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm89.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm89.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm89.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm89.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm89.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm89.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm89.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm89.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm89.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm89.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm89.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm110 in itm89.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm110.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm89.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm89.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm89.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm111 in itm89.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm111);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm89.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm89.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm89.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm89.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm89.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm89.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm89.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm89.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm89.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm89.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm89.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm89.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm89.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedFlameGetter itm112:
                            writer.WriteString("$type", "PlacedFlame");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm112.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm112.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm112.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm112.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm112.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm113 in itm112.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm113 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm113.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm113.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm113.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm114 in itm113.Properties)
                                                {
                                                    if (itm114 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm114)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm115:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm115.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm115.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm115.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm115.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm115.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm116:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm116.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm116.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm116.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm117:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm117.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm117.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm117.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm118:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm118.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm118.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm118.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm119:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm119.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm119.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm119.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm120:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm120.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm121 in itm120.Objects)
                                                                    {
                                                                        if (itm121 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm121.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm121.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm121.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm121.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm121.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm120.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm120.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm122:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm122.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm123 in itm122.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm123);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm122.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm122.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm124:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm124.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm125 in itm124.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm125);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm124.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm124.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm126:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm126.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm127 in itm126.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm127);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm126.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm126.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm128:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm128.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm129 in itm128.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm129);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm128.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm128.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm112.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm112.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm112.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm112.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm112.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm112.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm112.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm112.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm112.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm112.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm112.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm112.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm130 in itm112.Reflections)
                                {
                                    if (itm130 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm130.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm130.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm130.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm112.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm131 in itm112.LinkedReferences)
                                {
                                    if (itm131 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm131.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm131.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm131.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm112.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm112.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm112.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm132 in itm112.ActivateParents.Parents)
                                    {
                                        if (itm132 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm132.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm132.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm112.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm112.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm112.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm112.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm112.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm112.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm112.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm112.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm112.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm112.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm112.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm112.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm133 in itm112.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm133.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm112.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm112.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm112.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm134 in itm112.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm134);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm112.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm112.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm112.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm112.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm112.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm112.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm112.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm112.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm112.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm112.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm112.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm112.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm112.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedConeGetter itm135:
                            writer.WriteString("$type", "PlacedCone");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm135.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm135.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm135.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm135.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm135.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm136 in itm135.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm136 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm136.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm136.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm136.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm137 in itm136.Properties)
                                                {
                                                    if (itm137 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm137)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm138:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm138.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm138.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm138.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm138.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm138.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm139:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm139.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm139.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm139.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm140:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm140.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm140.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm140.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm141:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm141.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm141.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm141.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm142:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm142.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm142.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm142.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm143:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm143.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm144 in itm143.Objects)
                                                                    {
                                                                        if (itm144 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm144.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm144.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm144.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm144.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm144.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm143.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm143.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm145:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm145.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm146 in itm145.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm146);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm145.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm145.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm147:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm147.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm148 in itm147.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm148);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm147.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm147.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm149:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm149.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm150 in itm149.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm150);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm149.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm149.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm151:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm151.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm152 in itm151.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm152);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm151.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm151.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm135.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm135.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm135.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm135.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm135.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm135.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm135.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm135.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm135.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm135.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm135.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm135.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm153 in itm135.Reflections)
                                {
                                    if (itm153 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm153.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm153.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm153.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm135.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm154 in itm135.LinkedReferences)
                                {
                                    if (itm154 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm154.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm154.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm154.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm135.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm135.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm135.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm155 in itm135.ActivateParents.Parents)
                                    {
                                        if (itm155 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm155.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm155.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm135.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm135.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm135.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm135.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm135.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm135.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm135.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm135.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm135.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm135.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm135.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm135.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm156 in itm135.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm156.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm135.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm135.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm135.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm157 in itm135.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm157);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm135.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm135.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm135.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm135.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm135.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm135.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm135.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm135.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm135.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm135.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm135.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm135.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm135.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBarrierGetter itm158:
                            writer.WriteString("$type", "PlacedBarrier");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm158.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm158.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm158.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm158.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm158.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm159 in itm158.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm159 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm159.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm159.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm159.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm160 in itm159.Properties)
                                                {
                                                    if (itm160 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm160)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm161:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm161.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm161.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm161.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm161.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm161.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm162:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm162.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm162.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm162.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm163:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm163.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm163.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm163.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm164:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm164.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm164.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm164.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm165:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm165.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm165.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm165.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm166:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm166.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm167 in itm166.Objects)
                                                                    {
                                                                        if (itm167 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm167.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm167.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm167.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm167.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm167.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm166.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm166.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm168:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm168.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm169 in itm168.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm169);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm168.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm168.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm170:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm170.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm171 in itm170.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm171);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm170.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm170.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm172:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm172.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm173 in itm172.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm173);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm172.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm172.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm174:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm174.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm175 in itm174.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm175);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm174.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm174.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm158.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm158.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm158.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm158.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm158.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm158.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm158.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm158.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm158.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm158.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm158.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm158.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm176 in itm158.Reflections)
                                {
                                    if (itm176 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm176.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm176.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm176.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm158.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm177 in itm158.LinkedReferences)
                                {
                                    if (itm177 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm177.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm177.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm177.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm158.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm158.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm158.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm178 in itm158.ActivateParents.Parents)
                                    {
                                        if (itm178 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm178.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm178.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm158.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm158.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm158.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm158.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm158.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm158.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm158.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm158.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm158.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm158.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm158.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm158.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm179 in itm158.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm179.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm158.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm158.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm158.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm180 in itm158.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm180);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm158.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm158.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm158.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm158.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm158.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm158.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm158.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm158.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm158.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm158.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm158.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm158.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm158.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedTrapGetter itm181:
                            writer.WriteString("$type", "PlacedTrap");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm181.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm181.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm181.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm181.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm181.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm182 in itm181.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm182 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm182.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm182.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm182.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm183 in itm182.Properties)
                                                {
                                                    if (itm183 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm183)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm184:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm184.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm184.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm184.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm184.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm184.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm185:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm185.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm185.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm185.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm186:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm186.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm186.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm186.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm187:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm187.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm187.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm187.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm188:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm188.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm188.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm188.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm189:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm189.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm190 in itm189.Objects)
                                                                    {
                                                                        if (itm190 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm190.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm190.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm190.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm190.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm190.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm189.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm189.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm191:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm191.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm192 in itm191.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm192);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm191.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm191.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm193:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm193.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm194 in itm193.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm194);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm193.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm193.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm195:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm195.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm196 in itm195.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm196);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm195.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm195.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm197:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm197.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm198 in itm197.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm198);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm197.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm197.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm181.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm181.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm181.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm181.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm181.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm181.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm181.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm181.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm181.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm181.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm181.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm181.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm199 in itm181.Reflections)
                                {
                                    if (itm199 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm199.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm199.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm199.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm181.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm200 in itm181.LinkedReferences)
                                {
                                    if (itm200 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm200.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm200.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm200.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm181.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm181.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm181.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm201 in itm181.ActivateParents.Parents)
                                    {
                                        if (itm201 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm201.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm201.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm181.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm181.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm181.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm181.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm181.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm181.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm181.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm181.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm181.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm181.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm181.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm181.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm202 in itm181.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm202.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm181.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm181.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm181.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm203 in itm181.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm203);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm181.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm181.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm181.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm181.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm181.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm181.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm181.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm181.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm181.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm181.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm181.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm181.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm181.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedHazardGetter itm204:
                            writer.WriteString("$type", "PlacedHazard");
                            
                            // Hazard
                            writer.WritePropertyName("Hazard");
                            writer.WriteStringValue(itm204.Hazard.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm204.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm204.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm204.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm204.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm205 in itm204.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm205 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm205.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm205.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm205.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm206 in itm205.Properties)
                                                {
                                                    if (itm206 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm206)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm207:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm207.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm207.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm207.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm207.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm207.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm208:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm208.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm208.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm208.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm209:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm209.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm209.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm209.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm210:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm210.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm210.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm210.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm211:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm211.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm211.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm211.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm212:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm212.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm213 in itm212.Objects)
                                                                    {
                                                                        if (itm213 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm213.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm213.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm213.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm213.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm213.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm212.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm212.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm214:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm214.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm215 in itm214.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm215);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm214.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm214.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm216:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm216.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm217 in itm216.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm217);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm216.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm216.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm218:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm218.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm219 in itm218.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm219);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm218.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm218.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm220:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm220.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm221 in itm220.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm221);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm220.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm220.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm204.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm204.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm204.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm204.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm204.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm204.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm204.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm204.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm204.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm204.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm204.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm204.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm222 in itm204.Reflections)
                                {
                                    if (itm222 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm222.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm222.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm222.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm204.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm223 in itm204.LinkedReferences)
                                {
                                    if (itm223 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm223.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm223.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm223.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm204.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm204.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm204.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm224 in itm204.ActivateParents.Parents)
                                    {
                                        if (itm224 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm224.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm224.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm204.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm204.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm204.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm204.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm204.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm204.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm204.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm204.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm204.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm204.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm204.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm204.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm225 in itm204.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm225.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm204.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm204.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm204.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm226 in itm204.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm226);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm204.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm204.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm204.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm204.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm204.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm204.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm204.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm204.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm204.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm204.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm204.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm204.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm204.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedMissileGetter itm227:
                            writer.WriteString("$type", "PlacedMissile");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm227.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm227.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm227.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm227.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm227.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm228 in itm227.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm228 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm228.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm228.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm228.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm229 in itm228.Properties)
                                                {
                                                    if (itm229 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm229)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm230:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm230.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm230.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm230.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm230.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm230.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm231:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm231.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm231.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm231.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm232:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm232.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm232.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm232.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm233:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm233.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm233.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm233.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm234:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm234.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm234.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm234.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm235:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm235.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm236 in itm235.Objects)
                                                                    {
                                                                        if (itm236 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm236.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm236.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm236.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm236.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm236.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm235.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm235.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm237:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm237.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm238 in itm237.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm238);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm237.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm237.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm239:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm239.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm240 in itm239.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm240);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm239.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm239.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm241:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm241.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm242 in itm241.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm242);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm241.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm241.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm243:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm243.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm244 in itm243.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm244);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm243.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm243.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm227.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm227.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm227.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm227.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm227.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm227.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm227.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm227.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm227.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm227.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm227.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm227.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm245 in itm227.Reflections)
                                {
                                    if (itm245 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm245.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm245.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm245.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm227.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm246 in itm227.LinkedReferences)
                                {
                                    if (itm246 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm246.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm246.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm246.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm227.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm227.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm227.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm247 in itm227.ActivateParents.Parents)
                                    {
                                        if (itm247 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm247.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm247.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm227.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm227.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm227.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm227.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm227.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm227.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm227.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm227.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm227.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm227.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm227.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm227.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm248 in itm227.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm248.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm227.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm227.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm227.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm249 in itm227.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm249);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm227.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm227.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm227.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm227.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm227.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm227.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm227.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm227.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm227.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm227.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm227.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm227.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm227.EditorID);
                            break;
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // PersistentTimestamp
        writer.WritePropertyName("PersistentTimestamp");
        writer.WriteNumberValue(value.PersistentTimestamp);
        
        // PersistentUnknownGroupData
        writer.WritePropertyName("PersistentUnknownGroupData");
        writer.WriteNumberValue(value.PersistentUnknownGroupData);
        
        // Regions
        writer.WritePropertyName("Regions");
        if (value.Regions != null)
        {
            writer.WriteStartArray();
            foreach(var itm250 in value.Regions)
            {
                writer.WriteStringValue(itm250.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // SkyAndWeatherFromRegion
        writer.WritePropertyName("SkyAndWeatherFromRegion");
        if (value.SkyAndWeatherFromRegion.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.SkyAndWeatherFromRegion.FormKey.ToString());
        
        // Temporary
        writer.WritePropertyName("Temporary");
        if (value.Temporary != null)
        {
            writer.WriteStartArray();
            foreach(var itm251 in value.Temporary)
            {
                if (itm251 != null)
                {
                    writer.WriteStartObject();
                    switch (itm251)
                    {
                        case Mutagen.Bethesda.Skyrim.IPlacedNpcGetter itm252:
                            writer.WriteString("$type", "PlacedNpc");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm252.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm252.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm252.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm252.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm253 in itm252.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm253 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm253.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm253.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm253.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm254 in itm253.Properties)
                                                {
                                                    if (itm254 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm254)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm255:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm255.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm255.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm255.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm255.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm255.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm256:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm256.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm256.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm256.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm257:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm257.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm257.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm257.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm258:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm258.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm258.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm258.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm259:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm259.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm259.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm259.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm260:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm260.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm261 in itm260.Objects)
                                                                    {
                                                                        if (itm261 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm261.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm261.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm261.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm261.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm261.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm260.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm260.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm262:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm262.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm263 in itm262.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm263);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm262.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm262.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm264:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm264.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm265 in itm264.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm265);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm264.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm264.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm266:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm266.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm267 in itm266.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm267);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm266.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm266.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm268:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm268.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm269 in itm268.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm269);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm268.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm268.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm252.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.Base.FormKey.ToString());
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm252.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.EncounterZone.FormKey.ToString());
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm252.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm252.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm252.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm252.RagdollBipedData.Value);
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm252.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm252.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm252.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm252.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm252.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm252.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm252.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm252.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm270 in itm252.Patrol.Topics)
                                    {
                                        if (itm270 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm270)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm271:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm271.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm272:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm272.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm252.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm252.LevelModifier.Value);
                            }
                            
                            // MerchantContainer
                            writer.WritePropertyName("MerchantContainer");
                            if (itm252.MerchantContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.MerchantContainer.FormKey.ToString());
                            
                            // Count
                            writer.WritePropertyName("Count");
                            if (itm252.Count == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm252.Count.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm252.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm252.Radius.Value);
                            }
                            
                            // Health
                            writer.WritePropertyName("Health");
                            if (itm252.Health == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm252.Health.Value);
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm252.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm273 in itm252.LinkedReferences)
                                {
                                    if (itm273 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm273.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm273.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm273.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm252.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm252.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm252.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm274 in itm252.ActivateParents.Parents)
                                    {
                                        if (itm274 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm274.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm274.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferenceColor
                            writer.WritePropertyName("LinkedReferenceColor");
                            if (itm252.LinkedReferenceColor != null)
                            {
                                writer.WriteStartObject();
                                
                                // Start
                                writer.WritePropertyName("Start");
                                writer.WriteStringValue(itm252.LinkedReferenceColor.Start.Value.ToArgb().ToString("x8"));
                                
                                // End
                                writer.WritePropertyName("End");
                                writer.WriteStringValue(itm252.LinkedReferenceColor.End.Value.ToArgb().ToString("x8"));
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm252.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.PersistentLocation.FormKey.ToString());
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm252.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.LocationReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm252.IsIgnoredBySandbox);
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm252.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm275 in itm252.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm275.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm252.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm252.HeadTrackingWeight.Value);
                            }
                            
                            // Horse
                            writer.WritePropertyName("Horse");
                            if (itm252.Horse.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.Horse.FormKey.ToString());
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm252.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm252.FavorCost.Value);
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm252.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm252.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm252.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm252.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm252.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm252.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm252.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm252.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm252.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm252.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm252.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.Emittance.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm252.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm252.MultiboundReference.FormKey.ToString());
                            
                            // IsIgnoredBySandbox2
                            writer.WritePropertyName("IsIgnoredBySandbox2");
                            writer.WriteBooleanValue(itm252.IsIgnoredBySandbox2);
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm252.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm252.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm252.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm252.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm252.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm252.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm252.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm252.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm252.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm252.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm252.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm252.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm252.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedObjectGetter itm276:
                            writer.WriteString("$type", "PlacedObject");
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm276.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm276.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm276.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm276.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm277 in itm276.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm277 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm277.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm277.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm277.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm278 in itm277.Properties)
                                                {
                                                    if (itm278 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm278)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm279:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm279.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm279.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm279.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm279.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm279.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm280:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm280.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm280.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm280.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm281:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm281.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm281.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm281.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm282:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm282.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm282.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm282.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm283:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm283.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm283.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm283.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm284:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm284.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm285 in itm284.Objects)
                                                                    {
                                                                        if (itm285 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm285.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm285.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm285.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm285.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm285.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm284.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm284.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm286:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm286.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm287 in itm286.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm287);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm286.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm286.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm288:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm288.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm289 in itm288.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm289);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm288.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm288.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm290:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm290.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm291 in itm290.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm291);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm290.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm290.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm292:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm292.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm293 in itm292.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm293);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm292.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm292.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Base
                            writer.WritePropertyName("Base");
                            if (itm276.Base.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.Base.FormKey.ToString());
                            
                            // BoundHalfExtents
                            writer.WritePropertyName("BoundHalfExtents");
                            if (itm276.BoundHalfExtents == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteP3Float(itm276.BoundHalfExtents, options);
                            }
                            
                            // Primitive
                            writer.WritePropertyName("Primitive");
                            if (itm276.Primitive != null)
                            {
                                writer.WriteStartObject();
                                
                                // Bounds
                                writer.WritePropertyName("Bounds");
                                writer.WriteP3Float(itm276.Primitive.Bounds, options);
                                
                                // Color
                                writer.WritePropertyName("Color");
                                writer.WriteStringValue(itm276.Primitive.Color.Value.ToArgb().ToString("x8"));
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm276.Primitive.Unknown);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm276.Primitive.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XORD
                            writer.WritePropertyName("XORD");
                            if (itm276.XORD == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.XORD.Value);
                            }
                            
                            // OcclusionPlane
                            writer.WritePropertyName("OcclusionPlane");
                            if (itm276.OcclusionPlane != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm276.OcclusionPlane.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm276.OcclusionPlane.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm276.OcclusionPlane.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm276.OcclusionPlane.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm276.OcclusionPlane.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm276.OcclusionPlane.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm276.OcclusionPlane.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Portals
                            writer.WritePropertyName("Portals");
                            if (itm276.Portals != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm294 in itm276.Portals)
                                {
                                    if (itm294 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Origin
                                        writer.WritePropertyName("Origin");
                                        writer.WriteStringValue(itm294.Origin.FormKey.ToString());
                                        
                                        // Destination
                                        writer.WritePropertyName("Destination");
                                        writer.WriteStringValue(itm294.Destination.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // RoomPortal
                            writer.WritePropertyName("RoomPortal");
                            if (itm276.RoomPortal != null)
                            {
                                writer.WriteStartObject();
                                
                                // Width
                                writer.WritePropertyName("Width");
                                writer.WriteNumberValue(itm276.RoomPortal.Width);
                                
                                // Height
                                writer.WritePropertyName("Height");
                                writer.WriteNumberValue(itm276.RoomPortal.Height);
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm276.RoomPortal.Position, options);
                                
                                // RotationQ1
                                writer.WritePropertyName("RotationQ1");
                                writer.WriteNumberValue(itm276.RoomPortal.RotationQ1);
                                
                                // RotationQ2
                                writer.WritePropertyName("RotationQ2");
                                writer.WriteNumberValue(itm276.RoomPortal.RotationQ2);
                                
                                // RotationQ3
                                writer.WritePropertyName("RotationQ3");
                                writer.WriteNumberValue(itm276.RoomPortal.RotationQ3);
                                
                                // RotationQ4
                                writer.WritePropertyName("RotationQ4");
                                writer.WriteNumberValue(itm276.RoomPortal.RotationQ4);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Unknown
                            writer.WritePropertyName("Unknown");
                            writer.WriteNumberValue(itm276.Unknown);
                            
                            // LightingTemplate
                            writer.WritePropertyName("LightingTemplate");
                            if (itm276.LightingTemplate.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.LightingTemplate.FormKey.ToString());
                            
                            // ImageSpace
                            writer.WritePropertyName("ImageSpace");
                            if (itm276.ImageSpace.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.ImageSpace.FormKey.ToString());
                            
                            // LinkedRooms
                            writer.WritePropertyName("LinkedRooms");
                            if (itm276.LinkedRooms != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm295 in itm276.LinkedRooms)
                                {
                                    writer.WriteStringValue(itm295.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsMultiBoundPrimitive
                            writer.WritePropertyName("IsMultiBoundPrimitive");
                            writer.WriteBooleanValue(itm276.IsMultiBoundPrimitive);
                            
                            // RagdollData
                            writer.WritePropertyName("RagdollData");
                            if (itm276.RagdollData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.RagdollData.Value);
                            }
                            
                            // RagdollBipedData
                            writer.WritePropertyName("RagdollBipedData");
                            if (itm276.RagdollBipedData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.RagdollBipedData.Value);
                            }
                            
                            // Radius
                            writer.WritePropertyName("Radius");
                            if (itm276.Radius == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm276.Radius.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm276.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm296 in itm276.Reflections)
                                {
                                    if (itm296 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm296.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm296.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm296.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LitWater
                            writer.WritePropertyName("LitWater");
                            if (itm276.LitWater != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm297 in itm276.LitWater)
                                {
                                    writer.WriteStringValue(itm297.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm276.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.Emittance.FormKey.ToString());
                            
                            // LightData
                            writer.WritePropertyName("LightData");
                            if (itm276.LightData != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm276.LightData.Versioning);
                                
                                // FovOffset
                                writer.WritePropertyName("FovOffset");
                                writer.WriteNumberValue(itm276.LightData.FovOffset);
                                
                                // FadeOffset
                                writer.WritePropertyName("FadeOffset");
                                writer.WriteNumberValue(itm276.LightData.FadeOffset);
                                
                                // EndDistanceCap
                                writer.WritePropertyName("EndDistanceCap");
                                writer.WriteNumberValue(itm276.LightData.EndDistanceCap);
                                
                                // ShadowDepthBias
                                writer.WritePropertyName("ShadowDepthBias");
                                writer.WriteNumberValue(itm276.LightData.ShadowDepthBias);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm276.LightData.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Alpha
                            writer.WritePropertyName("Alpha");
                            if (itm276.Alpha != null)
                            {
                                writer.WriteStartObject();
                                
                                // Cutoff
                                writer.WritePropertyName("Cutoff");
                                writer.WriteNumberValue(itm276.Alpha.Cutoff);
                                
                                // Base
                                writer.WritePropertyName("Base");
                                writer.WriteNumberValue(itm276.Alpha.Base);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportDestination
                            writer.WritePropertyName("TeleportDestination");
                            if (itm276.TeleportDestination != null)
                            {
                                writer.WriteStartObject();
                                
                                // Door
                                writer.WritePropertyName("Door");
                                writer.WriteStringValue(itm276.TeleportDestination.Door.FormKey.ToString());
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm276.TeleportDestination.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm276.TeleportDestination.Rotation, options);
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm276.TeleportDestination.Flags);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // TeleportMessageBox
                            writer.WritePropertyName("TeleportMessageBox");
                            if (itm276.TeleportMessageBox.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.TeleportMessageBox.FormKey.ToString());
                            
                            // MultiboundReference
                            writer.WritePropertyName("MultiboundReference");
                            if (itm276.MultiboundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.MultiboundReference.FormKey.ToString());
                            
                            // XWCN
                            writer.WritePropertyName("XWCN");
                            if (itm276.XWCN == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.XWCN.Value);
                            }
                            
                            // XWCS
                            writer.WritePropertyName("XWCS");
                            if (itm276.XWCS == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.XWCS.Value);
                            }
                            
                            // WaterVelocity
                            writer.WritePropertyName("WaterVelocity");
                            if (itm276.WaterVelocity != null)
                            {
                                writer.WriteStartObject();
                                
                                // Offset
                                writer.WritePropertyName("Offset");
                                writer.WriteP3Float(itm276.WaterVelocity.Offset, options);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteNumberValue(itm276.WaterVelocity.Unknown);
                                
                                // Angle
                                writer.WritePropertyName("Angle");
                                writer.WriteP3Float(itm276.WaterVelocity.Angle, options);
                                
                                // Unknown2
                                writer.WritePropertyName("Unknown2");
                                writer.WriteBase64StringValue(itm276.WaterVelocity.Unknown2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // XCVL
                            writer.WritePropertyName("XCVL");
                            if (itm276.XCVL == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.XCVL.Value);
                            }
                            
                            // XCZR
                            writer.WritePropertyName("XCZR");
                            if (itm276.XCZR.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.XCZR.FormKey.ToString());
                            
                            // XCZA
                            writer.WritePropertyName("XCZA");
                            if (itm276.XCZA == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.XCZA.Value);
                            }
                            
                            // XCZC
                            writer.WritePropertyName("XCZC");
                            if (itm276.XCZC.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.XCZC.FormKey.ToString());
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm276.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm276.Scale.Value);
                            }
                            
                            // SpawnContainer
                            writer.WritePropertyName("SpawnContainer");
                            if (itm276.SpawnContainer.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.SpawnContainer.FormKey.ToString());
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm276.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm276.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm276.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm298 in itm276.ActivateParents.Parents)
                                    {
                                        if (itm298 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm298.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm298.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LeveledItemBaseObject
                            writer.WritePropertyName("LeveledItemBaseObject");
                            if (itm276.LeveledItemBaseObject.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.LeveledItemBaseObject.FormKey.ToString());
                            
                            // LevelModifier
                            writer.WritePropertyName("LevelModifier");
                            if (itm276.LevelModifier == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm276.LevelModifier.Value);
                            }
                            
                            // PersistentLocation
                            writer.WritePropertyName("PersistentLocation");
                            if (itm276.PersistentLocation.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.PersistentLocation.FormKey.ToString());
                            
                            // CollisionLayer
                            writer.WritePropertyName("CollisionLayer");
                            if (itm276.CollisionLayer == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm276.CollisionLayer.Value);
                            }
                            
                            // Lock
                            writer.WritePropertyName("Lock");
                            if (itm276.Lock != null)
                            {
                                writer.WriteStartObject();
                                
                                // Level
                                writer.WritePropertyName("Level");
                                writer.WriteEnum(itm276.Lock.Level);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteBase64StringValue(itm276.Lock.Unused);
                                
                                // Key
                                writer.WritePropertyName("Key");
                                writer.WriteStringValue(itm276.Lock.Key.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm276.Lock.Flags);
                                
                                // Unused2
                                writer.WritePropertyName("Unused2");
                                writer.WriteBase64StringValue(itm276.Lock.Unused2);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm276.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.EncounterZone.FormKey.ToString());
                            
                            // NavigationDoorLink
                            writer.WritePropertyName("NavigationDoorLink");
                            if (itm276.NavigationDoorLink != null)
                            {
                                writer.WriteStartObject();
                                
                                // NavMesh
                                writer.WritePropertyName("NavMesh");
                                writer.WriteStringValue(itm276.NavigationDoorLink.NavMesh.FormKey.ToString());
                                
                                // TeleportMarkerTriangle
                                writer.WritePropertyName("TeleportMarkerTriangle");
                                writer.WriteNumberValue(itm276.NavigationDoorLink.TeleportMarkerTriangle);
                                
                                // Unused
                                writer.WritePropertyName("Unused");
                                writer.WriteNumberValue(itm276.NavigationDoorLink.Unused);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm276.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm299 in itm276.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm299.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // IsIgnoredBySandbox
                            writer.WritePropertyName("IsIgnoredBySandbox");
                            writer.WriteBooleanValue(itm276.IsIgnoredBySandbox);
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm276.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm276.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm276.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm276.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm276.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ItemCount
                            writer.WritePropertyName("ItemCount");
                            if (itm276.ItemCount == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm276.ItemCount.Value);
                            }
                            
                            // Charge
                            writer.WritePropertyName("Charge");
                            if (itm276.Charge == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm276.Charge.Value);
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm276.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.LocationReference.FormKey.ToString());
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm276.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm276.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm276.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm276.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm276.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm276.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm300 in itm276.LinkedReferences)
                                {
                                    if (itm300 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm300.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm300.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm300.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Patrol
                            writer.WritePropertyName("Patrol");
                            if (itm276.Patrol != null)
                            {
                                writer.WriteStartObject();
                                
                                // IdleTime
                                writer.WritePropertyName("IdleTime");
                                writer.WriteNumberValue(itm276.Patrol.IdleTime);
                                
                                // Idle
                                writer.WritePropertyName("Idle");
                                writer.WriteStringValue(itm276.Patrol.Idle.FormKey.ToString());
                                
                                // SCHR
                                writer.WritePropertyName("SCHR");
                                if (itm276.Patrol.SCHR == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm276.Patrol.SCHR.Value);
                                }
                                
                                // SCTX
                                writer.WritePropertyName("SCTX");
                                if (itm276.Patrol.SCTX == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteBase64StringValue(itm276.Patrol.SCTX.Value);
                                }
                                
                                // Topics
                                writer.WritePropertyName("Topics");
                                if (itm276.Patrol.Topics != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm301 in itm276.Patrol.Topics)
                                    {
                                        if (itm301 != null)
                                        {
                                            writer.WriteStartObject();
                                            switch (itm301)
                                            {
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceGetter itm302:
                                                    writer.WriteString("$type", "TopicReference");
                                                    
                                                    // Reference
                                                    writer.WritePropertyName("Reference");
                                                    writer.WriteStringValue(itm302.Reference.FormKey.ToString());
                                                    break;
                                                case Mutagen.Bethesda.Skyrim.ITopicReferenceSubtypeGetter itm303:
                                                    writer.WriteString("$type", "TopicReferenceSubtype");
                                                    
                                                    // Subtype
                                                    writer.WritePropertyName("Subtype");
                                                    writer.WriteString(itm303.Subtype.ToString(), options);
                                                    break;
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Action
                            writer.WritePropertyName("Action");
                            if (itm276.Action == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteEnum(itm276.Action.Value);
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm276.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm276.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm276.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm276.FavorCost.Value);
                            }
                            
                            // IsOpenByDefault
                            writer.WritePropertyName("IsOpenByDefault");
                            writer.WriteBooleanValue(itm276.IsOpenByDefault);
                            
                            // MapMarker
                            writer.WritePropertyName("MapMarker");
                            if (itm276.MapMarker != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm276.MapMarker.Flags);
                                
                                // Name
                                writer.WritePropertyName("Name");
                                writer.WriteTranslatedString(itm276.MapMarker.Name, options);
                                
                                // Type
                                writer.WritePropertyName("Type");
                                writer.WriteEnum(itm276.MapMarker.Type);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // AttachRef
                            writer.WritePropertyName("AttachRef");
                            if (itm276.AttachRef.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm276.AttachRef.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm276.DistantLodData == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm276.DistantLodData.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm276.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm276.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm276.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm276.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm276.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm276.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm276.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm276.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm276.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm276.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedArrowGetter itm304:
                            writer.WriteString("$type", "PlacedArrow");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm304.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm304.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm304.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm304.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm304.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm305 in itm304.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm305 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm305.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm305.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm305.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm306 in itm305.Properties)
                                                {
                                                    if (itm306 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm306)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm307:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm307.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm307.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm307.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm307.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm307.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm308:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm308.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm308.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm308.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm309:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm309.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm309.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm309.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm310:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm310.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm310.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm310.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm311:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm311.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm311.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm311.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm312:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm312.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm313 in itm312.Objects)
                                                                    {
                                                                        if (itm313 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm313.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm313.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm313.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm313.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm313.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm312.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm312.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm314:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm314.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm315 in itm314.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm315);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm314.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm314.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm316:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm316.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm317 in itm316.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm317);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm316.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm316.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm318:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm318.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm319 in itm318.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm319);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm318.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm318.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm320:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm320.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm321 in itm320.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm321);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm320.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm320.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm304.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm304.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm304.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm304.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm304.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm304.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm304.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm304.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm304.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm304.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm304.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm304.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm322 in itm304.Reflections)
                                {
                                    if (itm322 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm322.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm322.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm322.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm304.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm323 in itm304.LinkedReferences)
                                {
                                    if (itm323 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm323.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm323.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm323.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm304.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm304.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm304.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm324 in itm304.ActivateParents.Parents)
                                    {
                                        if (itm324 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm324.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm324.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm304.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm304.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm304.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm304.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm304.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm304.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm304.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm304.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm304.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm304.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm304.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm304.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm325 in itm304.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm325.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm304.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm304.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm304.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm326 in itm304.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm326);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm304.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm304.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm304.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm304.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm304.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm304.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm304.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm304.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm304.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm304.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm304.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm304.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm304.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBeamGetter itm327:
                            writer.WriteString("$type", "PlacedBeam");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm327.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm327.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm327.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm327.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm327.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm328 in itm327.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm328 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm328.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm328.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm328.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm329 in itm328.Properties)
                                                {
                                                    if (itm329 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm329)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm330:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm330.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm330.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm330.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm330.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm330.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm331:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm331.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm331.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm331.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm332:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm332.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm332.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm332.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm333:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm333.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm333.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm333.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm334:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm334.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm334.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm334.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm335:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm335.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm336 in itm335.Objects)
                                                                    {
                                                                        if (itm336 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm336.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm336.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm336.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm336.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm336.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm335.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm335.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm337:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm337.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm338 in itm337.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm338);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm337.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm337.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm339:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm339.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm340 in itm339.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm340);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm339.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm339.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm341:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm341.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm342 in itm341.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm342);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm341.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm341.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm343:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm343.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm344 in itm343.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm344);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm343.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm343.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm327.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm327.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm327.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm327.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm327.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm327.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm327.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm327.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm327.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm327.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm327.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm327.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm345 in itm327.Reflections)
                                {
                                    if (itm345 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm345.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm345.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm345.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm327.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm346 in itm327.LinkedReferences)
                                {
                                    if (itm346 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm346.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm346.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm346.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm327.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm327.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm327.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm347 in itm327.ActivateParents.Parents)
                                    {
                                        if (itm347 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm347.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm347.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm327.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm327.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm327.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm327.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm327.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm327.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm327.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm327.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm327.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm327.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm327.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm327.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm348 in itm327.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm348.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm327.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm327.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm327.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm349 in itm327.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm349);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm327.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm327.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm327.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm327.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm327.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm327.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm327.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm327.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm327.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm327.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm327.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm327.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm327.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedFlameGetter itm350:
                            writer.WriteString("$type", "PlacedFlame");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm350.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm350.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm350.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm350.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm350.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm351 in itm350.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm351 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm351.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm351.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm351.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm352 in itm351.Properties)
                                                {
                                                    if (itm352 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm352)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm353:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm353.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm353.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm353.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm353.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm353.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm354:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm354.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm354.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm354.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm355:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm355.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm355.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm355.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm356:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm356.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm356.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm356.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm357:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm357.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm357.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm357.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm358:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm358.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm359 in itm358.Objects)
                                                                    {
                                                                        if (itm359 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm359.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm359.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm359.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm359.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm359.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm358.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm358.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm360:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm360.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm361 in itm360.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm361);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm360.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm360.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm362:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm362.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm363 in itm362.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm363);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm362.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm362.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm364:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm364.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm365 in itm364.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm365);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm364.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm364.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm366:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm366.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm367 in itm366.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm367);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm366.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm366.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm350.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm350.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm350.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm350.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm350.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm350.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm350.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm350.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm350.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm350.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm350.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm350.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm368 in itm350.Reflections)
                                {
                                    if (itm368 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm368.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm368.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm368.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm350.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm369 in itm350.LinkedReferences)
                                {
                                    if (itm369 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm369.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm369.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm369.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm350.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm350.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm350.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm370 in itm350.ActivateParents.Parents)
                                    {
                                        if (itm370 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm370.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm370.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm350.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm350.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm350.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm350.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm350.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm350.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm350.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm350.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm350.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm350.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm350.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm350.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm371 in itm350.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm371.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm350.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm350.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm350.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm372 in itm350.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm372);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm350.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm350.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm350.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm350.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm350.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm350.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm350.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm350.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm350.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm350.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm350.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm350.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm350.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedConeGetter itm373:
                            writer.WriteString("$type", "PlacedCone");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm373.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm373.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm373.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm373.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm373.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm374 in itm373.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm374 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm374.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm374.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm374.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm375 in itm374.Properties)
                                                {
                                                    if (itm375 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm375)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm376:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm376.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm376.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm376.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm376.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm376.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm377:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm377.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm377.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm377.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm378:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm378.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm378.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm378.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm379:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm379.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm379.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm379.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm380:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm380.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm380.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm380.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm381:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm381.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm382 in itm381.Objects)
                                                                    {
                                                                        if (itm382 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm382.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm382.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm382.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm382.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm382.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm381.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm381.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm383:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm383.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm384 in itm383.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm384);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm383.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm383.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm385:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm385.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm386 in itm385.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm386);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm385.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm385.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm387:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm387.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm388 in itm387.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm388);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm387.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm387.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm389:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm389.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm390 in itm389.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm390);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm389.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm389.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm373.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm373.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm373.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm373.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm373.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm373.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm373.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm373.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm373.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm373.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm373.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm373.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm391 in itm373.Reflections)
                                {
                                    if (itm391 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm391.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm391.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm391.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm373.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm392 in itm373.LinkedReferences)
                                {
                                    if (itm392 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm392.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm392.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm392.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm373.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm373.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm373.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm393 in itm373.ActivateParents.Parents)
                                    {
                                        if (itm393 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm393.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm393.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm373.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm373.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm373.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm373.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm373.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm373.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm373.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm373.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm373.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm373.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm373.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm373.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm394 in itm373.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm394.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm373.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm373.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm373.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm395 in itm373.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm395);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm373.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm373.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm373.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm373.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm373.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm373.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm373.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm373.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm373.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm373.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm373.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm373.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm373.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedBarrierGetter itm396:
                            writer.WriteString("$type", "PlacedBarrier");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm396.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm396.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm396.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm396.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm396.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm397 in itm396.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm397 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm397.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm397.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm397.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm398 in itm397.Properties)
                                                {
                                                    if (itm398 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm398)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm399:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm399.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm399.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm399.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm399.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm399.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm400:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm400.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm400.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm400.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm401:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm401.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm401.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm401.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm402:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm402.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm402.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm402.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm403:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm403.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm403.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm403.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm404:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm404.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm405 in itm404.Objects)
                                                                    {
                                                                        if (itm405 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm405.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm405.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm405.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm405.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm405.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm404.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm404.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm406:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm406.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm407 in itm406.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm407);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm406.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm406.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm408:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm408.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm409 in itm408.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm409);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm408.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm408.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm410:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm410.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm411 in itm410.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm411);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm410.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm410.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm412:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm412.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm413 in itm412.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm413);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm412.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm412.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm396.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm396.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm396.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm396.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm396.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm396.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm396.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm396.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm396.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm396.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm396.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm396.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm414 in itm396.Reflections)
                                {
                                    if (itm414 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm414.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm414.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm414.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm396.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm415 in itm396.LinkedReferences)
                                {
                                    if (itm415 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm415.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm415.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm415.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm396.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm396.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm396.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm416 in itm396.ActivateParents.Parents)
                                    {
                                        if (itm416 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm416.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm416.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm396.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm396.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm396.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm396.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm396.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm396.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm396.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm396.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm396.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm396.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm396.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm396.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm417 in itm396.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm417.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm396.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm396.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm396.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm418 in itm396.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm418);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm396.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm396.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm396.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm396.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm396.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm396.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm396.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm396.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm396.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm396.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm396.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm396.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm396.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedTrapGetter itm419:
                            writer.WriteString("$type", "PlacedTrap");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm419.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm419.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm419.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm419.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm419.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm420 in itm419.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm420 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm420.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm420.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm420.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm421 in itm420.Properties)
                                                {
                                                    if (itm421 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm421)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm422:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm422.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm422.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm422.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm422.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm422.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm423:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm423.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm423.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm423.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm424:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm424.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm424.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm424.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm425:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm425.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm425.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm425.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm426:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm426.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm426.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm426.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm427:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm427.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm428 in itm427.Objects)
                                                                    {
                                                                        if (itm428 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm428.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm428.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm428.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm428.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm428.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm427.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm427.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm429:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm429.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm430 in itm429.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm430);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm429.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm429.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm431:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm431.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm432 in itm431.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm432);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm431.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm431.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm433:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm433.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm434 in itm433.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm434);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm433.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm433.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm435:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm435.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm436 in itm435.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm436);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm435.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm435.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm419.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm419.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm419.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm419.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm419.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm419.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm419.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm419.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm419.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm419.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm419.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm419.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm437 in itm419.Reflections)
                                {
                                    if (itm437 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm437.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm437.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm437.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm419.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm438 in itm419.LinkedReferences)
                                {
                                    if (itm438 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm438.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm438.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm438.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm419.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm419.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm419.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm439 in itm419.ActivateParents.Parents)
                                    {
                                        if (itm439 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm439.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm439.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm419.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm419.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm419.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm419.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm419.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm419.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm419.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm419.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm419.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm419.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm419.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm419.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm440 in itm419.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm440.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm419.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm419.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm419.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm441 in itm419.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm441);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm419.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm419.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm419.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm419.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm419.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm419.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm419.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm419.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm419.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm419.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm419.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm419.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm419.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedHazardGetter itm442:
                            writer.WriteString("$type", "PlacedHazard");
                            
                            // Hazard
                            writer.WritePropertyName("Hazard");
                            writer.WriteStringValue(itm442.Hazard.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm442.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm442.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm442.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm442.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm443 in itm442.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm443 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm443.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm443.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm443.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm444 in itm443.Properties)
                                                {
                                                    if (itm444 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm444)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm445:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm445.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm445.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm445.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm445.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm445.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm446:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm446.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm446.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm446.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm447:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm447.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm447.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm447.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm448:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm448.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm448.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm448.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm449:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm449.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm449.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm449.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm450:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm450.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm451 in itm450.Objects)
                                                                    {
                                                                        if (itm451 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm451.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm451.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm451.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm451.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm451.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm450.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm450.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm452:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm452.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm453 in itm452.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm453);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm452.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm452.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm454:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm454.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm455 in itm454.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm455);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm454.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm454.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm456:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm456.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm457 in itm456.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm457);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm456.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm456.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm458:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm458.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm459 in itm458.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm459);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm458.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm458.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm442.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm442.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm442.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm442.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm442.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm442.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm442.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm442.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm442.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm442.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm442.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm442.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm460 in itm442.Reflections)
                                {
                                    if (itm460 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm460.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm460.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm460.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm442.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm461 in itm442.LinkedReferences)
                                {
                                    if (itm461 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm461.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm461.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm461.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm442.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm442.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm442.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm462 in itm442.ActivateParents.Parents)
                                    {
                                        if (itm462 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm462.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm462.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm442.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm442.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm442.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm442.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm442.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm442.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm442.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm442.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm442.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm442.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm442.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm442.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm463 in itm442.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm463.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm442.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm442.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm442.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm464 in itm442.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm464);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm442.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm442.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm442.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm442.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm442.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm442.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm442.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm442.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm442.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm442.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm442.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm442.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm442.EditorID);
                            break;
                        case Mutagen.Bethesda.Skyrim.IPlacedMissileGetter itm465:
                            writer.WriteString("$type", "PlacedMissile");
                            
                            // Projectile
                            writer.WritePropertyName("Projectile");
                            writer.WriteStringValue(itm465.Projectile.FormKey.ToString());
                            
                            // VirtualMachineAdapter
                            writer.WritePropertyName("VirtualMachineAdapter");
                            if (itm465.VirtualMachineAdapter != null)
                            {
                                writer.WriteStartObject();
                                
                                // Version
                                writer.WritePropertyName("Version");
                                writer.WriteNumberValue(itm465.VirtualMachineAdapter.Version);
                                
                                // ObjectFormat
                                writer.WritePropertyName("ObjectFormat");
                                writer.WriteNumberValue((uint)itm465.VirtualMachineAdapter.ObjectFormat);
                                
                                // Scripts
                                writer.WritePropertyName("Scripts");
                                if (itm465.VirtualMachineAdapter.Scripts != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm466 in itm465.VirtualMachineAdapter.Scripts)
                                    {
                                        if (itm466 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Name
                                            writer.WritePropertyName("Name");
                                            writer.WriteStringValue(itm466.Name);
                                            
                                            // Flags
                                            writer.WritePropertyName("Flags");
                                            writer.WriteEnum(itm466.Flags);
                                            
                                            // Properties
                                            writer.WritePropertyName("Properties");
                                            if (itm466.Properties != null)
                                            {
                                                writer.WriteStartArray();
                                                foreach(var itm467 in itm466.Properties)
                                                {
                                                    if (itm467 != null)
                                                    {
                                                        writer.WriteStartObject();
                                                        switch (itm467)
                                                        {
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectPropertyGetter itm468:
                                                                writer.WriteString("$type", "ScriptObjectProperty");
                                                                
                                                                // Object
                                                                writer.WritePropertyName("Object");
                                                                writer.WriteStringValue(itm468.Object.FormKey.ToString());
                                                                
                                                                // Alias
                                                                writer.WritePropertyName("Alias");
                                                                writer.WriteNumberValue(itm468.Alias);
                                                                
                                                                // Unused
                                                                writer.WritePropertyName("Unused");
                                                                writer.WriteNumberValue((uint)itm468.Unused);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm468.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm468.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringPropertyGetter itm469:
                                                                writer.WriteString("$type", "ScriptStringProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteStringValue(itm469.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm469.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm469.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntPropertyGetter itm470:
                                                                writer.WriteString("$type", "ScriptIntProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm470.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm470.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm470.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatPropertyGetter itm471:
                                                                writer.WriteString("$type", "ScriptFloatProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteNumberValue(itm471.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm471.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm471.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolPropertyGetter itm472:
                                                                writer.WriteString("$type", "ScriptBoolProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                writer.WriteBooleanValue(itm472.Data);
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm472.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm472.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptObjectListPropertyGetter itm473:
                                                                writer.WriteString("$type", "ScriptObjectListProperty");
                                                                
                                                                // Objects
                                                                writer.WritePropertyName("Objects");
                                                                if (itm473.Objects != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm474 in itm473.Objects)
                                                                    {
                                                                        if (itm474 != null)
                                                                        {
                                                                            writer.WriteStartObject();
                                                                            
                                                                            // Object
                                                                            writer.WritePropertyName("Object");
                                                                            writer.WriteStringValue(itm474.Object.FormKey.ToString());
                                                                            
                                                                            // Alias
                                                                            writer.WritePropertyName("Alias");
                                                                            writer.WriteNumberValue(itm474.Alias);
                                                                            
                                                                            // Unused
                                                                            writer.WritePropertyName("Unused");
                                                                            writer.WriteNumberValue((uint)itm474.Unused);
                                                                            
                                                                            // Name
                                                                            writer.WritePropertyName("Name");
                                                                            writer.WriteStringValue(itm474.Name);
                                                                            
                                                                            // Flags
                                                                            writer.WritePropertyName("Flags");
                                                                            writer.WriteEnum(itm474.Flags);
                                                                            writer.WriteEndObject();
                                                                        }
                                                                        else
                                                                        {
                                                                            writer.WriteNullValue();
                                                                        }
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm473.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm473.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptIntListPropertyGetter itm475:
                                                                writer.WriteString("$type", "ScriptIntListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm475.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm476 in itm475.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm476);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm475.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm475.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptFloatListPropertyGetter itm477:
                                                                writer.WriteString("$type", "ScriptFloatListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm477.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm478 in itm477.Data)
                                                                    {
                                                                        writer.WriteNumberValue(itm478);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm477.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm477.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptBoolListPropertyGetter itm479:
                                                                writer.WriteString("$type", "ScriptBoolListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm479.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm480 in itm479.Data)
                                                                    {
                                                                        writer.WriteBooleanValue(itm480);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm479.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm479.Flags);
                                                                break;
                                                            case Mutagen.Bethesda.Skyrim.IScriptStringListPropertyGetter itm481:
                                                                writer.WriteString("$type", "ScriptStringListProperty");
                                                                
                                                                // Data
                                                                writer.WritePropertyName("Data");
                                                                if (itm481.Data != null)
                                                                {
                                                                    writer.WriteStartArray();
                                                                    foreach(var itm482 in itm481.Data)
                                                                    {
                                                                        writer.WriteStringValue(itm482);
                                                                    }
                                                                    writer.WriteEndArray();
                                                                }
                                                                else
                                                                {
                                                                    writer.WriteNullValue();
                                                                }
                                                                
                                                                // Name
                                                                writer.WritePropertyName("Name");
                                                                writer.WriteStringValue(itm481.Name);
                                                                
                                                                // Flags
                                                                writer.WritePropertyName("Flags");
                                                                writer.WriteEnum(itm481.Flags);
                                                                break;
                                                        }
                                                        writer.WriteEndObject();
                                                    }
                                                    else
                                                    {
                                                        writer.WriteNullValue();
                                                    }
                                                }
                                                writer.WriteEndArray();
                                            }
                                            else
                                            {
                                                writer.WriteNullValue();
                                            }
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EncounterZone
                            writer.WritePropertyName("EncounterZone");
                            if (itm465.EncounterZone.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm465.EncounterZone.FormKey.ToString());
                            
                            // Ownership
                            writer.WritePropertyName("Ownership");
                            if (itm465.Ownership != null)
                            {
                                writer.WriteStartObject();
                                
                                // Owner
                                writer.WritePropertyName("Owner");
                                if (itm465.Ownership.Owner.IsNull)
                                    writer.WriteNullValue();
                                else
                                    writer.WriteStringValue(itm465.Ownership.Owner.FormKey.ToString());
                                
                                // FactionRank
                                writer.WritePropertyName("FactionRank");
                                if (itm465.Ownership.FactionRank == null)
                                    writer.WriteNullValue();
                                else
                                {
                                    writer.WriteNumberValue(itm465.Ownership.FactionRank.Value);
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // HeadTrackingWeight
                            writer.WritePropertyName("HeadTrackingWeight");
                            if (itm465.HeadTrackingWeight == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm465.HeadTrackingWeight.Value);
                            }
                            
                            // FavorCost
                            writer.WritePropertyName("FavorCost");
                            if (itm465.FavorCost == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm465.FavorCost.Value);
                            }
                            
                            // Reflections
                            writer.WritePropertyName("Reflections");
                            if (itm465.Reflections != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm483 in itm465.Reflections)
                                {
                                    if (itm483 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm483.Versioning);
                                        
                                        // Water
                                        writer.WritePropertyName("Water");
                                        writer.WriteStringValue(itm483.Water.FormKey.ToString());
                                        
                                        // Type
                                        writer.WritePropertyName("Type");
                                        writer.WriteFlags(itm483.Type);
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LinkedReferences
                            writer.WritePropertyName("LinkedReferences");
                            if (itm465.LinkedReferences != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm484 in itm465.LinkedReferences)
                                {
                                    if (itm484 != null)
                                    {
                                        writer.WriteStartObject();
                                        
                                        // Versioning
                                        writer.WritePropertyName("Versioning");
                                        writer.WriteFlags(itm484.Versioning);
                                        
                                        // KeywordOrReference
                                        writer.WritePropertyName("KeywordOrReference");
                                        writer.WriteStringValue(itm484.KeywordOrReference.FormKey.ToString());
                                        
                                        // Reference
                                        writer.WritePropertyName("Reference");
                                        writer.WriteStringValue(itm484.Reference.FormKey.ToString());
                                        writer.WriteEndObject();
                                    }
                                    else
                                    {
                                        writer.WriteNullValue();
                                    }
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // ActivateParents
                            writer.WritePropertyName("ActivateParents");
                            if (itm465.ActivateParents != null)
                            {
                                writer.WriteStartObject();
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm465.ActivateParents.Flags);
                                
                                // Parents
                                writer.WritePropertyName("Parents");
                                if (itm465.ActivateParents.Parents != null)
                                {
                                    writer.WriteStartArray();
                                    foreach(var itm485 in itm465.ActivateParents.Parents)
                                    {
                                        if (itm485 != null)
                                        {
                                            writer.WriteStartObject();
                                            
                                            // Reference
                                            writer.WritePropertyName("Reference");
                                            writer.WriteStringValue(itm485.Reference.FormKey.ToString());
                                            
                                            // Delay
                                            writer.WritePropertyName("Delay");
                                            writer.WriteNumberValue(itm485.Delay);
                                            writer.WriteEndObject();
                                        }
                                        else
                                        {
                                            writer.WriteNullValue();
                                        }
                                    }
                                    writer.WriteEndArray();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // EnableParent
                            writer.WritePropertyName("EnableParent");
                            if (itm465.EnableParent != null)
                            {
                                writer.WriteStartObject();
                                
                                // Versioning
                                writer.WritePropertyName("Versioning");
                                writer.WriteFlags(itm465.EnableParent.Versioning);
                                
                                // Reference
                                writer.WritePropertyName("Reference");
                                writer.WriteStringValue(itm465.EnableParent.Reference.FormKey.ToString());
                                
                                // Flags
                                writer.WritePropertyName("Flags");
                                writer.WriteFlags(itm465.EnableParent.Flags);
                                
                                // Unknown
                                writer.WritePropertyName("Unknown");
                                writer.WriteBase64StringValue(itm465.EnableParent.Unknown);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Emittance
                            writer.WritePropertyName("Emittance");
                            if (itm465.Emittance.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm465.Emittance.FormKey.ToString());
                            
                            // MultiBoundReference
                            writer.WritePropertyName("MultiBoundReference");
                            if (itm465.MultiBoundReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm465.MultiBoundReference.FormKey.ToString());
                            
                            // IgnoredBySandbox
                            writer.WritePropertyName("IgnoredBySandbox");
                            if (itm465.IgnoredBySandbox == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteBase64StringValue(itm465.IgnoredBySandbox.Value);
                            }
                            
                            // LocationRefTypes
                            writer.WritePropertyName("LocationRefTypes");
                            if (itm465.LocationRefTypes != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm486 in itm465.LocationRefTypes)
                                {
                                    writer.WriteStringValue(itm486.FormKey.ToString());
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // LocationReference
                            writer.WritePropertyName("LocationReference");
                            if (itm465.LocationReference.IsNull)
                                writer.WriteNullValue();
                            else
                                writer.WriteStringValue(itm465.LocationReference.FormKey.ToString());
                            
                            // DistantLodData
                            writer.WritePropertyName("DistantLodData");
                            if (itm465.DistantLodData != null)
                            {
                                writer.WriteStartArray();
                                foreach(var itm487 in itm465.DistantLodData)
                                {
                                    writer.WriteNumberValue(itm487);
                                }
                                writer.WriteEndArray();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // Scale
                            writer.WritePropertyName("Scale");
                            if (itm465.Scale == null)
                                writer.WriteNullValue();
                            else
                            {
                                writer.WriteNumberValue(itm465.Scale.Value);
                            }
                            
                            // Placement
                            writer.WritePropertyName("Placement");
                            if (itm465.Placement != null)
                            {
                                writer.WriteStartObject();
                                
                                // Position
                                writer.WritePropertyName("Position");
                                writer.WriteP3Float(itm465.Placement.Position, options);
                                
                                // Rotation
                                writer.WritePropertyName("Rotation");
                                writer.WriteP3Float(itm465.Placement.Rotation, options);
                                writer.WriteEndObject();
                            }
                            else
                            {
                                writer.WriteNullValue();
                            }
                            
                            // MajorFlags
                            writer.WritePropertyName("MajorFlags");
                            writer.WriteFlags(itm465.MajorFlags);
                            
                            // FormVersion
                            writer.WritePropertyName("FormVersion");
                            writer.WriteNumberValue((uint)itm465.FormVersion);
                            
                            // Version2
                            writer.WritePropertyName("Version2");
                            writer.WriteNumberValue((uint)itm465.Version2);
                            
                            // IsCompressed
                            writer.WritePropertyName("IsCompressed");
                            writer.WriteBooleanValue(itm465.IsCompressed);
                            
                            // IsDeleted
                            writer.WritePropertyName("IsDeleted");
                            writer.WriteBooleanValue(itm465.IsDeleted);
                            
                            // MajorRecordFlagsRaw
                            writer.WritePropertyName("MajorRecordFlagsRaw");
                            writer.WriteNumberValue(itm465.MajorRecordFlagsRaw);
                            
                            // VersionControl
                            writer.WritePropertyName("VersionControl");
                            writer.WriteNumberValue(itm465.VersionControl);
                            
                            // EditorID
                            writer.WritePropertyName("EditorID");
                            writer.WriteStringValue(itm465.EditorID);
                            break;
                    }
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // TemporaryTimestamp
        writer.WritePropertyName("TemporaryTimestamp");
        writer.WriteNumberValue(value.TemporaryTimestamp);
        
        // TemporaryUnknownGroupData
        writer.WritePropertyName("TemporaryUnknownGroupData");
        writer.WriteNumberValue(value.TemporaryUnknownGroupData);
        
        // Timestamp
        writer.WritePropertyName("Timestamp");
        writer.WriteNumberValue(value.Timestamp);
        
        // UnknownGroupData
        writer.WritePropertyName("UnknownGroupData");
        writer.WriteNumberValue(value.UnknownGroupData);
        
        // Version2
        writer.WritePropertyName("Version2");
        writer.WriteNumberValue((uint)value.Version2);
        
        // VersionControl
        writer.WritePropertyName("VersionControl");
        writer.WriteNumberValue(value.VersionControl);
        
        // Water
        writer.WritePropertyName("Water");
        if (value.Water.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Water.FormKey.ToString());
        
        // WaterEnvironmentMap
        writer.WritePropertyName("WaterEnvironmentMap");
        writer.WriteStringValue(value.WaterEnvironmentMap);
        
        // WaterHeight
        writer.WritePropertyName("WaterHeight");
        if (value.WaterHeight == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteNumberValue(value.WaterHeight.Value);
        }
        
        // WaterNoiseTexture
        writer.WritePropertyName("WaterNoiseTexture");
        writer.WriteStringValue(value.WaterNoiseTexture);
        
        // WaterVelocity
        writer.WritePropertyName("WaterVelocity");
        if (value.WaterVelocity != null)
        {
            writer.WriteStartObject();
            
            // Offset
            writer.WritePropertyName("Offset");
            writer.WriteP3Float(value.WaterVelocity.Offset, options);
            
            // Unknown
            writer.WritePropertyName("Unknown");
            writer.WriteNumberValue(value.WaterVelocity.Unknown);
            
            // Angle
            writer.WritePropertyName("Angle");
            writer.WriteP3Float(value.WaterVelocity.Angle, options);
            
            // Unknown2
            writer.WritePropertyName("Unknown2");
            writer.WriteBase64StringValue(value.WaterVelocity.Unknown2);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // XWCN
        writer.WritePropertyName("XWCN");
        if (value.XWCN == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.XWCN.Value);
        }
        
        // XWCS
        writer.WritePropertyName("XWCS");
        if (value.XWCS == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.XWCS.Value);
        }
        writer.WriteEndObject();
    }
}
public class Cell_Converter : JsonConverter<Mutagen.Bethesda.Skyrim.Cell>
{
    private ICellGetter_Converter _getterConverter;
    public Cell_Converter()
    {
        _getterConverter = new ICellGetter_Converter();
    }
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Cell));
    }
    public override void Write(Utf8JsonWriter writer, Mutagen.Bethesda.Skyrim.Cell value, JsonSerializerOptions options)
    {
        _getterConverter.Write(writer, (ICellGetter)value, options);
    }
    public override Mutagen.Bethesda.Skyrim.Cell Read(
        ref Utf8JsonReader reader,
        Type typeToConvert,
        JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
        reader.Read();
        Mutagen.Bethesda.Skyrim.Cell retval = new Mutagen.Bethesda.Skyrim.Cell(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                reader.Read();
                break;
            }
            var prop = reader.GetString();
            reader.Read();
            switch (prop)
            {
                case "AcousticSpace":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.AcousticSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "EditorID":
                    retval.EditorID = reader.GetString();
                    break;
                case "EncounterZone":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Flags":
                    retval.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Cell.Flag>(ref reader, options);
                    break;
                case "FormVersion":
                    retval.FormVersion = reader.GetUInt16();
                    break;
                case "Grid":
                    retval.Grid = new Mutagen.Bethesda.Skyrim.CellGrid();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop488 = reader.GetString();
                            reader.Read();
                            switch(prop488)
                            {
                                case "Point":
                                    retval.Grid.Point = SerializerExtensions.ReadP2Int(ref reader, options);
                                    break;
                                case "Flags":
                                    retval.Grid.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellGrid.Flag>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "ImageSpace":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "IsCompressed":
                    retval.IsCompressed = reader.GetBoolean();
                    break;
                case "IsDeleted":
                    retval.IsDeleted = reader.GetBoolean();
                    break;
                case "Landscape":
                    retval.Landscape = new Mutagen.Bethesda.Skyrim.Landscape(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop489 = reader.GetString();
                            reader.Read();
                            switch(prop489)
                            {
                                case "Flags":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Landscape.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Landscape.Flag>(ref reader, options);
                                    }
                                    break;
                                case "VertexNormals":
                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                    {
                                        Noggog.P3UInt8 itm490 = default;
                                        itm490 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                        return itm490;
                                    }
                                    );
                                    break;
                                case "VertexHeightMap":
                                    retval.Landscape.VertexHeightMap = new Mutagen.Bethesda.Skyrim.LandscapeVertexHeightMap();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop491 = reader.GetString();
                                            reader.Read();
                                            switch(prop491)
                                            {
                                                case "Offset":
                                                    retval.Landscape.VertexHeightMap.Offset = reader.GetSingle();
                                                    break;
                                                case "HeightMap":
                                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                                    {
                                                        Byte itm492 = default;
                                                        itm492 = reader.GetByte();
                                                        return itm492;
                                                    }
                                                    );
                                                    break;
                                                case "Unknown":
                                                    retval.Landscape.VertexHeightMap.Unknown = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "VertexColors":
                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                    {
                                        Noggog.P3UInt8 itm493 = default;
                                        itm493 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                        return itm493;
                                    }
                                    );
                                    break;
                                case "Layers":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.BaseLayer itm494 = new Mutagen.Bethesda.Skyrim.BaseLayer();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop495 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop495)
                                                    {
                                                        case "Header":
                                                            itm494.Header = new Mutagen.Bethesda.Skyrim.LayerHeader();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop496 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop496)
                                                                    {
                                                                        case "Texture":
                                                                            itm494.Header.Texture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Quadrant":
                                                                            itm494.Header.Quadrant = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Plugins.Records.Quadrant>(ref reader, options);
                                                                            break;
                                                                        case "Unused":
                                                                            itm494.Header.Unused = reader.GetByte();
                                                                            break;
                                                                        case "LayerNumber":
                                                                            itm494.Header.LayerNumber = reader.GetUInt16();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            retval.Landscape.Layers.Add(itm494);
                                        }
                                    }
                                    break;
                                case "Textures":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Landscape.Textures ??= new();
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            retval.Landscape.Textures.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                        }
                                    }
                                    break;
                                case "SkyrimMajorRecordFlags":
                                    retval.Landscape.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                    break;
                                case "FormVersion":
                                    retval.Landscape.FormVersion = reader.GetUInt16();
                                    break;
                                case "Version2":
                                    retval.Landscape.Version2 = reader.GetUInt16();
                                    break;
                                case "EditorID":
                                    retval.Landscape.EditorID = reader.GetString();
                                    break;
                                case "TitleString":
                                    retval.Landscape.TitleString = reader.GetString();
                                    break;
                                case "IsCompressed":
                                    retval.Landscape.IsCompressed = reader.GetBoolean();
                                    break;
                                case "IsDeleted":
                                    retval.Landscape.IsDeleted = reader.GetBoolean();
                                    break;
                                case "MajorRecordFlagsRaw":
                                    retval.Landscape.MajorRecordFlagsRaw = reader.GetInt32();
                                    break;
                                case "FormKey":
                                    retval.Landscape.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                    break;
                                case "VersionControl":
                                    retval.Landscape.VersionControl = reader.GetUInt32();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Lighting":
                    retval.Lighting = new Mutagen.Bethesda.Skyrim.CellLighting();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop497 = reader.GetString();
                            reader.Read();
                            switch(prop497)
                            {
                                case "Versioning":
                                    retval.Lighting.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellLighting.VersioningBreaks>(ref reader, options);
                                    break;
                                case "AmbientColor":
                                    retval.Lighting.AmbientColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "DirectionalColor":
                                    retval.Lighting.DirectionalColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogNearColor":
                                    retval.Lighting.FogNearColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogNear":
                                    retval.Lighting.FogNear = reader.GetSingle();
                                    break;
                                case "FogFar":
                                    retval.Lighting.FogFar = reader.GetSingle();
                                    break;
                                case "DirectionalRotationXY":
                                    retval.Lighting.DirectionalRotationXY = reader.GetInt32();
                                    break;
                                case "DirectionalRotationZ":
                                    retval.Lighting.DirectionalRotationZ = reader.GetInt32();
                                    break;
                                case "DirectionalFade":
                                    retval.Lighting.DirectionalFade = reader.GetSingle();
                                    break;
                                case "FogClipDistance":
                                    retval.Lighting.FogClipDistance = reader.GetSingle();
                                    break;
                                case "FogPower":
                                    retval.Lighting.FogPower = reader.GetSingle();
                                    break;
                                case "AmbientColors":
                                    retval.Lighting.AmbientColors = new Mutagen.Bethesda.Skyrim.AmbientColors();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop498 = reader.GetString();
                                            reader.Read();
                                            switch(prop498)
                                            {
                                                case "Versioning":
                                                    retval.Lighting.AmbientColors.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.AmbientColors.VersioningBreaks>(ref reader, options);
                                                    break;
                                                case "DirectionalXPlus":
                                                    retval.Lighting.AmbientColors.DirectionalXPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalXMinus":
                                                    retval.Lighting.AmbientColors.DirectionalXMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalYPlus":
                                                    retval.Lighting.AmbientColors.DirectionalYPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalYMinus":
                                                    retval.Lighting.AmbientColors.DirectionalYMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalZPlus":
                                                    retval.Lighting.AmbientColors.DirectionalZPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalZMinus":
                                                    retval.Lighting.AmbientColors.DirectionalZMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "Specular":
                                                    retval.Lighting.AmbientColors.Specular = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "Scale":
                                                    retval.Lighting.AmbientColors.Scale = reader.GetSingle();
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "FogFarColor":
                                    retval.Lighting.FogFarColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogMax":
                                    retval.Lighting.FogMax = reader.GetSingle();
                                    break;
                                case "LightFadeBegin":
                                    retval.Lighting.LightFadeBegin = reader.GetSingle();
                                    break;
                                case "LightFadeEnd":
                                    retval.Lighting.LightFadeEnd = reader.GetSingle();
                                    break;
                                case "Inherits":
                                    retval.Lighting.Inherits = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellLighting.Inherit>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "LightingTemplate":
                    retval.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LNAM":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.LNAM = reader.GetBytesFromBase64();
                    }
                    break;
                case "Location":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Location.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LockList":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.LockList.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "MajorFlags":
                    retval.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Cell.MajorFlag>(ref reader, options);
                    break;
                case "MajorRecordFlagsRaw":
                    retval.MajorRecordFlagsRaw = reader.GetInt32();
                    break;
                case "MaxHeightData":
                    retval.MaxHeightData = new Mutagen.Bethesda.Skyrim.CellMaxHeightData();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop499 = reader.GetString();
                            reader.Read();
                            switch(prop499)
                            {
                                case "Offset":
                                    retval.MaxHeightData.Offset = reader.GetSingle();
                                    break;
                                case "HeightMap":
                                    SerializerExtensions.Array2dReader(ref reader, () => 
                                    {
                                        Byte itm500 = default;
                                        itm500 = reader.GetByte();
                                        return itm500;
                                    }
                                    );
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Music":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Music.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Name":
                    retval.Name ??= new TranslatedString(Language.English);
                    SerializerExtensions.ReadTranslatedString(ref reader, retval.Name, options);
                    break;
                case "NavigationMeshes":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.NavigationMesh itm501 = new Mutagen.Bethesda.Skyrim.NavigationMesh(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop502 = reader.GetString();
                                    reader.Read();
                                    switch(prop502)
                                    {
                                        case "Data":
                                            itm501.Data = new Mutagen.Bethesda.Skyrim.NavigationMeshData();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop503 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop503)
                                                    {
                                                        case "NavmeshVersion":
                                                            itm501.Data.NavmeshVersion = reader.GetUInt32();
                                                            break;
                                                        case "Magic":
                                                            itm501.Data.Magic = reader.GetUInt32();
                                                            break;
                                                        case "Parent":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                {
                                                                    case "WorldspaceNavmeshParent":
                                                                        Mutagen.Bethesda.Skyrim.WorldspaceNavmeshParent itm504 = new();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop505 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop505)
                                                                            {
                                                                                case "Parent":
                                                                                    itm504.Parent.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                                case "Coordinates":
                                                                                    itm504.Coordinates = SerializerExtensions.ReadP2Int16(ref reader, options);
                                                                                    break;
                                                                            }
                                                                        }
                                                                        itm501.Data.Parent = itm504;
                                                                        break;
                                                                    case "CellNavmeshParent":
                                                                        Mutagen.Bethesda.Skyrim.CellNavmeshParent itm506 = new();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop507 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop507)
                                                                            {
                                                                                case "UnusedWorldspaceParent":
                                                                                    itm506.UnusedWorldspaceParent.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                                case "Parent":
                                                                                    itm506.Parent.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                            }
                                                                        }
                                                                        itm501.Data.Parent = itm506;
                                                                        break;
                                                                    default:
                                                                        reader.Skip();
                                                                        break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            break;
                                                        case "Vertices":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Noggog.P3Float itm508 = default;
                                                                    itm508 = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    itm501.Data.Vertices.Add(itm508);
                                                                }
                                                            }
                                                            break;
                                                        case "Triangles":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.NavmeshTriangle itm509 = new Mutagen.Bethesda.Skyrim.NavmeshTriangle();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop510 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop510)
                                                                            {
                                                                                case "Vertices":
                                                                                    itm509.Vertices = SerializerExtensions.ReadP3Int16(ref reader, options);
                                                                                    break;
                                                                                case "EdgeLink_0_1":
                                                                                    itm509.EdgeLink_0_1 = reader.GetInt16();
                                                                                    break;
                                                                                case "EdgeLink_1_2":
                                                                                    itm509.EdgeLink_1_2 = reader.GetInt16();
                                                                                    break;
                                                                                case "EdgeLink_2_0":
                                                                                    itm509.EdgeLink_2_0 = reader.GetInt16();
                                                                                    break;
                                                                                case "Flags":
                                                                                    itm509.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavmeshTriangle.Flag>(ref reader, options);
                                                                                    break;
                                                                                case "CoverFlags":
                                                                                    itm509.CoverFlags = reader.GetUInt16();
                                                                                    break;
                                                                                case "IsCover":
                                                                                    itm509.IsCover = reader.GetBoolean();
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm501.Data.Triangles.Add(itm509);
                                                                }
                                                            }
                                                            break;
                                                        case "EdgeLinks":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.EdgeLink itm511 = new Mutagen.Bethesda.Skyrim.EdgeLink();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop512 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop512)
                                                                            {
                                                                                case "Unknown":
                                                                                    itm511.Unknown = reader.GetInt32();
                                                                                    break;
                                                                                case "Mesh":
                                                                                    itm511.Mesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                                case "TriangleIndex":
                                                                                    itm511.TriangleIndex = reader.GetInt16();
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm501.Data.EdgeLinks.Add(itm511);
                                                                }
                                                            }
                                                            break;
                                                        case "DoorTriangles":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.DoorTriangle itm513 = new Mutagen.Bethesda.Skyrim.DoorTriangle();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop514 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop514)
                                                                            {
                                                                                case "TriangleBeforeDoor":
                                                                                    itm513.TriangleBeforeDoor = reader.GetInt16();
                                                                                    break;
                                                                                case "Unknown":
                                                                                    itm513.Unknown = reader.GetInt32();
                                                                                    break;
                                                                                case "Door":
                                                                                    itm513.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm501.Data.DoorTriangles.Add(itm513);
                                                                }
                                                            }
                                                            break;
                                                        case "NavmeshGridDivisor":
                                                            itm501.Data.NavmeshGridDivisor = reader.GetUInt32();
                                                            break;
                                                        case "MaxDistanceX":
                                                            itm501.Data.MaxDistanceX = reader.GetSingle();
                                                            break;
                                                        case "MaxDistanceY":
                                                            itm501.Data.MaxDistanceY = reader.GetSingle();
                                                            break;
                                                        case "Min":
                                                            itm501.Data.Min = SerializerExtensions.ReadP3Float(ref reader, options);
                                                            break;
                                                        case "Max":
                                                            itm501.Data.Max = SerializerExtensions.ReadP3Float(ref reader, options);
                                                            break;
                                                        case "NavmeshGrid":
                                                            itm501.Data.NavmeshGrid = reader.GetBytesFromBase64();
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            break;
                                        case "ONAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm501.ONAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "PNAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm501.PNAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "NNAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm501.NNAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "MajorFlags":
                                            itm501.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavigationMesh.MajorFlag>(ref reader, options);
                                            break;
                                        case "SkyrimMajorRecordFlags":
                                            itm501.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                            break;
                                        case "FormVersion":
                                            itm501.FormVersion = reader.GetUInt16();
                                            break;
                                        case "Version2":
                                            itm501.Version2 = reader.GetUInt16();
                                            break;
                                        case "EditorID":
                                            itm501.EditorID = reader.GetString();
                                            break;
                                        case "TitleString":
                                            itm501.TitleString = reader.GetString();
                                            break;
                                        case "IsCompressed":
                                            itm501.IsCompressed = reader.GetBoolean();
                                            break;
                                        case "IsDeleted":
                                            itm501.IsDeleted = reader.GetBoolean();
                                            break;
                                        case "MajorRecordFlagsRaw":
                                            itm501.MajorRecordFlagsRaw = reader.GetInt32();
                                            break;
                                        case "FormKey":
                                            itm501.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                            break;
                                        case "VersionControl":
                                            itm501.VersionControl = reader.GetUInt32();
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.NavigationMeshes.Add(itm501);
                        }
                    }
                    break;
                case "OcclusionData":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.OcclusionData = reader.GetBytesFromBase64();
                    }
                    break;
                case "Ownership":
                    retval.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop515 = reader.GetString();
                            reader.Read();
                            switch(prop515)
                            {
                                case "Owner":
                                    if (reader.TokenType != JsonTokenType.Null)
                                        retval.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "FactionRank":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Ownership.FactionRank = reader.GetInt32();
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Persistent":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            IPlaced itm516 = default;
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                {
                                    case "PlacedNpc":
                                        Mutagen.Bethesda.Skyrim.PlacedNpc itm517 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop518 = reader.GetString();
                                            reader.Read();
                                            switch(prop518)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm517.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop519 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop519)
                                                            {
                                                                case "Version":
                                                                    itm517.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm517.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm520 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop521 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop521)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm520.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm520.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm522 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm523 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop524 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop524)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm523.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm523.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm523.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm523.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm523.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm523;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm525 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop526 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop526)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm525.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm525.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm525.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm525;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm527 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop528 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop528)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm527.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm527.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm527.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm527;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm529 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop530 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop530)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm529.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm529.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm529.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm529;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm531 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop532 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop532)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm531.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm531.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm531.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm531;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm533 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop534 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop534)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm535 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop536 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop536)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm535.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm535.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm535.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm535.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm535.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm533.Objects.Add(itm535);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm533.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm533.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm533;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm537 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop538 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop538)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm539 = default;
                                                                                                                                    itm539 = reader.GetInt32();
                                                                                                                                    itm537.Data.Add(itm539);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm537.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm537.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm537;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm540 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop541 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop541)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm542 = default;
                                                                                                                                    itm542 = reader.GetSingle();
                                                                                                                                    itm540.Data.Add(itm542);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm540.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm540.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm540;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm543 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop544 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop544)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm545 = default;
                                                                                                                                    itm545 = reader.GetBoolean();
                                                                                                                                    itm543.Data.Add(itm545);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm543.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm543.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm543;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm546 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop547 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop547)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm548 = default;
                                                                                                                                    itm548 = reader.GetString();
                                                                                                                                    itm546.Data.Add(itm548);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm546.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm546.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm522 = itm546;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm520.Properties.Add(itm522);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm517.VirtualMachineAdapter.Scripts.Add(itm520);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm517.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop549 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop549)
                                                            {
                                                                case "IdleTime":
                                                                    itm517.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm517.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm517.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm517.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm550 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm551 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop552 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop552)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm551.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm550 = itm551;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm553 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop554 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop554)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm553.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm550 = itm553;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm517.Patrol.Topics.Add(itm550);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "MerchantContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.MerchantContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Count":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.Count = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Health":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.Health = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm555 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop556 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop556)
                                                                    {
                                                                        case "Versioning":
                                                                            itm555.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm555.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm555.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm517.LinkedReferences.Add(itm555);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm517.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop557 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop557)
                                                            {
                                                                case "Flags":
                                                                    itm517.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm558 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop559 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop559)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm558.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm558.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm517.ActivateParents.Parents.Add(itm558);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferenceColor":
                                                    itm517.LinkedReferenceColor = new Mutagen.Bethesda.Skyrim.LinkedReferenceColor();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop560 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop560)
                                                            {
                                                                case "Start":
                                                                    itm517.LinkedReferenceColor.Start = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "End":
                                                                    itm517.LinkedReferenceColor.End = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm517.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm517.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Horse":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.Horse.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm517.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop561 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop561)
                                                            {
                                                                case "Versioning":
                                                                    itm517.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm517.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm517.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm517.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Ownership":
                                                    itm517.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop562 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop562)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm517.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm517.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm517.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox2":
                                                    itm517.IsIgnoredBySandbox2 = reader.GetBoolean();
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm517.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm517.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop563 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop563)
                                                            {
                                                                case "Position":
                                                                    itm517.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm517.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm517.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.PlacedNpc.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm517.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm517.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm517.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm517.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm517.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm517.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm517.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm517.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm517.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm517.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm517;
                                        break;
                                    case "PlacedObject":
                                        Mutagen.Bethesda.Skyrim.PlacedObject itm564 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop565 = reader.GetString();
                                            reader.Read();
                                            switch(prop565)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm564.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop566 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop566)
                                                            {
                                                                case "Version":
                                                                    itm564.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm564.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm567 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop568 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop568)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm567.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm567.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm569 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm570 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop571 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop571)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm570.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm570.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm570.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm570.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm570.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm570;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm572 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop573 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop573)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm572.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm572.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm572.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm572;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm574 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop575 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop575)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm574.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm574.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm574.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm574;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm576 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop577 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop577)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm576.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm576.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm576.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm576;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm578 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop579 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop579)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm578.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm578.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm578.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm578;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm580 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop581 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop581)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm582 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop583 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop583)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm582.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm582.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm582.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm582.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm582.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm580.Objects.Add(itm582);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm580.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm580.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm580;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm584 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop585 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop585)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm586 = default;
                                                                                                                                    itm586 = reader.GetInt32();
                                                                                                                                    itm584.Data.Add(itm586);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm584.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm584.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm584;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm587 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop588 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop588)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm589 = default;
                                                                                                                                    itm589 = reader.GetSingle();
                                                                                                                                    itm587.Data.Add(itm589);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm587.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm587.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm587;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm590 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop591 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop591)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm592 = default;
                                                                                                                                    itm592 = reader.GetBoolean();
                                                                                                                                    itm590.Data.Add(itm592);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm590.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm590.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm590;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm593 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop594 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop594)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm595 = default;
                                                                                                                                    itm595 = reader.GetString();
                                                                                                                                    itm593.Data.Add(itm595);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm593.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm593.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm569 = itm593;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm567.Properties.Add(itm569);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm564.VirtualMachineAdapter.Scripts.Add(itm567);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "BoundHalfExtents":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.BoundHalfExtents = SerializerExtensions.ReadP3Float(ref reader, options);
                                                    }
                                                    break;
                                                case "Primitive":
                                                    itm564.Primitive = new Mutagen.Bethesda.Skyrim.PlacedPrimitive();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop596 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop596)
                                                            {
                                                                case "Bounds":
                                                                    itm564.Primitive.Bounds = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Color":
                                                                    itm564.Primitive.Color = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "Unknown":
                                                                    itm564.Primitive.Unknown = reader.GetSingle();
                                                                    break;
                                                                case "Type":
                                                                    itm564.Primitive.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedPrimitive.TypeEnum>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XORD":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.XORD = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "OcclusionPlane":
                                                    itm564.OcclusionPlane = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop597 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop597)
                                                            {
                                                                case "Width":
                                                                    itm564.OcclusionPlane.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm564.OcclusionPlane.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm564.OcclusionPlane.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm564.OcclusionPlane.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm564.OcclusionPlane.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm564.OcclusionPlane.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm564.OcclusionPlane.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Portals":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.Portals ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.Portal itm598 = new Mutagen.Bethesda.Skyrim.Portal();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop599 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop599)
                                                                    {
                                                                        case "Origin":
                                                                            itm598.Origin.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Destination":
                                                                            itm598.Destination.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm564.Portals.Add(itm598);
                                                        }
                                                    }
                                                    break;
                                                case "RoomPortal":
                                                    itm564.RoomPortal = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop600 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop600)
                                                            {
                                                                case "Width":
                                                                    itm564.RoomPortal.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm564.RoomPortal.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm564.RoomPortal.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm564.RoomPortal.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm564.RoomPortal.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm564.RoomPortal.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm564.RoomPortal.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Unknown":
                                                    itm564.Unknown = reader.GetInt16();
                                                    break;
                                                case "LightingTemplate":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ImageSpace":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LinkedRooms":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm564.LinkedRooms.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsMultiBoundPrimitive":
                                                    itm564.IsMultiBoundPrimitive = reader.GetBoolean();
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm601 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop602 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop602)
                                                                    {
                                                                        case "Versioning":
                                                                            itm601.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm601.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm601.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm564.Reflections.Add(itm601);
                                                        }
                                                    }
                                                    break;
                                                case "LitWater":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm564.LitWater.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LightData":
                                                    itm564.LightData = new Mutagen.Bethesda.Skyrim.LightData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop603 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop603)
                                                            {
                                                                case "Versioning":
                                                                    itm564.LightData.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LightData.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "FovOffset":
                                                                    itm564.LightData.FovOffset = reader.GetSingle();
                                                                    break;
                                                                case "FadeOffset":
                                                                    itm564.LightData.FadeOffset = reader.GetSingle();
                                                                    break;
                                                                case "EndDistanceCap":
                                                                    itm564.LightData.EndDistanceCap = reader.GetSingle();
                                                                    break;
                                                                case "ShadowDepthBias":
                                                                    itm564.LightData.ShadowDepthBias = reader.GetSingle();
                                                                    break;
                                                                case "Unknown":
                                                                    itm564.LightData.Unknown = reader.GetInt32();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Alpha":
                                                    itm564.Alpha = new Mutagen.Bethesda.Skyrim.Alpha();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop604 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop604)
                                                            {
                                                                case "Cutoff":
                                                                    itm564.Alpha.Cutoff = reader.GetByte();
                                                                    break;
                                                                case "Base":
                                                                    itm564.Alpha.Base = reader.GetByte();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportDestination":
                                                    itm564.TeleportDestination = new Mutagen.Bethesda.Skyrim.TeleportDestination();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop605 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop605)
                                                            {
                                                                case "Door":
                                                                    itm564.TeleportDestination.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Position":
                                                                    itm564.TeleportDestination.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm564.TeleportDestination.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Flags":
                                                                    itm564.TeleportDestination.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.TeleportDestination.Flag>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportMessageBox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.TeleportMessageBox.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XWCN":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.XWCN = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XWCS":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.XWCS = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "WaterVelocity":
                                                    itm564.WaterVelocity = new Mutagen.Bethesda.Skyrim.WaterVelocity();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop606 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop606)
                                                            {
                                                                case "Offset":
                                                                    itm564.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm564.WaterVelocity.Unknown = reader.GetInt32();
                                                                    break;
                                                                case "Angle":
                                                                    itm564.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown2":
                                                                    itm564.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XCVL":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.XCVL = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZR":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.XCZR.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XCZA":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.XCZA = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZC":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.XCZC.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "SpawnContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.SpawnContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ActivateParents":
                                                    itm564.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop607 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop607)
                                                            {
                                                                case "Flags":
                                                                    itm564.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm608 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop609 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop609)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm608.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm608.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm564.ActivateParents.Parents.Add(itm608);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LeveledItemBaseObject":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.LeveledItemBaseObject.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "CollisionLayer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.CollisionLayer = reader.GetUInt32();
                                                    }
                                                    break;
                                                case "Lock":
                                                    itm564.Lock = new Mutagen.Bethesda.Skyrim.LockData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop610 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop610)
                                                            {
                                                                case "Level":
                                                                    itm564.Lock.Level = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.LockLevel>(ref reader, options);
                                                                    break;
                                                                case "Unused":
                                                                    itm564.Lock.Unused = reader.GetBytesFromBase64();
                                                                    break;
                                                                case "Key":
                                                                    itm564.Lock.Key.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm564.Lock.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LockData.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unused2":
                                                                    itm564.Lock.Unused2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "NavigationDoorLink":
                                                    itm564.NavigationDoorLink = new Mutagen.Bethesda.Skyrim.NavigationDoorLink();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop611 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop611)
                                                            {
                                                                case "NavMesh":
                                                                    itm564.NavigationDoorLink.NavMesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "TeleportMarkerTriangle":
                                                                    itm564.NavigationDoorLink.TeleportMarkerTriangle = reader.GetInt16();
                                                                    break;
                                                                case "Unused":
                                                                    itm564.NavigationDoorLink.Unused = reader.GetInt16();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm564.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm564.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "Ownership":
                                                    itm564.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop612 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop612)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm564.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm564.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "ItemCount":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.ItemCount = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Charge":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.Charge = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EnableParent":
                                                    itm564.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop613 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop613)
                                                            {
                                                                case "Versioning":
                                                                    itm564.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm564.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm564.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm564.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm614 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop615 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop615)
                                                                    {
                                                                        case "Versioning":
                                                                            itm614.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm614.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm614.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm564.LinkedReferences.Add(itm614);
                                                        }
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm564.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop616 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop616)
                                                            {
                                                                case "IdleTime":
                                                                    itm564.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm564.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm564.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm564.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm617 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm618 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop619 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop619)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm618.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm617 = itm618;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm620 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop621 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop621)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm620.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm617 = itm620;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm564.Patrol.Topics.Add(itm617);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Action":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.Action = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedObject.ActionFlag>(ref reader, options);
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "IsOpenByDefault":
                                                    itm564.IsOpenByDefault = reader.GetBoolean();
                                                    break;
                                                case "MapMarker":
                                                    itm564.MapMarker = new Mutagen.Bethesda.Skyrim.MapMarker();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop622 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop622)
                                                            {
                                                                case "Flags":
                                                                    itm564.MapMarker.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.MapMarker.Flag>(ref reader, options);
                                                                    break;
                                                                case "Name":
                                                                    itm564.MapMarker.Name ??= new TranslatedString(Language.English);
                                                                    SerializerExtensions.ReadTranslatedString(ref reader, itm564.MapMarker.Name, options);
                                                                    break;
                                                                case "Type":
                                                                    itm564.MapMarker.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.MapMarker.MarkerType>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "AttachRef":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm564.AttachRef.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm564.DistantLodData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm564.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop623 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop623)
                                                            {
                                                                case "Position":
                                                                    itm564.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm564.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm564.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm564.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm564.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm564.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm564.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm564.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm564.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm564.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm564.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm564.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm564;
                                        break;
                                    case "PlacedArrow":
                                        Mutagen.Bethesda.Skyrim.PlacedArrow itm624 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop625 = reader.GetString();
                                            reader.Read();
                                            switch(prop625)
                                            {
                                                case "Projectile":
                                                    itm624.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm624.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop626 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop626)
                                                            {
                                                                case "Version":
                                                                    itm624.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm624.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm627 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop628 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop628)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm627.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm627.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm629 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm630 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop631 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop631)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm630.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm630.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm630.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm630.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm630.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm630;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm632 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop633 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop633)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm632.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm632.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm632.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm632;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm634 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop635 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop635)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm634.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm634.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm634.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm634;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm636 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop637 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop637)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm636.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm636.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm636.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm636;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm638 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop639 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop639)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm638.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm638.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm638.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm638;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm640 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop641 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop641)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm642 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop643 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop643)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm642.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm642.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm642.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm642.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm642.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm640.Objects.Add(itm642);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm640.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm640.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm640;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm644 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop645 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop645)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm646 = default;
                                                                                                                                    itm646 = reader.GetInt32();
                                                                                                                                    itm644.Data.Add(itm646);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm644.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm644.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm644;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm647 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop648 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop648)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm649 = default;
                                                                                                                                    itm649 = reader.GetSingle();
                                                                                                                                    itm647.Data.Add(itm649);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm647.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm647.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm647;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm650 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop651 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop651)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm652 = default;
                                                                                                                                    itm652 = reader.GetBoolean();
                                                                                                                                    itm650.Data.Add(itm652);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm650.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm650.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm650;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm653 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop654 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop654)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm655 = default;
                                                                                                                                    itm655 = reader.GetString();
                                                                                                                                    itm653.Data.Add(itm655);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm653.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm653.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm629 = itm653;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm627.Properties.Add(itm629);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm624.VirtualMachineAdapter.Scripts.Add(itm627);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm624.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm624.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop656 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop656)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm624.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm624.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm624.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm624.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm657 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop658 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop658)
                                                                    {
                                                                        case "Versioning":
                                                                            itm657.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm657.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm657.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm624.Reflections.Add(itm657);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm659 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop660 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop660)
                                                                    {
                                                                        case "Versioning":
                                                                            itm659.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm659.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm659.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm624.LinkedReferences.Add(itm659);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm624.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop661 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop661)
                                                            {
                                                                case "Flags":
                                                                    itm624.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm662 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop663 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop663)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm662.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm662.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm624.ActivateParents.Parents.Add(itm662);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm624.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop664 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop664)
                                                            {
                                                                case "Versioning":
                                                                    itm624.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm624.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm624.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm624.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm624.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm624.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm624.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm624.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm624.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm624.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm624.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm665 = default;
                                                            itm665 = reader.GetSingle();
                                                            itm624.DistantLodData.Add(itm665);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm624.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm624.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop666 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop666)
                                                            {
                                                                case "Position":
                                                                    itm624.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm624.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm624.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm624.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm624.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm624.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm624.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm624.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm624.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm624.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm624.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm624.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm624.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm624;
                                        break;
                                    case "PlacedBeam":
                                        Mutagen.Bethesda.Skyrim.PlacedBeam itm667 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop668 = reader.GetString();
                                            reader.Read();
                                            switch(prop668)
                                            {
                                                case "Projectile":
                                                    itm667.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm667.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop669 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop669)
                                                            {
                                                                case "Version":
                                                                    itm667.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm667.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm670 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop671 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop671)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm670.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm670.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm672 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm673 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop674 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop674)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm673.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm673.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm673.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm673.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm673.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm673;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm675 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop676 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop676)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm675.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm675.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm675.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm675;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm677 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop678 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop678)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm677.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm677.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm677.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm677;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm679 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop680 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop680)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm679.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm679.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm679.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm679;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm681 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop682 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop682)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm681.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm681.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm681.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm681;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm683 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop684 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop684)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm685 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop686 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop686)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm685.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm685.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm685.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm685.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm685.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm683.Objects.Add(itm685);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm683.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm683.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm683;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm687 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop688 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop688)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm689 = default;
                                                                                                                                    itm689 = reader.GetInt32();
                                                                                                                                    itm687.Data.Add(itm689);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm687.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm687.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm687;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm690 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop691 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop691)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm692 = default;
                                                                                                                                    itm692 = reader.GetSingle();
                                                                                                                                    itm690.Data.Add(itm692);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm690.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm690.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm690;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm693 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop694 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop694)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm695 = default;
                                                                                                                                    itm695 = reader.GetBoolean();
                                                                                                                                    itm693.Data.Add(itm695);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm693.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm693.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm693;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm696 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop697 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop697)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm698 = default;
                                                                                                                                    itm698 = reader.GetString();
                                                                                                                                    itm696.Data.Add(itm698);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm696.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm696.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm672 = itm696;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm670.Properties.Add(itm672);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm667.VirtualMachineAdapter.Scripts.Add(itm670);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm667.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm667.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop699 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop699)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm667.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm667.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm667.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm667.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm700 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop701 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop701)
                                                                    {
                                                                        case "Versioning":
                                                                            itm700.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm700.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm700.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm667.Reflections.Add(itm700);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm702 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop703 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop703)
                                                                    {
                                                                        case "Versioning":
                                                                            itm702.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm702.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm702.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm667.LinkedReferences.Add(itm702);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm667.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop704 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop704)
                                                            {
                                                                case "Flags":
                                                                    itm667.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm705 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop706 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop706)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm705.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm705.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm667.ActivateParents.Parents.Add(itm705);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm667.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop707 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop707)
                                                            {
                                                                case "Versioning":
                                                                    itm667.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm667.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm667.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm667.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm667.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm667.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm667.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm667.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm667.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm667.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm667.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm708 = default;
                                                            itm708 = reader.GetSingle();
                                                            itm667.DistantLodData.Add(itm708);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm667.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm667.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop709 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop709)
                                                            {
                                                                case "Position":
                                                                    itm667.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm667.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm667.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm667.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm667.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm667.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm667.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm667.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm667.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm667.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm667.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm667.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm667.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm667;
                                        break;
                                    case "PlacedFlame":
                                        Mutagen.Bethesda.Skyrim.PlacedFlame itm710 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop711 = reader.GetString();
                                            reader.Read();
                                            switch(prop711)
                                            {
                                                case "Projectile":
                                                    itm710.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm710.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop712 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop712)
                                                            {
                                                                case "Version":
                                                                    itm710.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm710.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm713 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop714 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop714)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm713.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm713.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm715 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm716 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop717 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop717)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm716.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm716.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm716.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm716.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm716.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm716;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm718 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop719 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop719)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm718.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm718.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm718.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm718;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm720 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop721 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop721)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm720.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm720.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm720.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm720;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm722 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop723 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop723)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm722.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm722.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm722.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm722;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm724 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop725 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop725)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm724.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm724.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm724.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm724;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm726 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop727 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop727)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm728 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop729 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop729)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm728.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm728.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm728.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm728.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm728.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm726.Objects.Add(itm728);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm726.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm726.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm726;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm730 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop731 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop731)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm732 = default;
                                                                                                                                    itm732 = reader.GetInt32();
                                                                                                                                    itm730.Data.Add(itm732);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm730.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm730.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm730;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm733 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop734 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop734)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm735 = default;
                                                                                                                                    itm735 = reader.GetSingle();
                                                                                                                                    itm733.Data.Add(itm735);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm733.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm733.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm733;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm736 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop737 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop737)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm738 = default;
                                                                                                                                    itm738 = reader.GetBoolean();
                                                                                                                                    itm736.Data.Add(itm738);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm736.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm736.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm736;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm739 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop740 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop740)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm741 = default;
                                                                                                                                    itm741 = reader.GetString();
                                                                                                                                    itm739.Data.Add(itm741);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm739.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm739.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm715 = itm739;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm713.Properties.Add(itm715);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm710.VirtualMachineAdapter.Scripts.Add(itm713);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm710.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm710.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop742 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop742)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm710.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm710.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm710.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm710.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm743 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop744 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop744)
                                                                    {
                                                                        case "Versioning":
                                                                            itm743.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm743.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm743.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm710.Reflections.Add(itm743);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm745 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop746 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop746)
                                                                    {
                                                                        case "Versioning":
                                                                            itm745.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm745.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm745.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm710.LinkedReferences.Add(itm745);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm710.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop747 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop747)
                                                            {
                                                                case "Flags":
                                                                    itm710.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm748 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop749 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop749)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm748.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm748.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm710.ActivateParents.Parents.Add(itm748);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm710.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop750 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop750)
                                                            {
                                                                case "Versioning":
                                                                    itm710.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm710.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm710.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm710.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm710.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm710.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm710.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm710.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm710.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm710.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm710.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm751 = default;
                                                            itm751 = reader.GetSingle();
                                                            itm710.DistantLodData.Add(itm751);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm710.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm710.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop752 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop752)
                                                            {
                                                                case "Position":
                                                                    itm710.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm710.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm710.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm710.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm710.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm710.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm710.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm710.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm710.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm710.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm710.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm710.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm710.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm710;
                                        break;
                                    case "PlacedCone":
                                        Mutagen.Bethesda.Skyrim.PlacedCone itm753 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop754 = reader.GetString();
                                            reader.Read();
                                            switch(prop754)
                                            {
                                                case "Projectile":
                                                    itm753.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm753.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop755 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop755)
                                                            {
                                                                case "Version":
                                                                    itm753.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm753.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm756 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop757 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop757)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm756.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm756.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm758 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm759 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop760 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop760)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm759.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm759.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm759.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm759.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm759.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm759;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm761 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop762 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop762)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm761.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm761.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm761.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm761;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm763 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop764 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop764)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm763.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm763.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm763.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm763;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm765 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop766 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop766)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm765.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm765.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm765.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm765;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm767 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop768 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop768)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm767.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm767.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm767.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm767;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm769 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop770 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop770)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm771 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop772 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop772)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm771.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm771.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm771.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm771.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm771.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm769.Objects.Add(itm771);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm769.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm769.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm769;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm773 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop774 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop774)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm775 = default;
                                                                                                                                    itm775 = reader.GetInt32();
                                                                                                                                    itm773.Data.Add(itm775);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm773.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm773.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm773;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm776 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop777 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop777)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm778 = default;
                                                                                                                                    itm778 = reader.GetSingle();
                                                                                                                                    itm776.Data.Add(itm778);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm776.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm776.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm776;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm779 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop780 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop780)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm781 = default;
                                                                                                                                    itm781 = reader.GetBoolean();
                                                                                                                                    itm779.Data.Add(itm781);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm779.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm779.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm779;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm782 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop783 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop783)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm784 = default;
                                                                                                                                    itm784 = reader.GetString();
                                                                                                                                    itm782.Data.Add(itm784);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm782.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm782.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm758 = itm782;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm756.Properties.Add(itm758);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm753.VirtualMachineAdapter.Scripts.Add(itm756);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm753.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm753.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop785 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop785)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm753.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm753.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm753.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm753.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm786 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop787 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop787)
                                                                    {
                                                                        case "Versioning":
                                                                            itm786.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm786.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm786.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm753.Reflections.Add(itm786);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm788 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop789 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop789)
                                                                    {
                                                                        case "Versioning":
                                                                            itm788.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm788.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm788.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm753.LinkedReferences.Add(itm788);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm753.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop790 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop790)
                                                            {
                                                                case "Flags":
                                                                    itm753.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm791 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop792 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop792)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm791.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm791.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm753.ActivateParents.Parents.Add(itm791);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm753.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop793 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop793)
                                                            {
                                                                case "Versioning":
                                                                    itm753.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm753.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm753.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm753.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm753.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm753.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm753.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm753.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm753.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm753.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm753.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm794 = default;
                                                            itm794 = reader.GetSingle();
                                                            itm753.DistantLodData.Add(itm794);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm753.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm753.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop795 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop795)
                                                            {
                                                                case "Position":
                                                                    itm753.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm753.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm753.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm753.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm753.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm753.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm753.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm753.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm753.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm753.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm753.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm753.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm753.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm753;
                                        break;
                                    case "PlacedBarrier":
                                        Mutagen.Bethesda.Skyrim.PlacedBarrier itm796 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop797 = reader.GetString();
                                            reader.Read();
                                            switch(prop797)
                                            {
                                                case "Projectile":
                                                    itm796.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm796.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop798 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop798)
                                                            {
                                                                case "Version":
                                                                    itm796.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm796.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm799 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop800 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop800)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm799.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm799.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm801 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm802 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop803 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop803)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm802.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm802.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm802.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm802.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm802.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm802;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm804 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop805 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop805)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm804.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm804.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm804.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm804;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm806 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop807 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop807)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm806.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm806.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm806.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm806;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm808 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop809 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop809)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm808.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm808.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm808.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm808;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm810 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop811 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop811)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm810.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm810.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm810.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm810;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm812 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop813 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop813)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm814 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop815 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop815)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm814.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm814.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm814.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm814.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm814.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm812.Objects.Add(itm814);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm812.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm812.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm812;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm816 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop817 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop817)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm818 = default;
                                                                                                                                    itm818 = reader.GetInt32();
                                                                                                                                    itm816.Data.Add(itm818);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm816.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm816.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm816;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm819 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop820 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop820)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm821 = default;
                                                                                                                                    itm821 = reader.GetSingle();
                                                                                                                                    itm819.Data.Add(itm821);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm819.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm819.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm819;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm822 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop823 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop823)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm824 = default;
                                                                                                                                    itm824 = reader.GetBoolean();
                                                                                                                                    itm822.Data.Add(itm824);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm822.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm822.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm822;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm825 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop826 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop826)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm827 = default;
                                                                                                                                    itm827 = reader.GetString();
                                                                                                                                    itm825.Data.Add(itm827);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm825.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm825.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm801 = itm825;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm799.Properties.Add(itm801);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm796.VirtualMachineAdapter.Scripts.Add(itm799);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm796.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm796.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop828 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop828)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm796.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm796.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm796.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm796.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm829 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop830 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop830)
                                                                    {
                                                                        case "Versioning":
                                                                            itm829.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm829.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm829.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm796.Reflections.Add(itm829);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm831 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop832 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop832)
                                                                    {
                                                                        case "Versioning":
                                                                            itm831.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm831.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm831.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm796.LinkedReferences.Add(itm831);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm796.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop833 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop833)
                                                            {
                                                                case "Flags":
                                                                    itm796.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm834 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop835 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop835)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm834.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm834.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm796.ActivateParents.Parents.Add(itm834);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm796.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop836 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop836)
                                                            {
                                                                case "Versioning":
                                                                    itm796.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm796.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm796.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm796.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm796.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm796.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm796.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm796.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm796.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm796.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm796.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm837 = default;
                                                            itm837 = reader.GetSingle();
                                                            itm796.DistantLodData.Add(itm837);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm796.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm796.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop838 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop838)
                                                            {
                                                                case "Position":
                                                                    itm796.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm796.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm796.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm796.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm796.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm796.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm796.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm796.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm796.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm796.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm796.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm796.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm796.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm796;
                                        break;
                                    case "PlacedTrap":
                                        Mutagen.Bethesda.Skyrim.PlacedTrap itm839 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop840 = reader.GetString();
                                            reader.Read();
                                            switch(prop840)
                                            {
                                                case "Projectile":
                                                    itm839.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm839.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop841 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop841)
                                                            {
                                                                case "Version":
                                                                    itm839.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm839.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm842 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop843 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop843)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm842.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm842.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm844 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm845 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop846 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop846)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm845.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm845.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm845.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm845.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm845.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm845;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm847 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop848 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop848)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm847.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm847.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm847.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm847;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm849 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop850 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop850)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm849.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm849.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm849.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm849;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm851 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop852 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop852)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm851.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm851.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm851.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm851;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm853 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop854 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop854)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm853.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm853.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm853.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm853;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm855 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop856 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop856)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm857 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop858 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop858)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm857.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm857.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm857.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm857.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm857.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm855.Objects.Add(itm857);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm855.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm855.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm855;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm859 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop860 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop860)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm861 = default;
                                                                                                                                    itm861 = reader.GetInt32();
                                                                                                                                    itm859.Data.Add(itm861);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm859.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm859.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm859;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm862 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop863 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop863)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm864 = default;
                                                                                                                                    itm864 = reader.GetSingle();
                                                                                                                                    itm862.Data.Add(itm864);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm862.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm862.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm862;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm865 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop866 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop866)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm867 = default;
                                                                                                                                    itm867 = reader.GetBoolean();
                                                                                                                                    itm865.Data.Add(itm867);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm865.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm865.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm865;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm868 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop869 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop869)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm870 = default;
                                                                                                                                    itm870 = reader.GetString();
                                                                                                                                    itm868.Data.Add(itm870);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm868.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm868.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm844 = itm868;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm842.Properties.Add(itm844);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm839.VirtualMachineAdapter.Scripts.Add(itm842);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm839.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm839.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop871 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop871)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm839.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm839.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm839.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm839.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm872 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop873 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop873)
                                                                    {
                                                                        case "Versioning":
                                                                            itm872.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm872.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm872.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm839.Reflections.Add(itm872);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm874 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop875 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop875)
                                                                    {
                                                                        case "Versioning":
                                                                            itm874.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm874.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm874.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm839.LinkedReferences.Add(itm874);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm839.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop876 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop876)
                                                            {
                                                                case "Flags":
                                                                    itm839.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm877 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop878 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop878)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm877.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm877.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm839.ActivateParents.Parents.Add(itm877);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm839.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop879 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop879)
                                                            {
                                                                case "Versioning":
                                                                    itm839.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm839.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm839.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm839.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm839.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm839.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm839.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm839.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm839.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm839.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm839.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm880 = default;
                                                            itm880 = reader.GetSingle();
                                                            itm839.DistantLodData.Add(itm880);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm839.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm839.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop881 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop881)
                                                            {
                                                                case "Position":
                                                                    itm839.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm839.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm839.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm839.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm839.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm839.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm839.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm839.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm839.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm839.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm839.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm839.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm839.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm839;
                                        break;
                                    case "PlacedHazard":
                                        Mutagen.Bethesda.Skyrim.PlacedHazard itm882 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop883 = reader.GetString();
                                            reader.Read();
                                            switch(prop883)
                                            {
                                                case "Hazard":
                                                    itm882.Hazard.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm882.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop884 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop884)
                                                            {
                                                                case "Version":
                                                                    itm882.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm882.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm885 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop886 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop886)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm885.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm885.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm887 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm888 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop889 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop889)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm888.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm888.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm888.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm888.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm888.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm888;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm890 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop891 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop891)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm890.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm890.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm890.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm890;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm892 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop893 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop893)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm892.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm892.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm892.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm892;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm894 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop895 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop895)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm894.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm894.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm894.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm894;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm896 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop897 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop897)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm896.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm896.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm896.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm896;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm898 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop899 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop899)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm900 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop901 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop901)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm900.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm900.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm900.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm900.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm900.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm898.Objects.Add(itm900);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm898.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm898.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm898;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm902 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop903 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop903)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm904 = default;
                                                                                                                                    itm904 = reader.GetInt32();
                                                                                                                                    itm902.Data.Add(itm904);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm902.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm902.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm902;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm905 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop906 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop906)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm907 = default;
                                                                                                                                    itm907 = reader.GetSingle();
                                                                                                                                    itm905.Data.Add(itm907);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm905.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm905.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm905;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm908 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop909 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop909)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm910 = default;
                                                                                                                                    itm910 = reader.GetBoolean();
                                                                                                                                    itm908.Data.Add(itm910);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm908.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm908.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm908;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm911 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop912 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop912)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm913 = default;
                                                                                                                                    itm913 = reader.GetString();
                                                                                                                                    itm911.Data.Add(itm913);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm911.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm911.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm887 = itm911;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm885.Properties.Add(itm887);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm882.VirtualMachineAdapter.Scripts.Add(itm885);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm882.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm882.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop914 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop914)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm882.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm882.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm882.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm882.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm915 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop916 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop916)
                                                                    {
                                                                        case "Versioning":
                                                                            itm915.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm915.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm915.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm882.Reflections.Add(itm915);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm917 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop918 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop918)
                                                                    {
                                                                        case "Versioning":
                                                                            itm917.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm917.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm917.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm882.LinkedReferences.Add(itm917);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm882.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop919 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop919)
                                                            {
                                                                case "Flags":
                                                                    itm882.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm920 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop921 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop921)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm920.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm920.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm882.ActivateParents.Parents.Add(itm920);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm882.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop922 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop922)
                                                            {
                                                                case "Versioning":
                                                                    itm882.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm882.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm882.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm882.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm882.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm882.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm882.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm882.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm882.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm882.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm882.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm923 = default;
                                                            itm923 = reader.GetSingle();
                                                            itm882.DistantLodData.Add(itm923);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm882.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm882.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop924 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop924)
                                                            {
                                                                case "Position":
                                                                    itm882.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm882.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm882.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm882.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm882.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm882.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm882.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm882.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm882.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm882.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm882.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm882.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm882.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm882;
                                        break;
                                    case "PlacedMissile":
                                        Mutagen.Bethesda.Skyrim.PlacedMissile itm925 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop926 = reader.GetString();
                                            reader.Read();
                                            switch(prop926)
                                            {
                                                case "Projectile":
                                                    itm925.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm925.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop927 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop927)
                                                            {
                                                                case "Version":
                                                                    itm925.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm925.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm928 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop929 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop929)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm928.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm928.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm930 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm931 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop932 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop932)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm931.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm931.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm931.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm931.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm931.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm931;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm933 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop934 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop934)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm933.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm933.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm933.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm933;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm935 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop936 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop936)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm935.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm935.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm935.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm935;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm937 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop938 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop938)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm937.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm937.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm937.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm937;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm939 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop940 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop940)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm939.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm939.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm939.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm939;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm941 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop942 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop942)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm943 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop944 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop944)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm943.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm943.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm943.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm943.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm943.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm941.Objects.Add(itm943);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm941.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm941.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm941;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm945 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop946 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop946)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm947 = default;
                                                                                                                                    itm947 = reader.GetInt32();
                                                                                                                                    itm945.Data.Add(itm947);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm945.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm945.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm945;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm948 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop949 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop949)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm950 = default;
                                                                                                                                    itm950 = reader.GetSingle();
                                                                                                                                    itm948.Data.Add(itm950);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm948.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm948.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm948;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm951 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop952 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop952)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm953 = default;
                                                                                                                                    itm953 = reader.GetBoolean();
                                                                                                                                    itm951.Data.Add(itm953);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm951.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm951.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm951;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm954 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop955 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop955)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm956 = default;
                                                                                                                                    itm956 = reader.GetString();
                                                                                                                                    itm954.Data.Add(itm956);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm954.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm954.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm930 = itm954;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm928.Properties.Add(itm930);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm925.VirtualMachineAdapter.Scripts.Add(itm928);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm925.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm925.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop957 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop957)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm925.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm925.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm925.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm925.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm958 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop959 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop959)
                                                                    {
                                                                        case "Versioning":
                                                                            itm958.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm958.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm958.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm925.Reflections.Add(itm958);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm960 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop961 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop961)
                                                                    {
                                                                        case "Versioning":
                                                                            itm960.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm960.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm960.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm925.LinkedReferences.Add(itm960);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm925.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop962 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop962)
                                                            {
                                                                case "Flags":
                                                                    itm925.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm963 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop964 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop964)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm963.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm963.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm925.ActivateParents.Parents.Add(itm963);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm925.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop965 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop965)
                                                            {
                                                                case "Versioning":
                                                                    itm925.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm925.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm925.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm925.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm925.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm925.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm925.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm925.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm925.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm925.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm925.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm966 = default;
                                                            itm966 = reader.GetSingle();
                                                            itm925.DistantLodData.Add(itm966);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm925.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm925.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop967 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop967)
                                                            {
                                                                case "Position":
                                                                    itm925.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm925.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm925.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm925.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm925.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm925.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm925.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm925.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm925.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm925.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm925.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm925.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm925.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm516 = itm925;
                                        break;
                                    default:
                                        reader.Skip();
                                        break;
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.Persistent.Add(itm516);
                        }
                    }
                    break;
                case "PersistentTimestamp":
                    retval.PersistentTimestamp = reader.GetInt32();
                    break;
                case "PersistentUnknownGroupData":
                    retval.PersistentUnknownGroupData = reader.GetInt32();
                    break;
                case "Regions":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.Regions ??= new();
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.Regions.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "SkyAndWeatherFromRegion":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.SkyAndWeatherFromRegion.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "SkyrimMajorRecordFlags":
                    retval.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                    break;
                case "Temporary":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            IPlaced itm968 = default;
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                {
                                    case "PlacedNpc":
                                        Mutagen.Bethesda.Skyrim.PlacedNpc itm969 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop970 = reader.GetString();
                                            reader.Read();
                                            switch(prop970)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm969.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop971 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop971)
                                                            {
                                                                case "Version":
                                                                    itm969.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm969.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm972 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop973 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop973)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm972.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm972.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm974 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm975 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop976 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop976)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm975.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm975.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm975.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm975.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm975.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm975;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm977 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop978 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop978)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm977.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm977.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm977.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm977;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm979 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop980 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop980)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm979.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm979.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm979.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm979;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm981 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop982 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop982)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm981.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm981.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm981.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm981;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm983 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop984 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop984)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm983.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm983.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm983.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm983;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm985 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop986 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop986)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm987 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop988 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop988)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm987.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm987.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm987.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm987.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm987.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm985.Objects.Add(itm987);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm985.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm985.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm985;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm989 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop990 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop990)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm991 = default;
                                                                                                                                    itm991 = reader.GetInt32();
                                                                                                                                    itm989.Data.Add(itm991);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm989.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm989.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm989;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm992 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop993 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop993)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm994 = default;
                                                                                                                                    itm994 = reader.GetSingle();
                                                                                                                                    itm992.Data.Add(itm994);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm992.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm992.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm992;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm995 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop996 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop996)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm997 = default;
                                                                                                                                    itm997 = reader.GetBoolean();
                                                                                                                                    itm995.Data.Add(itm997);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm995.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm995.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm995;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm998 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop999 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop999)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1000 = default;
                                                                                                                                    itm1000 = reader.GetString();
                                                                                                                                    itm998.Data.Add(itm1000);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm998.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm998.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm974 = itm998;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm972.Properties.Add(itm974);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm969.VirtualMachineAdapter.Scripts.Add(itm972);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm969.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1001 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1001)
                                                            {
                                                                case "IdleTime":
                                                                    itm969.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm969.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm969.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm969.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm1002 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm1003 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1004 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1004)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm1003.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1002 = itm1003;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm1005 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1006 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1006)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm1005.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1002 = itm1005;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm969.Patrol.Topics.Add(itm1002);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "MerchantContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.MerchantContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Count":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.Count = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Health":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.Health = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1007 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1008 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1008)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1007.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1007.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1007.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm969.LinkedReferences.Add(itm1007);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm969.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1009 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1009)
                                                            {
                                                                case "Flags":
                                                                    itm969.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1010 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1011 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1011)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1010.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1010.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm969.ActivateParents.Parents.Add(itm1010);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferenceColor":
                                                    itm969.LinkedReferenceColor = new Mutagen.Bethesda.Skyrim.LinkedReferenceColor();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1012 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1012)
                                                            {
                                                                case "Start":
                                                                    itm969.LinkedReferenceColor.Start = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "End":
                                                                    itm969.LinkedReferenceColor.End = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm969.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm969.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Horse":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.Horse.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm969.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1013 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1013)
                                                            {
                                                                case "Versioning":
                                                                    itm969.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm969.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm969.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm969.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Ownership":
                                                    itm969.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1014 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1014)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm969.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm969.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm969.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IsIgnoredBySandbox2":
                                                    itm969.IsIgnoredBySandbox2 = reader.GetBoolean();
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm969.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm969.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1015 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1015)
                                                            {
                                                                case "Position":
                                                                    itm969.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm969.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm969.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.PlacedNpc.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm969.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm969.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm969.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm969.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm969.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm969.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm969.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm969.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm969.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm969.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm969;
                                        break;
                                    case "PlacedObject":
                                        Mutagen.Bethesda.Skyrim.PlacedObject itm1016 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1017 = reader.GetString();
                                            reader.Read();
                                            switch(prop1017)
                                            {
                                                case "VirtualMachineAdapter":
                                                    itm1016.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1018 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1018)
                                                            {
                                                                case "Version":
                                                                    itm1016.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1016.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1019 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1020 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1020)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1019.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1019.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1021 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1022 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1023 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1023)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1022.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1022.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1022.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1022.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1022.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1022;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1024 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1025 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1025)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1024.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1024.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1024.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1024;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1026 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1027 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1027)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1026.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1026.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1026.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1026;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1028 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1029 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1029)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1028.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1028.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1028.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1028;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1030 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1031 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1031)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1030.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1030.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1030.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1030;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1032 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1033 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1033)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1034 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1035 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1035)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1034.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1034.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1034.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1034.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1034.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1032.Objects.Add(itm1034);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1032.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1032.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1032;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1036 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1037 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1037)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1038 = default;
                                                                                                                                    itm1038 = reader.GetInt32();
                                                                                                                                    itm1036.Data.Add(itm1038);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1036.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1036.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1036;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1039 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1040 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1040)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1041 = default;
                                                                                                                                    itm1041 = reader.GetSingle();
                                                                                                                                    itm1039.Data.Add(itm1041);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1039.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1039.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1039;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1042 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1043 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1043)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1044 = default;
                                                                                                                                    itm1044 = reader.GetBoolean();
                                                                                                                                    itm1042.Data.Add(itm1044);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1042.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1042.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1042;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1045 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1046 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1046)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1047 = default;
                                                                                                                                    itm1047 = reader.GetString();
                                                                                                                                    itm1045.Data.Add(itm1047);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1045.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1045.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1021 = itm1045;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1019.Properties.Add(itm1021);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1016.VirtualMachineAdapter.Scripts.Add(itm1019);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Base":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.Base.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "BoundHalfExtents":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.BoundHalfExtents = SerializerExtensions.ReadP3Float(ref reader, options);
                                                    }
                                                    break;
                                                case "Primitive":
                                                    itm1016.Primitive = new Mutagen.Bethesda.Skyrim.PlacedPrimitive();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1048 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1048)
                                                            {
                                                                case "Bounds":
                                                                    itm1016.Primitive.Bounds = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Color":
                                                                    itm1016.Primitive.Color = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                                    break;
                                                                case "Unknown":
                                                                    itm1016.Primitive.Unknown = reader.GetSingle();
                                                                    break;
                                                                case "Type":
                                                                    itm1016.Primitive.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedPrimitive.TypeEnum>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XORD":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.XORD = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "OcclusionPlane":
                                                    itm1016.OcclusionPlane = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1049 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1049)
                                                            {
                                                                case "Width":
                                                                    itm1016.OcclusionPlane.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm1016.OcclusionPlane.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm1016.OcclusionPlane.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm1016.OcclusionPlane.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm1016.OcclusionPlane.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm1016.OcclusionPlane.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm1016.OcclusionPlane.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Portals":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.Portals ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.Portal itm1050 = new Mutagen.Bethesda.Skyrim.Portal();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1051 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1051)
                                                                    {
                                                                        case "Origin":
                                                                            itm1050.Origin.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Destination":
                                                                            itm1050.Destination.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1016.Portals.Add(itm1050);
                                                        }
                                                    }
                                                    break;
                                                case "RoomPortal":
                                                    itm1016.RoomPortal = new Mutagen.Bethesda.Skyrim.Bounding();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1052 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1052)
                                                            {
                                                                case "Width":
                                                                    itm1016.RoomPortal.Width = reader.GetSingle();
                                                                    break;
                                                                case "Height":
                                                                    itm1016.RoomPortal.Height = reader.GetSingle();
                                                                    break;
                                                                case "Position":
                                                                    itm1016.RoomPortal.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "RotationQ1":
                                                                    itm1016.RoomPortal.RotationQ1 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ2":
                                                                    itm1016.RoomPortal.RotationQ2 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ3":
                                                                    itm1016.RoomPortal.RotationQ3 = reader.GetSingle();
                                                                    break;
                                                                case "RotationQ4":
                                                                    itm1016.RoomPortal.RotationQ4 = reader.GetSingle();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Unknown":
                                                    itm1016.Unknown = reader.GetInt16();
                                                    break;
                                                case "LightingTemplate":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ImageSpace":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LinkedRooms":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1016.LinkedRooms.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsMultiBoundPrimitive":
                                                    itm1016.IsMultiBoundPrimitive = reader.GetBoolean();
                                                    break;
                                                case "RagdollData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.RagdollData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "RagdollBipedData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.RagdollBipedData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Radius":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.Radius = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1053 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1054 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1054)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1053.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1053.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1053.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1016.Reflections.Add(itm1053);
                                                        }
                                                    }
                                                    break;
                                                case "LitWater":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1016.LitWater.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LightData":
                                                    itm1016.LightData = new Mutagen.Bethesda.Skyrim.LightData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1055 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1055)
                                                            {
                                                                case "Versioning":
                                                                    itm1016.LightData.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LightData.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "FovOffset":
                                                                    itm1016.LightData.FovOffset = reader.GetSingle();
                                                                    break;
                                                                case "FadeOffset":
                                                                    itm1016.LightData.FadeOffset = reader.GetSingle();
                                                                    break;
                                                                case "EndDistanceCap":
                                                                    itm1016.LightData.EndDistanceCap = reader.GetSingle();
                                                                    break;
                                                                case "ShadowDepthBias":
                                                                    itm1016.LightData.ShadowDepthBias = reader.GetSingle();
                                                                    break;
                                                                case "Unknown":
                                                                    itm1016.LightData.Unknown = reader.GetInt32();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Alpha":
                                                    itm1016.Alpha = new Mutagen.Bethesda.Skyrim.Alpha();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1056 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1056)
                                                            {
                                                                case "Cutoff":
                                                                    itm1016.Alpha.Cutoff = reader.GetByte();
                                                                    break;
                                                                case "Base":
                                                                    itm1016.Alpha.Base = reader.GetByte();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportDestination":
                                                    itm1016.TeleportDestination = new Mutagen.Bethesda.Skyrim.TeleportDestination();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1057 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1057)
                                                            {
                                                                case "Door":
                                                                    itm1016.TeleportDestination.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Position":
                                                                    itm1016.TeleportDestination.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1016.TeleportDestination.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Flags":
                                                                    itm1016.TeleportDestination.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.TeleportDestination.Flag>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "TeleportMessageBox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.TeleportMessageBox.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiboundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.MultiboundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XWCN":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.XWCN = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XWCS":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.XWCS = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "WaterVelocity":
                                                    itm1016.WaterVelocity = new Mutagen.Bethesda.Skyrim.WaterVelocity();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1058 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1058)
                                                            {
                                                                case "Offset":
                                                                    itm1016.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1016.WaterVelocity.Unknown = reader.GetInt32();
                                                                    break;
                                                                case "Angle":
                                                                    itm1016.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Unknown2":
                                                                    itm1016.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "XCVL":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.XCVL = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZR":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.XCZR.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "XCZA":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.XCZA = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "XCZC":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.XCZC.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "SpawnContainer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.SpawnContainer.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "ActivateParents":
                                                    itm1016.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1059 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1059)
                                                            {
                                                                case "Flags":
                                                                    itm1016.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1060 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1061 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1061)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1060.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1060.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1016.ActivateParents.Parents.Add(itm1060);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LeveledItemBaseObject":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.LeveledItemBaseObject.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "LevelModifier":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.LevelModifier = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.Level>(ref reader, options);
                                                    }
                                                    break;
                                                case "PersistentLocation":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.PersistentLocation.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "CollisionLayer":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.CollisionLayer = reader.GetUInt32();
                                                    }
                                                    break;
                                                case "Lock":
                                                    itm1016.Lock = new Mutagen.Bethesda.Skyrim.LockData();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1062 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1062)
                                                            {
                                                                case "Level":
                                                                    itm1016.Lock.Level = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.LockLevel>(ref reader, options);
                                                                    break;
                                                                case "Unused":
                                                                    itm1016.Lock.Unused = reader.GetBytesFromBase64();
                                                                    break;
                                                                case "Key":
                                                                    itm1016.Lock.Key.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1016.Lock.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LockData.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unused2":
                                                                    itm1016.Lock.Unused2 = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "NavigationDoorLink":
                                                    itm1016.NavigationDoorLink = new Mutagen.Bethesda.Skyrim.NavigationDoorLink();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1063 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1063)
                                                            {
                                                                case "NavMesh":
                                                                    itm1016.NavigationDoorLink.NavMesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "TeleportMarkerTriangle":
                                                                    itm1016.NavigationDoorLink.TeleportMarkerTriangle = reader.GetInt16();
                                                                    break;
                                                                case "Unused":
                                                                    itm1016.NavigationDoorLink.Unused = reader.GetInt16();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1016.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "IsIgnoredBySandbox":
                                                    itm1016.IsIgnoredBySandbox = reader.GetBoolean();
                                                    break;
                                                case "Ownership":
                                                    itm1016.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1064 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1064)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1016.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1016.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "ItemCount":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.ItemCount = reader.GetInt32();
                                                    }
                                                    break;
                                                case "Charge":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.Charge = reader.GetSingle();
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "EnableParent":
                                                    itm1016.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1065 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1065)
                                                            {
                                                                case "Versioning":
                                                                    itm1016.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1016.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1016.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1016.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1066 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1067 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1067)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1066.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1066.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1066.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1016.LinkedReferences.Add(itm1066);
                                                        }
                                                    }
                                                    break;
                                                case "Patrol":
                                                    itm1016.Patrol = new Mutagen.Bethesda.Skyrim.Patrol();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1068 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1068)
                                                            {
                                                                case "IdleTime":
                                                                    itm1016.Patrol.IdleTime = reader.GetSingle();
                                                                    break;
                                                                case "Idle":
                                                                    itm1016.Patrol.Idle.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "SCHR":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1016.Patrol.SCHR = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "SCTX":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1016.Patrol.SCTX = reader.GetBytesFromBase64();
                                                                    }
                                                                    break;
                                                                case "Topics":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            ATopicReference itm1069 = default;
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                {
                                                                                    case "TopicReference":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReference itm1070 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1071 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1071)
                                                                                            {
                                                                                                case "Reference":
                                                                                                    itm1070.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1069 = itm1070;
                                                                                        break;
                                                                                    case "TopicReferenceSubtype":
                                                                                        Mutagen.Bethesda.Skyrim.TopicReferenceSubtype itm1072 = new();
                                                                                        while (true)
                                                                                        {
                                                                                            reader.Read();
                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                break;
                                                                                            var prop1073 = reader.GetString();
                                                                                            reader.Read();
                                                                                            switch(prop1073)
                                                                                            {
                                                                                                case "Subtype":
                                                                                                    itm1072.Subtype = new RecordType(reader.ReadString());
                                                                                                    break;
                                                                                            }
                                                                                        }
                                                                                        itm1069 = itm1072;
                                                                                        break;
                                                                                    default:
                                                                                        reader.Skip();
                                                                                        break;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1016.Patrol.Topics.Add(itm1069);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Action":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.Action = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.PlacedObject.ActionFlag>(ref reader, options);
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "IsOpenByDefault":
                                                    itm1016.IsOpenByDefault = reader.GetBoolean();
                                                    break;
                                                case "MapMarker":
                                                    itm1016.MapMarker = new Mutagen.Bethesda.Skyrim.MapMarker();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1074 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1074)
                                                            {
                                                                case "Flags":
                                                                    itm1016.MapMarker.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.MapMarker.Flag>(ref reader, options);
                                                                    break;
                                                                case "Name":
                                                                    itm1016.MapMarker.Name ??= new TranslatedString(Language.English);
                                                                    SerializerExtensions.ReadTranslatedString(ref reader, itm1016.MapMarker.Name, options);
                                                                    break;
                                                                case "Type":
                                                                    itm1016.MapMarker.Type = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.MapMarker.MarkerType>(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "AttachRef":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1016.AttachRef.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1016.DistantLodData = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1016.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1075 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1075)
                                                            {
                                                                case "Position":
                                                                    itm1016.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1016.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1016.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1016.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1016.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1016.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1016.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1016.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1016.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1016.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1016.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1016.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1016;
                                        break;
                                    case "PlacedArrow":
                                        Mutagen.Bethesda.Skyrim.PlacedArrow itm1076 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1077 = reader.GetString();
                                            reader.Read();
                                            switch(prop1077)
                                            {
                                                case "Projectile":
                                                    itm1076.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1076.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1078 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1078)
                                                            {
                                                                case "Version":
                                                                    itm1076.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1076.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1079 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1080 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1080)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1079.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1079.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1081 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1082 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1083 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1083)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1082.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1082.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1082.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1082.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1082.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1082;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1084 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1085 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1085)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1084.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1084.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1084.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1084;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1086 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1087 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1087)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1086.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1086.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1086.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1086;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1088 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1089 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1089)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1088.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1088.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1088.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1088;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1090 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1091 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1091)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1090.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1090.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1090.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1090;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1092 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1093 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1093)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1094 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1095 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1095)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1094.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1094.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1094.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1094.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1094.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1092.Objects.Add(itm1094);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1092.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1092.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1092;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1096 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1097 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1097)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1098 = default;
                                                                                                                                    itm1098 = reader.GetInt32();
                                                                                                                                    itm1096.Data.Add(itm1098);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1096.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1096.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1096;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1099 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1100 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1100)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1101 = default;
                                                                                                                                    itm1101 = reader.GetSingle();
                                                                                                                                    itm1099.Data.Add(itm1101);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1099.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1099.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1099;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1102 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1103 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1103)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1104 = default;
                                                                                                                                    itm1104 = reader.GetBoolean();
                                                                                                                                    itm1102.Data.Add(itm1104);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1102.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1102.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1102;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1105 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1106 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1106)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1107 = default;
                                                                                                                                    itm1107 = reader.GetString();
                                                                                                                                    itm1105.Data.Add(itm1107);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1105.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1105.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1081 = itm1105;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1079.Properties.Add(itm1081);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1076.VirtualMachineAdapter.Scripts.Add(itm1079);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1076.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1076.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1108 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1108)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1076.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1076.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1076.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1076.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1109 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1110 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1110)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1109.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1109.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1109.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1076.Reflections.Add(itm1109);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1111 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1112 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1112)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1111.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1111.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1111.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1076.LinkedReferences.Add(itm1111);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1076.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1113 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1113)
                                                            {
                                                                case "Flags":
                                                                    itm1076.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1114 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1115 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1115)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1114.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1114.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1076.ActivateParents.Parents.Add(itm1114);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1076.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1116 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1116)
                                                            {
                                                                case "Versioning":
                                                                    itm1076.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1076.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1076.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1076.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1076.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1076.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1076.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1076.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1076.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1076.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1076.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1117 = default;
                                                            itm1117 = reader.GetSingle();
                                                            itm1076.DistantLodData.Add(itm1117);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1076.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1076.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1118 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1118)
                                                            {
                                                                case "Position":
                                                                    itm1076.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1076.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1076.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1076.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1076.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1076.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1076.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1076.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1076.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1076.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1076.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1076.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1076.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1076;
                                        break;
                                    case "PlacedBeam":
                                        Mutagen.Bethesda.Skyrim.PlacedBeam itm1119 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1120 = reader.GetString();
                                            reader.Read();
                                            switch(prop1120)
                                            {
                                                case "Projectile":
                                                    itm1119.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1119.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1121 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1121)
                                                            {
                                                                case "Version":
                                                                    itm1119.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1119.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1122 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1123 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1123)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1122.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1122.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1124 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1125 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1126 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1126)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1125.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1125.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1125.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1125.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1125.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1125;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1127 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1128 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1128)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1127.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1127.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1127.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1127;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1129 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1130 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1130)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1129.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1129.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1129.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1129;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1131 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1132 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1132)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1131.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1131.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1131.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1131;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1133 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1134 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1134)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1133.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1133.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1133.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1133;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1135 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1136 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1136)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1137 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1138 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1138)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1137.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1137.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1137.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1137.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1137.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1135.Objects.Add(itm1137);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1135.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1135.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1135;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1139 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1140 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1140)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1141 = default;
                                                                                                                                    itm1141 = reader.GetInt32();
                                                                                                                                    itm1139.Data.Add(itm1141);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1139.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1139.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1139;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1142 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1143 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1143)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1144 = default;
                                                                                                                                    itm1144 = reader.GetSingle();
                                                                                                                                    itm1142.Data.Add(itm1144);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1142.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1142.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1142;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1145 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1146 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1146)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1147 = default;
                                                                                                                                    itm1147 = reader.GetBoolean();
                                                                                                                                    itm1145.Data.Add(itm1147);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1145.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1145.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1145;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1148 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1149 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1149)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1150 = default;
                                                                                                                                    itm1150 = reader.GetString();
                                                                                                                                    itm1148.Data.Add(itm1150);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1148.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1148.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1124 = itm1148;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1122.Properties.Add(itm1124);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1119.VirtualMachineAdapter.Scripts.Add(itm1122);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1119.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1119.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1151 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1151)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1119.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1119.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1119.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1119.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1152 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1153 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1153)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1152.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1152.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1152.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1119.Reflections.Add(itm1152);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1154 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1155 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1155)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1154.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1154.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1154.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1119.LinkedReferences.Add(itm1154);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1119.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1156 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1156)
                                                            {
                                                                case "Flags":
                                                                    itm1119.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1157 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1158 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1158)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1157.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1157.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1119.ActivateParents.Parents.Add(itm1157);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1119.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1159 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1159)
                                                            {
                                                                case "Versioning":
                                                                    itm1119.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1119.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1119.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1119.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1119.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1119.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1119.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1119.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1119.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1119.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1119.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1160 = default;
                                                            itm1160 = reader.GetSingle();
                                                            itm1119.DistantLodData.Add(itm1160);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1119.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1119.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1161 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1161)
                                                            {
                                                                case "Position":
                                                                    itm1119.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1119.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1119.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1119.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1119.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1119.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1119.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1119.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1119.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1119.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1119.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1119.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1119.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1119;
                                        break;
                                    case "PlacedFlame":
                                        Mutagen.Bethesda.Skyrim.PlacedFlame itm1162 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1163 = reader.GetString();
                                            reader.Read();
                                            switch(prop1163)
                                            {
                                                case "Projectile":
                                                    itm1162.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1162.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1164 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1164)
                                                            {
                                                                case "Version":
                                                                    itm1162.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1162.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1165 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1166 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1166)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1165.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1165.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1167 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1168 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1169 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1169)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1168.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1168.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1168.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1168.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1168.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1168;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1170 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1171 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1171)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1170.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1170.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1170.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1170;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1172 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1173 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1173)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1172.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1172.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1172.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1172;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1174 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1175 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1175)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1174.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1174.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1174.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1174;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1176 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1177 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1177)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1176.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1176.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1176.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1176;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1178 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1179 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1179)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1180 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1181 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1181)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1180.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1180.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1180.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1180.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1180.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1178.Objects.Add(itm1180);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1178.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1178.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1178;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1182 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1183 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1183)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1184 = default;
                                                                                                                                    itm1184 = reader.GetInt32();
                                                                                                                                    itm1182.Data.Add(itm1184);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1182.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1182.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1182;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1185 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1186 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1186)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1187 = default;
                                                                                                                                    itm1187 = reader.GetSingle();
                                                                                                                                    itm1185.Data.Add(itm1187);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1185.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1185.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1185;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1188 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1189 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1189)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1190 = default;
                                                                                                                                    itm1190 = reader.GetBoolean();
                                                                                                                                    itm1188.Data.Add(itm1190);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1188.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1188.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1188;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1191 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1192 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1192)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1193 = default;
                                                                                                                                    itm1193 = reader.GetString();
                                                                                                                                    itm1191.Data.Add(itm1193);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1191.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1191.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1167 = itm1191;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1165.Properties.Add(itm1167);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1162.VirtualMachineAdapter.Scripts.Add(itm1165);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1162.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1162.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1194 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1194)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1162.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1162.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1162.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1162.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1195 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1196 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1196)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1195.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1195.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1195.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1162.Reflections.Add(itm1195);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1197 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1198 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1198)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1197.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1197.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1197.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1162.LinkedReferences.Add(itm1197);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1162.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1199 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1199)
                                                            {
                                                                case "Flags":
                                                                    itm1162.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1200 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1201 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1201)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1200.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1200.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1162.ActivateParents.Parents.Add(itm1200);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1162.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1202 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1202)
                                                            {
                                                                case "Versioning":
                                                                    itm1162.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1162.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1162.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1162.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1162.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1162.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1162.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1162.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1162.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1162.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1162.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1203 = default;
                                                            itm1203 = reader.GetSingle();
                                                            itm1162.DistantLodData.Add(itm1203);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1162.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1162.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1204 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1204)
                                                            {
                                                                case "Position":
                                                                    itm1162.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1162.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1162.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1162.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1162.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1162.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1162.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1162.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1162.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1162.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1162.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1162.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1162.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1162;
                                        break;
                                    case "PlacedCone":
                                        Mutagen.Bethesda.Skyrim.PlacedCone itm1205 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1206 = reader.GetString();
                                            reader.Read();
                                            switch(prop1206)
                                            {
                                                case "Projectile":
                                                    itm1205.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1205.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1207 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1207)
                                                            {
                                                                case "Version":
                                                                    itm1205.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1205.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1208 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1209 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1209)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1208.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1208.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1210 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1211 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1212 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1212)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1211.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1211.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1211.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1211.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1211.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1211;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1213 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1214 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1214)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1213.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1213.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1213.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1213;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1215 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1216 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1216)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1215.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1215.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1215.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1215;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1217 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1218 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1218)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1217.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1217.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1217.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1217;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1219 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1220 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1220)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1219.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1219.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1219.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1219;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1221 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1222 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1222)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1223 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1224 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1224)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1223.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1223.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1223.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1223.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1223.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1221.Objects.Add(itm1223);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1221.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1221.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1221;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1225 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1226 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1226)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1227 = default;
                                                                                                                                    itm1227 = reader.GetInt32();
                                                                                                                                    itm1225.Data.Add(itm1227);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1225.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1225.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1225;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1228 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1229 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1229)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1230 = default;
                                                                                                                                    itm1230 = reader.GetSingle();
                                                                                                                                    itm1228.Data.Add(itm1230);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1228.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1228.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1228;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1231 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1232 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1232)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1233 = default;
                                                                                                                                    itm1233 = reader.GetBoolean();
                                                                                                                                    itm1231.Data.Add(itm1233);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1231.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1231.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1231;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1234 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1235 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1235)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1236 = default;
                                                                                                                                    itm1236 = reader.GetString();
                                                                                                                                    itm1234.Data.Add(itm1236);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1234.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1234.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1210 = itm1234;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1208.Properties.Add(itm1210);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1205.VirtualMachineAdapter.Scripts.Add(itm1208);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1205.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1205.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1237 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1237)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1205.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1205.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1205.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1205.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1238 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1239 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1239)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1238.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1238.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1238.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1205.Reflections.Add(itm1238);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1240 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1241 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1241)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1240.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1240.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1240.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1205.LinkedReferences.Add(itm1240);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1205.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1242 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1242)
                                                            {
                                                                case "Flags":
                                                                    itm1205.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1243 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1244 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1244)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1243.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1243.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1205.ActivateParents.Parents.Add(itm1243);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1205.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1245 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1245)
                                                            {
                                                                case "Versioning":
                                                                    itm1205.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1205.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1205.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1205.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1205.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1205.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1205.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1205.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1205.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1205.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1205.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1246 = default;
                                                            itm1246 = reader.GetSingle();
                                                            itm1205.DistantLodData.Add(itm1246);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1205.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1205.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1247 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1247)
                                                            {
                                                                case "Position":
                                                                    itm1205.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1205.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1205.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1205.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1205.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1205.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1205.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1205.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1205.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1205.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1205.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1205.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1205.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1205;
                                        break;
                                    case "PlacedBarrier":
                                        Mutagen.Bethesda.Skyrim.PlacedBarrier itm1248 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1249 = reader.GetString();
                                            reader.Read();
                                            switch(prop1249)
                                            {
                                                case "Projectile":
                                                    itm1248.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1248.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1250 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1250)
                                                            {
                                                                case "Version":
                                                                    itm1248.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1248.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1251 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1252 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1252)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1251.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1251.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1253 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1254 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1255 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1255)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1254.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1254.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1254.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1254.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1254.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1254;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1256 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1257 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1257)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1256.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1256.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1256.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1256;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1258 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1259 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1259)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1258.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1258.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1258.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1258;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1260 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1261 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1261)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1260.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1260.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1260.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1260;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1262 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1263 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1263)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1262.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1262.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1262.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1262;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1264 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1265 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1265)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1266 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1267 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1267)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1266.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1266.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1266.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1266.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1266.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1264.Objects.Add(itm1266);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1264.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1264.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1264;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1268 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1269 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1269)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1270 = default;
                                                                                                                                    itm1270 = reader.GetInt32();
                                                                                                                                    itm1268.Data.Add(itm1270);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1268.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1268.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1268;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1271 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1272 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1272)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1273 = default;
                                                                                                                                    itm1273 = reader.GetSingle();
                                                                                                                                    itm1271.Data.Add(itm1273);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1271.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1271.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1271;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1274 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1275 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1275)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1276 = default;
                                                                                                                                    itm1276 = reader.GetBoolean();
                                                                                                                                    itm1274.Data.Add(itm1276);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1274.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1274.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1274;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1277 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1278 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1278)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1279 = default;
                                                                                                                                    itm1279 = reader.GetString();
                                                                                                                                    itm1277.Data.Add(itm1279);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1277.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1277.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1253 = itm1277;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1251.Properties.Add(itm1253);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1248.VirtualMachineAdapter.Scripts.Add(itm1251);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1248.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1248.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1280 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1280)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1248.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1248.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1248.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1248.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1281 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1282 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1282)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1281.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1281.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1281.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1248.Reflections.Add(itm1281);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1283 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1284 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1284)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1283.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1283.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1283.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1248.LinkedReferences.Add(itm1283);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1248.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1285 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1285)
                                                            {
                                                                case "Flags":
                                                                    itm1248.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1286 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1287 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1287)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1286.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1286.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1248.ActivateParents.Parents.Add(itm1286);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1248.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1288 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1288)
                                                            {
                                                                case "Versioning":
                                                                    itm1248.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1248.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1248.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1248.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1248.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1248.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1248.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1248.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1248.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1248.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1248.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1289 = default;
                                                            itm1289 = reader.GetSingle();
                                                            itm1248.DistantLodData.Add(itm1289);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1248.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1248.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1290 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1290)
                                                            {
                                                                case "Position":
                                                                    itm1248.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1248.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1248.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1248.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1248.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1248.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1248.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1248.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1248.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1248.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1248.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1248.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1248.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1248;
                                        break;
                                    case "PlacedTrap":
                                        Mutagen.Bethesda.Skyrim.PlacedTrap itm1291 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1292 = reader.GetString();
                                            reader.Read();
                                            switch(prop1292)
                                            {
                                                case "Projectile":
                                                    itm1291.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1291.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1293 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1293)
                                                            {
                                                                case "Version":
                                                                    itm1291.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1291.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1294 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1295 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1295)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1294.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1294.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1296 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1297 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1298 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1298)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1297.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1297.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1297.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1297.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1297.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1297;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1299 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1300 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1300)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1299.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1299.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1299.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1299;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1301 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1302 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1302)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1301.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1301.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1301.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1301;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1303 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1304 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1304)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1303.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1303.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1303.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1303;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1305 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1306 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1306)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1305.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1305.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1305.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1305;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1307 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1308 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1308)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1309 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1310 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1310)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1309.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1309.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1309.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1309.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1309.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1307.Objects.Add(itm1309);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1307.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1307.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1307;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1311 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1312 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1312)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1313 = default;
                                                                                                                                    itm1313 = reader.GetInt32();
                                                                                                                                    itm1311.Data.Add(itm1313);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1311.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1311.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1311;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1314 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1315 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1315)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1316 = default;
                                                                                                                                    itm1316 = reader.GetSingle();
                                                                                                                                    itm1314.Data.Add(itm1316);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1314.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1314.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1314;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1317 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1318 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1318)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1319 = default;
                                                                                                                                    itm1319 = reader.GetBoolean();
                                                                                                                                    itm1317.Data.Add(itm1319);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1317.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1317.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1317;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1320 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1321 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1321)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1322 = default;
                                                                                                                                    itm1322 = reader.GetString();
                                                                                                                                    itm1320.Data.Add(itm1322);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1320.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1320.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1296 = itm1320;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1294.Properties.Add(itm1296);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1291.VirtualMachineAdapter.Scripts.Add(itm1294);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1291.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1291.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1323 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1323)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1291.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1291.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1291.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1291.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1324 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1325 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1325)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1324.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1324.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1324.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1291.Reflections.Add(itm1324);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1326 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1327 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1327)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1326.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1326.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1326.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1291.LinkedReferences.Add(itm1326);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1291.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1328 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1328)
                                                            {
                                                                case "Flags":
                                                                    itm1291.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1329 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1330 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1330)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1329.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1329.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1291.ActivateParents.Parents.Add(itm1329);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1291.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1331 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1331)
                                                            {
                                                                case "Versioning":
                                                                    itm1291.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1291.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1291.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1291.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1291.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1291.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1291.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1291.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1291.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1291.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1291.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1332 = default;
                                                            itm1332 = reader.GetSingle();
                                                            itm1291.DistantLodData.Add(itm1332);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1291.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1291.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1333 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1333)
                                                            {
                                                                case "Position":
                                                                    itm1291.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1291.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1291.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1291.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1291.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1291.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1291.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1291.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1291.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1291.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1291.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1291.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1291.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1291;
                                        break;
                                    case "PlacedHazard":
                                        Mutagen.Bethesda.Skyrim.PlacedHazard itm1334 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1335 = reader.GetString();
                                            reader.Read();
                                            switch(prop1335)
                                            {
                                                case "Hazard":
                                                    itm1334.Hazard.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1334.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1336 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1336)
                                                            {
                                                                case "Version":
                                                                    itm1334.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1334.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1337 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1338 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1338)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1337.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1337.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1339 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1340 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1341 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1341)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1340.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1340.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1340.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1340.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1340.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1340;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1342 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1343 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1343)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1342.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1342.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1342.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1342;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1344 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1345 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1345)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1344.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1344.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1344.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1344;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1346 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1347 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1347)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1346.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1346.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1346.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1346;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1348 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1349 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1349)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1348.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1348.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1348.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1348;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1350 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1351 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1351)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1352 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1353 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1353)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1352.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1352.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1352.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1352.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1352.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1350.Objects.Add(itm1352);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1350.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1350.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1350;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1354 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1355 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1355)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1356 = default;
                                                                                                                                    itm1356 = reader.GetInt32();
                                                                                                                                    itm1354.Data.Add(itm1356);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1354.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1354.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1354;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1357 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1358 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1358)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1359 = default;
                                                                                                                                    itm1359 = reader.GetSingle();
                                                                                                                                    itm1357.Data.Add(itm1359);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1357.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1357.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1357;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1360 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1361 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1361)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1362 = default;
                                                                                                                                    itm1362 = reader.GetBoolean();
                                                                                                                                    itm1360.Data.Add(itm1362);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1360.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1360.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1360;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1363 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1364 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1364)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1365 = default;
                                                                                                                                    itm1365 = reader.GetString();
                                                                                                                                    itm1363.Data.Add(itm1365);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1363.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1363.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1339 = itm1363;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1337.Properties.Add(itm1339);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1334.VirtualMachineAdapter.Scripts.Add(itm1337);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1334.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1334.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1366 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1366)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1334.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1334.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1334.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1334.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1367 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1368 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1368)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1367.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1367.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1367.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1334.Reflections.Add(itm1367);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1369 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1370 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1370)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1369.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1369.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1369.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1334.LinkedReferences.Add(itm1369);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1334.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1371 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1371)
                                                            {
                                                                case "Flags":
                                                                    itm1334.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1372 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1373 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1373)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1372.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1372.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1334.ActivateParents.Parents.Add(itm1372);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1334.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1374 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1374)
                                                            {
                                                                case "Versioning":
                                                                    itm1334.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1334.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1334.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1334.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1334.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1334.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1334.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1334.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1334.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1334.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1334.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1375 = default;
                                                            itm1375 = reader.GetSingle();
                                                            itm1334.DistantLodData.Add(itm1375);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1334.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1334.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1376 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1376)
                                                            {
                                                                case "Position":
                                                                    itm1334.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1334.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1334.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1334.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1334.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1334.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1334.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1334.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1334.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1334.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1334.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1334.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1334.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1334;
                                        break;
                                    case "PlacedMissile":
                                        Mutagen.Bethesda.Skyrim.PlacedMissile itm1377 = new();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop1378 = reader.GetString();
                                            reader.Read();
                                            switch(prop1378)
                                            {
                                                case "Projectile":
                                                    itm1377.Projectile.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "VirtualMachineAdapter":
                                                    itm1377.VirtualMachineAdapter = new Mutagen.Bethesda.Skyrim.VirtualMachineAdapter();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1379 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1379)
                                                            {
                                                                case "Version":
                                                                    itm1377.VirtualMachineAdapter.Version = reader.GetInt16();
                                                                    break;
                                                                case "ObjectFormat":
                                                                    itm1377.VirtualMachineAdapter.ObjectFormat = reader.GetUInt16();
                                                                    break;
                                                                case "Scripts":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ScriptEntry itm1380 = new Mutagen.Bethesda.Skyrim.ScriptEntry();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1381 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1381)
                                                                                    {
                                                                                        case "Name":
                                                                                            itm1380.Name = reader.GetString();
                                                                                            break;
                                                                                        case "Flags":
                                                                                            itm1380.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptEntry.Flag>(ref reader, options);
                                                                                            break;
                                                                                        case "Properties":
                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                            {
                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                    throw new JsonException();
                                                                                                while (true)
                                                                                                {
                                                                                                    reader.Read();
                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                        break;
                                                                                                    ScriptProperty itm1382 = default;
                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                    {
                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                            throw new JsonException();
                                                                                                        switch(SerializerExtensions.ReadTag(ref reader, $"$type", options))
                                                                                                        {
                                                                                                            case "ScriptObjectProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1383 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1384 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1384)
                                                                                                                    {
                                                                                                                        case "Object":
                                                                                                                            itm1383.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                            break;
                                                                                                                        case "Alias":
                                                                                                                            itm1383.Alias = reader.GetInt16();
                                                                                                                            break;
                                                                                                                        case "Unused":
                                                                                                                            itm1383.Unused = reader.GetUInt16();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1383.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1383.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1383;
                                                                                                                break;
                                                                                                            case "ScriptStringProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringProperty itm1385 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1386 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1386)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1385.Data = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1385.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1385.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1385;
                                                                                                                break;
                                                                                                            case "ScriptIntProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntProperty itm1387 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1388 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1388)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1387.Data = reader.GetInt32();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1387.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1387.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1387;
                                                                                                                break;
                                                                                                            case "ScriptFloatProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatProperty itm1389 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1390 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1390)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1389.Data = reader.GetSingle();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1389.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1389.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1389;
                                                                                                                break;
                                                                                                            case "ScriptBoolProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolProperty itm1391 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1392 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1392)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            itm1391.Data = reader.GetBoolean();
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1391.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1391.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1391;
                                                                                                                break;
                                                                                                            case "ScriptObjectListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptObjectListProperty itm1393 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1394 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1394)
                                                                                                                    {
                                                                                                                        case "Objects":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Mutagen.Bethesda.Skyrim.ScriptObjectProperty itm1395 = new Mutagen.Bethesda.Skyrim.ScriptObjectProperty();
                                                                                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                                                                                    {
                                                                                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                                                                                            throw new JsonException();
                                                                                                                                        while (true)
                                                                                                                                        {
                                                                                                                                            reader.Read();
                                                                                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                                                break;
                                                                                                                                            var prop1396 = reader.GetString();
                                                                                                                                            reader.Read();
                                                                                                                                            switch(prop1396)
                                                                                                                                            {
                                                                                                                                                case "Object":
                                                                                                                                                    itm1395.Object.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                                                                                    break;
                                                                                                                                                case "Alias":
                                                                                                                                                    itm1395.Alias = reader.GetInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Unused":
                                                                                                                                                    itm1395.Unused = reader.GetUInt16();
                                                                                                                                                    break;
                                                                                                                                                case "Name":
                                                                                                                                                    itm1395.Name = reader.GetString();
                                                                                                                                                    break;
                                                                                                                                                case "Flags":
                                                                                                                                                    itm1395.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                                                    break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        reader.Skip();
                                                                                                                                    }
                                                                                                                                    itm1393.Objects.Add(itm1395);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1393.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1393.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1393;
                                                                                                                break;
                                                                                                            case "ScriptIntListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptIntListProperty itm1397 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1398 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1398)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Int32 itm1399 = default;
                                                                                                                                    itm1399 = reader.GetInt32();
                                                                                                                                    itm1397.Data.Add(itm1399);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1397.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1397.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1397;
                                                                                                                break;
                                                                                                            case "ScriptFloatListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptFloatListProperty itm1400 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1401 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1401)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Single itm1402 = default;
                                                                                                                                    itm1402 = reader.GetSingle();
                                                                                                                                    itm1400.Data.Add(itm1402);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1400.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1400.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1400;
                                                                                                                break;
                                                                                                            case "ScriptBoolListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptBoolListProperty itm1403 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1404 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1404)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    Boolean itm1405 = default;
                                                                                                                                    itm1405 = reader.GetBoolean();
                                                                                                                                    itm1403.Data.Add(itm1405);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1403.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1403.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1403;
                                                                                                                break;
                                                                                                            case "ScriptStringListProperty":
                                                                                                                Mutagen.Bethesda.Skyrim.ScriptStringListProperty itm1406 = new();
                                                                                                                while (true)
                                                                                                                {
                                                                                                                    reader.Read();
                                                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                                                        break;
                                                                                                                    var prop1407 = reader.GetString();
                                                                                                                    reader.Read();
                                                                                                                    switch(prop1407)
                                                                                                                    {
                                                                                                                        case "Data":
                                                                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                                                                            {
                                                                                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                                                                                    throw new JsonException();
                                                                                                                                while (true)
                                                                                                                                {
                                                                                                                                    reader.Read();
                                                                                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                                                                                        break;
                                                                                                                                    String itm1408 = default;
                                                                                                                                    itm1408 = reader.GetString();
                                                                                                                                    itm1406.Data.Add(itm1408);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        case "Name":
                                                                                                                            itm1406.Name = reader.GetString();
                                                                                                                            break;
                                                                                                                        case "Flags":
                                                                                                                            itm1406.Flags = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Skyrim.ScriptProperty.Flag>(ref reader, options);
                                                                                                                            break;
                                                                                                                    }
                                                                                                                }
                                                                                                                itm1382 = itm1406;
                                                                                                                break;
                                                                                                            default:
                                                                                                                reader.Skip();
                                                                                                                break;
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        reader.Skip();
                                                                                                    }
                                                                                                    itm1380.Properties.Add(itm1382);
                                                                                                }
                                                                                            }
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1377.VirtualMachineAdapter.Scripts.Add(itm1380);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EncounterZone":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1377.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "Ownership":
                                                    itm1377.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1409 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1409)
                                                            {
                                                                case "Owner":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                        itm1377.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "FactionRank":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        itm1377.Ownership.FactionRank = reader.GetInt32();
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "HeadTrackingWeight":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1377.HeadTrackingWeight = reader.GetSingle();
                                                    }
                                                    break;
                                                case "FavorCost":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1377.FavorCost = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Reflections":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.WaterReflection itm1410 = new Mutagen.Bethesda.Skyrim.WaterReflection();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1411 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1411)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1410.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "Water":
                                                                            itm1410.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Type":
                                                                            itm1410.Type = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.WaterReflection.Flag>(ref reader, options);
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1377.Reflections.Add(itm1410);
                                                        }
                                                    }
                                                    break;
                                                case "LinkedReferences":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Mutagen.Bethesda.Skyrim.LinkedReferences itm1412 = new Mutagen.Bethesda.Skyrim.LinkedReferences();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop1413 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop1413)
                                                                    {
                                                                        case "Versioning":
                                                                            itm1412.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.LinkedReferences.VersioningBreaks>(ref reader, options);
                                                                            break;
                                                                        case "KeywordOrReference":
                                                                            itm1412.KeywordOrReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Reference":
                                                                            itm1412.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            itm1377.LinkedReferences.Add(itm1412);
                                                        }
                                                    }
                                                    break;
                                                case "ActivateParents":
                                                    itm1377.ActivateParents = new Mutagen.Bethesda.Skyrim.ActivateParents();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1414 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1414)
                                                            {
                                                                case "Flags":
                                                                    itm1377.ActivateParents.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.ActivateParents.Flag>(ref reader, options);
                                                                    break;
                                                                case "Parents":
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                                break;
                                                                            Mutagen.Bethesda.Skyrim.ActivateParent itm1415 = new Mutagen.Bethesda.Skyrim.ActivateParent();
                                                                            if (reader.TokenType != JsonTokenType.Null)
                                                                            {
                                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                                    throw new JsonException();
                                                                                while (true)
                                                                                {
                                                                                    reader.Read();
                                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                                        break;
                                                                                    var prop1416 = reader.GetString();
                                                                                    reader.Read();
                                                                                    switch(prop1416)
                                                                                    {
                                                                                        case "Reference":
                                                                                            itm1415.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                            break;
                                                                                        case "Delay":
                                                                                            itm1415.Delay = reader.GetSingle();
                                                                                            break;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                reader.Skip();
                                                                            }
                                                                            itm1377.ActivateParents.Parents.Add(itm1415);
                                                                        }
                                                                    }
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "EnableParent":
                                                    itm1377.EnableParent = new Mutagen.Bethesda.Skyrim.EnableParent();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1417 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1417)
                                                            {
                                                                case "Versioning":
                                                                    itm1377.EnableParent.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.VersioningBreaks>(ref reader, options);
                                                                    break;
                                                                case "Reference":
                                                                    itm1377.EnableParent.Reference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                    break;
                                                                case "Flags":
                                                                    itm1377.EnableParent.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.EnableParent.Flag>(ref reader, options);
                                                                    break;
                                                                case "Unknown":
                                                                    itm1377.EnableParent.Unknown = reader.GetBytesFromBase64();
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "Emittance":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1377.Emittance.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "MultiBoundReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1377.MultiBoundReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "IgnoredBySandbox":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1377.IgnoredBySandbox = reader.GetBytesFromBase64();
                                                    }
                                                    break;
                                                case "LocationRefTypes":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1377.LocationRefTypes ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            itm1377.LocationRefTypes.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                        }
                                                    }
                                                    break;
                                                case "LocationReference":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                        itm1377.LocationReference.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                    break;
                                                case "DistantLodData":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1377.DistantLodData ??= new();
                                                        if (reader.TokenType != JsonTokenType.StartArray)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                                break;
                                                            Single itm1418 = default;
                                                            itm1418 = reader.GetSingle();
                                                            itm1377.DistantLodData.Add(itm1418);
                                                        }
                                                    }
                                                    break;
                                                case "Scale":
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        itm1377.Scale = reader.GetSingle();
                                                    }
                                                    break;
                                                case "Placement":
                                                    itm1377.Placement = new Mutagen.Bethesda.Skyrim.Placement();
                                                    if (reader.TokenType != JsonTokenType.Null)
                                                    {
                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                            throw new JsonException();
                                                        while (true)
                                                        {
                                                            reader.Read();
                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                break;
                                                            var prop1419 = reader.GetString();
                                                            reader.Read();
                                                            switch(prop1419)
                                                            {
                                                                case "Position":
                                                                    itm1377.Placement.Position = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                                case "Rotation":
                                                                    itm1377.Placement.Rotation = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    break;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        reader.Skip();
                                                    }
                                                    break;
                                                case "MajorFlags":
                                                    itm1377.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.APlacedTrap.MajorFlag>(ref reader, options);
                                                    break;
                                                case "SkyrimMajorRecordFlags":
                                                    itm1377.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                                    break;
                                                case "FormVersion":
                                                    itm1377.FormVersion = reader.GetUInt16();
                                                    break;
                                                case "Version2":
                                                    itm1377.Version2 = reader.GetUInt16();
                                                    break;
                                                case "EditorID":
                                                    itm1377.EditorID = reader.GetString();
                                                    break;
                                                case "TitleString":
                                                    itm1377.TitleString = reader.GetString();
                                                    break;
                                                case "IsCompressed":
                                                    itm1377.IsCompressed = reader.GetBoolean();
                                                    break;
                                                case "IsDeleted":
                                                    itm1377.IsDeleted = reader.GetBoolean();
                                                    break;
                                                case "MajorRecordFlagsRaw":
                                                    itm1377.MajorRecordFlagsRaw = reader.GetInt32();
                                                    break;
                                                case "FormKey":
                                                    itm1377.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                                    break;
                                                case "VersionControl":
                                                    itm1377.VersionControl = reader.GetUInt32();
                                                    break;
                                            }
                                        }
                                        itm968 = itm1377;
                                        break;
                                    default:
                                        reader.Skip();
                                        break;
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.Temporary.Add(itm968);
                        }
                    }
                    break;
                case "TemporaryTimestamp":
                    retval.TemporaryTimestamp = reader.GetInt32();
                    break;
                case "TemporaryUnknownGroupData":
                    retval.TemporaryUnknownGroupData = reader.GetInt32();
                    break;
                case "Timestamp":
                    retval.Timestamp = reader.GetInt32();
                    break;
                case "UnknownGroupData":
                    retval.UnknownGroupData = reader.GetInt32();
                    break;
                case "Version2":
                    retval.Version2 = reader.GetUInt16();
                    break;
                case "VersionControl":
                    retval.VersionControl = reader.GetUInt32();
                    break;
                case "Water":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "WaterEnvironmentMap":
                    retval.WaterEnvironmentMap = reader.GetString();
                    break;
                case "WaterHeight":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.WaterHeight = reader.GetSingle();
                    }
                    break;
                case "WaterNoiseTexture":
                    retval.WaterNoiseTexture = reader.GetString();
                    break;
                case "WaterVelocity":
                    retval.WaterVelocity = new Mutagen.Bethesda.Skyrim.CellWaterVelocity();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop1420 = reader.GetString();
                            reader.Read();
                            switch(prop1420)
                            {
                                case "Offset":
                                    retval.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown":
                                    retval.WaterVelocity.Unknown = reader.GetInt32();
                                    break;
                                case "Angle":
                                    retval.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown2":
                                    retval.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "XWCN":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.XWCN = reader.GetBytesFromBase64();
                    }
                    break;
                case "XWCS":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.XWCS = reader.GetBytesFromBase64();
                    }
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }
        return retval;
    }
}
