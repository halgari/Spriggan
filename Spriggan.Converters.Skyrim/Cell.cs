// THIS FILE IS AUTOGENERATED DO NOT EDIT BY HAND
using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Drawing;
using Mutagen.Bethesda.Skyrim;
using Spriggan.Converters.Base;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Strings;
using Microsoft.Extensions.DependencyInjection;
using Mutagen.Bethesda.Plugins.Records;
using System.Globalization;
using Mutagen.Bethesda.Plugins;
using Noggog;

public class ICellGetter_Converter : JsonConverter<ICellGetter>
{
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.ICellGetter)) && !t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Cell));
    }
    public override ICellGetter Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
    public override void Write(Utf8JsonWriter writer, ICellGetter value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        writer.WriteFormKeyHeader(value, options);
        
        // AcousticSpace
        writer.WritePropertyName("AcousticSpace");
        if (value.AcousticSpace.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.AcousticSpace.FormKey.ToString());
        
        // EditorID
        writer.WritePropertyName("EditorID");
        writer.WriteStringValue(value.EditorID);
        
        // EncounterZone
        writer.WritePropertyName("EncounterZone");
        if (value.EncounterZone.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.EncounterZone.FormKey.ToString());
        
        // Flags
        writer.WritePropertyName("Flags");
        writer.WriteFlags(value.Flags);
        
        // Grid
        writer.WritePropertyName("Grid");
        if (value.Grid != null)
        {
            writer.WriteStartObject();
            
            // Point
            writer.WritePropertyName("Point");
            writer.WriteP2Int(value.Grid.Point, options);
            
            // Flags
            writer.WritePropertyName("Flags");
            writer.WriteFlags(value.Grid.Flags);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // ImageSpace
        writer.WritePropertyName("ImageSpace");
        if (value.ImageSpace.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.ImageSpace.FormKey.ToString());
        
        // IsCompressed
        writer.WritePropertyName("IsCompressed");
        writer.WriteBooleanValue(value.IsCompressed);
        
        // IsDeleted
        writer.WritePropertyName("IsDeleted");
        writer.WriteBooleanValue(value.IsDeleted);
        
        // Landscape
        writer.WritePropertyName("Landscape");
        if (value.Landscape != null)
        {
            writer.WriteStartObject();
            
            // Flags
            writer.WritePropertyName("Flags");
            if (value.Landscape.Flags == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteFlags(value.Landscape.Flags.Value);
            }
            
            // VertexNormals
            writer.WritePropertyName("VertexNormals");
            writer.ReadOnlyArray2dWriter(value.Landscape.VertexNormals, itm =>
            {
                Noggog.P3UInt8 itm1 = default;
                writer.WriteP3UInt8(itm1, options);
            }
            );
            
            // VertexHeightMap
            writer.WritePropertyName("VertexHeightMap");
            if (value.Landscape.VertexHeightMap != null)
            {
                writer.WriteStartObject();
                
                // Offset
                writer.WritePropertyName("Offset");
                writer.WriteNumberValue(value.Landscape.VertexHeightMap.Offset);
                
                // HeightMap
                writer.WritePropertyName("HeightMap");
                writer.ReadOnlyArray2dWriter(value.Landscape.VertexHeightMap.HeightMap, itm =>
                {
                    Byte itm2 = default;
                    writer.WriteNumberValue(itm2);
                }
                );
                
                // Unknown
                writer.WritePropertyName("Unknown");
                writer.WriteP3UInt8(value.Landscape.VertexHeightMap.Unknown, options);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // VertexColors
            writer.WritePropertyName("VertexColors");
            writer.ReadOnlyArray2dWriter(value.Landscape.VertexColors, itm =>
            {
                Noggog.P3UInt8 itm3 = default;
                writer.WriteP3UInt8(itm3, options);
            }
            );
            
            // Layers
            writer.WritePropertyName("Layers");
            if (value.Landscape.Layers != null)
            {
                writer.WriteStartArray();
                foreach(var itm4 in value.Landscape.Layers)
                {
                    IBaseLayerGetter_Writer.WriteOuter(writer, itm4, options);
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // Textures
            writer.WritePropertyName("Textures");
            if (value.Landscape.Textures != null)
            {
                writer.WriteStartArray();
                foreach(var itm5 in value.Landscape.Textures)
                {
                    writer.WriteStringValue(itm5.FormKey.ToString());
                }
                writer.WriteEndArray();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // FormVersion
            writer.WritePropertyName("FormVersion");
            writer.WriteNumberValue((uint)value.Landscape.FormVersion);
            
            // Version2
            writer.WritePropertyName("Version2");
            writer.WriteNumberValue((uint)value.Landscape.Version2);
            
            // IsCompressed
            writer.WritePropertyName("IsCompressed");
            writer.WriteBooleanValue(value.Landscape.IsCompressed);
            
            // IsDeleted
            writer.WritePropertyName("IsDeleted");
            writer.WriteBooleanValue(value.Landscape.IsDeleted);
            
            // MajorRecordFlagsRaw
            writer.WritePropertyName("MajorRecordFlagsRaw");
            writer.WriteNumberValue(value.Landscape.MajorRecordFlagsRaw);
            
            // VersionControl
            writer.WritePropertyName("VersionControl");
            writer.WriteNumberValue(value.Landscape.VersionControl);
            
            // EditorID
            writer.WritePropertyName("EditorID");
            writer.WriteStringValue(value.Landscape.EditorID);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Lighting
        writer.WritePropertyName("Lighting");
        if (value.Lighting != null)
        {
            writer.WriteStartObject();
            
            // Versioning
            writer.WritePropertyName("Versioning");
            writer.WriteFlags(value.Lighting.Versioning);
            
            // AmbientColor
            writer.WritePropertyName("AmbientColor");
            writer.WriteStringValue(value.Lighting.AmbientColor.ToArgb().ToString("x8"));
            
            // DirectionalColor
            writer.WritePropertyName("DirectionalColor");
            writer.WriteStringValue(value.Lighting.DirectionalColor.ToArgb().ToString("x8"));
            
            // FogNearColor
            writer.WritePropertyName("FogNearColor");
            writer.WriteStringValue(value.Lighting.FogNearColor.ToArgb().ToString("x8"));
            
            // FogNear
            writer.WritePropertyName("FogNear");
            writer.WriteNumberValue(value.Lighting.FogNear);
            
            // FogFar
            writer.WritePropertyName("FogFar");
            writer.WriteNumberValue(value.Lighting.FogFar);
            
            // DirectionalRotationXY
            writer.WritePropertyName("DirectionalRotationXY");
            writer.WriteNumberValue(value.Lighting.DirectionalRotationXY);
            
            // DirectionalRotationZ
            writer.WritePropertyName("DirectionalRotationZ");
            writer.WriteNumberValue(value.Lighting.DirectionalRotationZ);
            
            // DirectionalFade
            writer.WritePropertyName("DirectionalFade");
            writer.WriteNumberValue(value.Lighting.DirectionalFade);
            
            // FogClipDistance
            writer.WritePropertyName("FogClipDistance");
            writer.WriteNumberValue(value.Lighting.FogClipDistance);
            
            // FogPower
            writer.WritePropertyName("FogPower");
            writer.WriteNumberValue(value.Lighting.FogPower);
            
            // AmbientColors
            writer.WritePropertyName("AmbientColors");
            if (value.Lighting.AmbientColors != null)
            {
                writer.WriteStartObject();
                
                // Versioning
                writer.WritePropertyName("Versioning");
                writer.WriteFlags(value.Lighting.AmbientColors.Versioning);
                
                // DirectionalXPlus
                writer.WritePropertyName("DirectionalXPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalXPlus.ToArgb().ToString("x8"));
                
                // DirectionalXMinus
                writer.WritePropertyName("DirectionalXMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalXMinus.ToArgb().ToString("x8"));
                
                // DirectionalYPlus
                writer.WritePropertyName("DirectionalYPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalYPlus.ToArgb().ToString("x8"));
                
                // DirectionalYMinus
                writer.WritePropertyName("DirectionalYMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalYMinus.ToArgb().ToString("x8"));
                
                // DirectionalZPlus
                writer.WritePropertyName("DirectionalZPlus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalZPlus.ToArgb().ToString("x8"));
                
                // DirectionalZMinus
                writer.WritePropertyName("DirectionalZMinus");
                writer.WriteStringValue(value.Lighting.AmbientColors.DirectionalZMinus.ToArgb().ToString("x8"));
                
                // Specular
                writer.WritePropertyName("Specular");
                writer.WriteStringValue(value.Lighting.AmbientColors.Specular.ToArgb().ToString("x8"));
                
                // Scale
                writer.WritePropertyName("Scale");
                writer.WriteNumberValue(value.Lighting.AmbientColors.Scale);
                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
            
            // FogFarColor
            writer.WritePropertyName("FogFarColor");
            writer.WriteStringValue(value.Lighting.FogFarColor.ToArgb().ToString("x8"));
            
            // FogMax
            writer.WritePropertyName("FogMax");
            writer.WriteNumberValue(value.Lighting.FogMax);
            
            // LightFadeBegin
            writer.WritePropertyName("LightFadeBegin");
            writer.WriteNumberValue(value.Lighting.LightFadeBegin);
            
            // LightFadeEnd
            writer.WritePropertyName("LightFadeEnd");
            writer.WriteNumberValue(value.Lighting.LightFadeEnd);
            
            // Inherits
            writer.WritePropertyName("Inherits");
            writer.WriteFlags(value.Lighting.Inherits);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // LightingTemplate
        writer.WritePropertyName("LightingTemplate");
        writer.WriteStringValue(value.LightingTemplate.FormKey.ToString());
        
        // LNAM
        writer.WritePropertyName("LNAM");
        if (value.LNAM == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.LNAM.Value);
        }
        
        // Location
        writer.WritePropertyName("Location");
        if (value.Location.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Location.FormKey.ToString());
        
        // LockList
        writer.WritePropertyName("LockList");
        if (value.LockList.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.LockList.FormKey.ToString());
        
        // MajorFlags
        writer.WritePropertyName("MajorFlags");
        writer.WriteFlags(value.MajorFlags);
        
        // MajorRecordFlagsRaw
        writer.WritePropertyName("MajorRecordFlagsRaw");
        writer.WriteNumberValue(value.MajorRecordFlagsRaw);
        
        // MaxHeightData
        writer.WritePropertyName("MaxHeightData");
        if (value.MaxHeightData != null)
        {
            writer.WriteStartObject();
            
            // Offset
            writer.WritePropertyName("Offset");
            writer.WriteNumberValue(value.MaxHeightData.Offset);
            
            // HeightMap
            writer.WritePropertyName("HeightMap");
            writer.ReadOnlyArray2dWriter(value.MaxHeightData.HeightMap, itm =>
            {
                Byte itm6 = default;
                writer.WriteNumberValue(itm6);
            }
            );
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Music
        writer.WritePropertyName("Music");
        if (value.Music.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Music.FormKey.ToString());
        
        // Name
        writer.WritePropertyName("Name");
        writer.WriteTranslatedString(value.Name, options);
        
        // NavigationMeshes
        writer.WritePropertyName("NavigationMeshes");
        if (value.NavigationMeshes != null)
        {
            writer.WriteStartArray();
            foreach(var itm7 in value.NavigationMeshes)
            {
                if (itm7 != null)
                {
                    writer.WriteStartObject();
                    
                    // Data
                    writer.WritePropertyName("Data");
                    if (itm7.Data != null)
                    {
                        writer.WriteStartObject();
                        
                        // NavmeshVersion
                        writer.WritePropertyName("NavmeshVersion");
                        writer.WriteNumberValue(itm7.Data.NavmeshVersion);
                        
                        // Magic
                        writer.WritePropertyName("Magic");
                        writer.WriteNumberValue(itm7.Data.Magic);
                        
                        // Parent
                        writer.WritePropertyName("Parent");
                        IANavmeshParentGetter_Writer.WriteOuter(writer, itm7.Data.Parent, options);
                        
                        // Vertices
                        writer.WritePropertyName("Vertices");
                        if (itm7.Data.Vertices != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm8 in itm7.Data.Vertices)
                            {
                                writer.WriteP3Float(itm8, options);
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // Triangles
                        writer.WritePropertyName("Triangles");
                        if (itm7.Data.Triangles != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm9 in itm7.Data.Triangles)
                            {
                                if (itm9 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Vertices
                                    writer.WritePropertyName("Vertices");
                                    writer.WriteP3Int16(itm9.Vertices, options);
                                    
                                    // EdgeLink_0_1
                                    writer.WritePropertyName("EdgeLink_0_1");
                                    writer.WriteNumberValue(itm9.EdgeLink_0_1);
                                    
                                    // EdgeLink_1_2
                                    writer.WritePropertyName("EdgeLink_1_2");
                                    writer.WriteNumberValue(itm9.EdgeLink_1_2);
                                    
                                    // EdgeLink_2_0
                                    writer.WritePropertyName("EdgeLink_2_0");
                                    writer.WriteNumberValue(itm9.EdgeLink_2_0);
                                    
                                    // Flags
                                    writer.WritePropertyName("Flags");
                                    writer.WriteFlags(itm9.Flags);
                                    
                                    // CoverFlags
                                    writer.WritePropertyName("CoverFlags");
                                    writer.WriteNumberValue((uint)itm9.CoverFlags);
                                    
                                    // IsCover
                                    writer.WritePropertyName("IsCover");
                                    writer.WriteBooleanValue(itm9.IsCover);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // EdgeLinks
                        writer.WritePropertyName("EdgeLinks");
                        if (itm7.Data.EdgeLinks != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm10 in itm7.Data.EdgeLinks)
                            {
                                if (itm10 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // Unknown
                                    writer.WritePropertyName("Unknown");
                                    writer.WriteNumberValue(itm10.Unknown);
                                    
                                    // Mesh
                                    writer.WritePropertyName("Mesh");
                                    writer.WriteStringValue(itm10.Mesh.FormKey.ToString());
                                    
                                    // TriangleIndex
                                    writer.WritePropertyName("TriangleIndex");
                                    writer.WriteNumberValue(itm10.TriangleIndex);
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // DoorTriangles
                        writer.WritePropertyName("DoorTriangles");
                        if (itm7.Data.DoorTriangles != null)
                        {
                            writer.WriteStartArray();
                            foreach(var itm11 in itm7.Data.DoorTriangles)
                            {
                                if (itm11 != null)
                                {
                                    writer.WriteStartObject();
                                    
                                    // TriangleBeforeDoor
                                    writer.WritePropertyName("TriangleBeforeDoor");
                                    writer.WriteNumberValue(itm11.TriangleBeforeDoor);
                                    
                                    // Unknown
                                    writer.WritePropertyName("Unknown");
                                    writer.WriteNumberValue(itm11.Unknown);
                                    
                                    // Door
                                    writer.WritePropertyName("Door");
                                    writer.WriteStringValue(itm11.Door.FormKey.ToString());
                                    writer.WriteEndObject();
                                }
                                else
                                {
                                    writer.WriteNullValue();
                                }
                            }
                            writer.WriteEndArray();
                        }
                        else
                        {
                            writer.WriteNullValue();
                        }
                        
                        // NavmeshGridDivisor
                        writer.WritePropertyName("NavmeshGridDivisor");
                        writer.WriteNumberValue(itm7.Data.NavmeshGridDivisor);
                        
                        // MaxDistanceX
                        writer.WritePropertyName("MaxDistanceX");
                        writer.WriteNumberValue(itm7.Data.MaxDistanceX);
                        
                        // MaxDistanceY
                        writer.WritePropertyName("MaxDistanceY");
                        writer.WriteNumberValue(itm7.Data.MaxDistanceY);
                        
                        // Min
                        writer.WritePropertyName("Min");
                        writer.WriteP3Float(itm7.Data.Min, options);
                        
                        // Max
                        writer.WritePropertyName("Max");
                        writer.WriteP3Float(itm7.Data.Max, options);
                        
                        // NavmeshGrid
                        writer.WritePropertyName("NavmeshGrid");
                        writer.WriteBase64StringValue(itm7.Data.NavmeshGrid);
                        writer.WriteEndObject();
                    }
                    else
                    {
                        writer.WriteNullValue();
                    }
                    
                    // ONAM
                    writer.WritePropertyName("ONAM");
                    if (itm7.ONAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm7.ONAM.Value);
                    }
                    
                    // PNAM
                    writer.WritePropertyName("PNAM");
                    if (itm7.PNAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm7.PNAM.Value);
                    }
                    
                    // NNAM
                    writer.WritePropertyName("NNAM");
                    if (itm7.NNAM == null)
                        writer.WriteNullValue();
                    else
                    {
                        writer.WriteBase64StringValue(itm7.NNAM.Value);
                    }
                    
                    // MajorFlags
                    writer.WritePropertyName("MajorFlags");
                    writer.WriteFlags(itm7.MajorFlags);
                    
                    // FormVersion
                    writer.WritePropertyName("FormVersion");
                    writer.WriteNumberValue((uint)itm7.FormVersion);
                    
                    // Version2
                    writer.WritePropertyName("Version2");
                    writer.WriteNumberValue((uint)itm7.Version2);
                    
                    // IsCompressed
                    writer.WritePropertyName("IsCompressed");
                    writer.WriteBooleanValue(itm7.IsCompressed);
                    
                    // IsDeleted
                    writer.WritePropertyName("IsDeleted");
                    writer.WriteBooleanValue(itm7.IsDeleted);
                    
                    // MajorRecordFlagsRaw
                    writer.WritePropertyName("MajorRecordFlagsRaw");
                    writer.WriteNumberValue(itm7.MajorRecordFlagsRaw);
                    
                    // VersionControl
                    writer.WritePropertyName("VersionControl");
                    writer.WriteNumberValue(itm7.VersionControl);
                    
                    // EditorID
                    writer.WritePropertyName("EditorID");
                    writer.WriteStringValue(itm7.EditorID);
                    writer.WriteEndObject();
                }
                else
                {
                    writer.WriteNullValue();
                }
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // OcclusionData
        writer.WritePropertyName("OcclusionData");
        if (value.OcclusionData == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.OcclusionData.Value);
        }
        
        // Ownership
        writer.WritePropertyName("Ownership");
        if (value.Ownership != null)
        {
            writer.WriteStartObject();
            
            // Owner
            writer.WritePropertyName("Owner");
            if (value.Ownership.Owner.IsNull)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(value.Ownership.Owner.FormKey.ToString());
            
            // FactionRank
            writer.WritePropertyName("FactionRank");
            if (value.Ownership.FactionRank == null)
                writer.WriteNullValue();
            else
            {
                writer.WriteNumberValue(value.Ownership.FactionRank.Value);
            }
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // Persistent
        writer.WritePropertyName("Persistent");
        if (value.Persistent != null)
        {
            writer.WriteStartArray();
            foreach(var itm12 in value.Persistent)
            {
                IPlacedGetter_Writer.WriteOuter(writer, itm12, options);
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // PersistentTimestamp
        writer.WritePropertyName("PersistentTimestamp");
        writer.WriteNumberValue(value.PersistentTimestamp);
        
        // PersistentUnknownGroupData
        writer.WritePropertyName("PersistentUnknownGroupData");
        writer.WriteNumberValue(value.PersistentUnknownGroupData);
        
        // Regions
        writer.WritePropertyName("Regions");
        if (value.Regions != null)
        {
            writer.WriteStartArray();
            foreach(var itm13 in value.Regions)
            {
                writer.WriteStringValue(itm13.FormKey.ToString());
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // SkyAndWeatherFromRegion
        writer.WritePropertyName("SkyAndWeatherFromRegion");
        if (value.SkyAndWeatherFromRegion.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.SkyAndWeatherFromRegion.FormKey.ToString());
        
        // Temporary
        writer.WritePropertyName("Temporary");
        if (value.Temporary != null)
        {
            writer.WriteStartArray();
            foreach(var itm14 in value.Temporary)
            {
                IPlacedGetter_Writer.WriteOuter(writer, itm14, options);
            }
            writer.WriteEndArray();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // TemporaryTimestamp
        writer.WritePropertyName("TemporaryTimestamp");
        writer.WriteNumberValue(value.TemporaryTimestamp);
        
        // TemporaryUnknownGroupData
        writer.WritePropertyName("TemporaryUnknownGroupData");
        writer.WriteNumberValue(value.TemporaryUnknownGroupData);
        
        // Timestamp
        writer.WritePropertyName("Timestamp");
        writer.WriteNumberValue(value.Timestamp);
        
        // UnknownGroupData
        writer.WritePropertyName("UnknownGroupData");
        writer.WriteNumberValue(value.UnknownGroupData);
        
        // Version2
        writer.WritePropertyName("Version2");
        writer.WriteNumberValue((uint)value.Version2);
        
        // VersionControl
        writer.WritePropertyName("VersionControl");
        writer.WriteNumberValue(value.VersionControl);
        
        // Water
        writer.WritePropertyName("Water");
        if (value.Water.IsNull)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Water.FormKey.ToString());
        
        // WaterEnvironmentMap
        writer.WritePropertyName("WaterEnvironmentMap");
        writer.WriteStringValue(value.WaterEnvironmentMap);
        
        // WaterHeight
        writer.WritePropertyName("WaterHeight");
        if (value.WaterHeight == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteNumberValue(value.WaterHeight.Value);
        }
        
        // WaterNoiseTexture
        writer.WritePropertyName("WaterNoiseTexture");
        writer.WriteStringValue(value.WaterNoiseTexture);
        
        // WaterVelocity
        writer.WritePropertyName("WaterVelocity");
        if (value.WaterVelocity != null)
        {
            writer.WriteStartObject();
            
            // Offset
            writer.WritePropertyName("Offset");
            writer.WriteP3Float(value.WaterVelocity.Offset, options);
            
            // Unknown
            writer.WritePropertyName("Unknown");
            writer.WriteNumberValue(value.WaterVelocity.Unknown);
            
            // Angle
            writer.WritePropertyName("Angle");
            writer.WriteP3Float(value.WaterVelocity.Angle, options);
            
            // Unknown2
            writer.WritePropertyName("Unknown2");
            writer.WriteBase64StringValue(value.WaterVelocity.Unknown2);
            writer.WriteEndObject();
        }
        else
        {
            writer.WriteNullValue();
        }
        
        // XWCN
        writer.WritePropertyName("XWCN");
        if (value.XWCN == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.XWCN.Value);
        }
        
        // XWCS
        writer.WritePropertyName("XWCS");
        if (value.XWCS == null)
            writer.WriteNullValue();
        else
        {
            writer.WriteBase64StringValue(value.XWCS.Value);
        }
        writer.WriteEndObject();
    }
}
public class Cell_Converter : JsonConverter<Mutagen.Bethesda.Skyrim.Cell>
{
    private ICellGetter_Converter _getterConverter;
    public Cell_Converter()
    {
        _getterConverter = new ICellGetter_Converter();
    }
    public override bool CanConvert(Type t)
    {
        return t.InheritsFrom(typeof(Mutagen.Bethesda.Skyrim.Cell));
    }
    public override void Write(Utf8JsonWriter writer, Mutagen.Bethesda.Skyrim.Cell value, JsonSerializerOptions options)
    {
        _getterConverter.Write(writer, (ICellGetter)value, options);
    }
    public override Mutagen.Bethesda.Skyrim.Cell Read(
        ref Utf8JsonReader reader,
        Type typeToConvert,
        JsonSerializerOptions options)
    {
        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException();
        reader.Read();
        Mutagen.Bethesda.Skyrim.Cell retval = new Mutagen.Bethesda.Skyrim.Cell(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
        while (true)
        {
            reader.Read();
            if (reader.TokenType == JsonTokenType.EndObject)
            {
                reader.Read();
                break;
            }
            var prop = reader.GetString();
            reader.Read();
            switch (prop)
            {
                case "AcousticSpace":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.AcousticSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "EditorID":
                    retval.EditorID = reader.GetString();
                    break;
                case "EncounterZone":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.EncounterZone.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Flags":
                    retval.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Cell.Flag>(ref reader, options);
                    break;
                case "FormVersion":
                    retval.FormVersion = reader.GetUInt16();
                    break;
                case "Grid":
                    retval.Grid = new Mutagen.Bethesda.Skyrim.CellGrid();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop15 = reader.GetString();
                            reader.Read();
                            switch(prop15)
                            {
                                case "Point":
                                    retval.Grid.Point = SerializerExtensions.ReadP2Int(ref reader, options);
                                    break;
                                case "Flags":
                                    retval.Grid.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellGrid.Flag>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "ImageSpace":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.ImageSpace.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "IsCompressed":
                    retval.IsCompressed = reader.GetBoolean();
                    break;
                case "IsDeleted":
                    retval.IsDeleted = reader.GetBoolean();
                    break;
                case "Landscape":
                    retval.Landscape = new Mutagen.Bethesda.Skyrim.Landscape(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop16 = reader.GetString();
                            reader.Read();
                            switch(prop16)
                            {
                                case "Flags":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Landscape.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Landscape.Flag>(ref reader, options);
                                    }
                                    break;
                                case "VertexNormals":
                                    Noggog.P3UInt8 itm17(ref Utf8JsonReader reader)
                                    {
                                        Noggog.P3UInt8 itm18 = default;
                                        itm18 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                        return itm18;
                                    }
                                    retval.Landscape.VertexNormals = SerializerExtensions.Array2dReader(ref reader, itm17);
                                    break;
                                case "VertexHeightMap":
                                    retval.Landscape.VertexHeightMap = new Mutagen.Bethesda.Skyrim.LandscapeVertexHeightMap();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop19 = reader.GetString();
                                            reader.Read();
                                            switch(prop19)
                                            {
                                                case "Offset":
                                                    retval.Landscape.VertexHeightMap.Offset = reader.GetSingle();
                                                    break;
                                                case "HeightMap":
                                                    Byte itm20(ref Utf8JsonReader reader)
                                                    {
                                                        Byte itm21 = default;
                                                        itm21 = reader.GetByte();
                                                        return itm21;
                                                    }
                                                    retval.Landscape.VertexHeightMap.HeightMap = SerializerExtensions.Array2dReader(ref reader, itm20);
                                                    break;
                                                case "Unknown":
                                                    retval.Landscape.VertexHeightMap.Unknown = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "VertexColors":
                                    Noggog.P3UInt8 itm22(ref Utf8JsonReader reader)
                                    {
                                        Noggog.P3UInt8 itm23 = default;
                                        itm23 = SerializerExtensions.ReadP3UInt8(ref reader, options);
                                        return itm23;
                                    }
                                    retval.Landscape.VertexColors = SerializerExtensions.Array2dReader(ref reader, itm22);
                                    break;
                                case "Layers":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            Mutagen.Bethesda.Skyrim.BaseLayer itm24 = new Mutagen.Bethesda.Skyrim.BaseLayer();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop25 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop25)
                                                    {
                                                        case "Header":
                                                            itm24.Header = new Mutagen.Bethesda.Skyrim.LayerHeader();
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                                        break;
                                                                    var prop26 = reader.GetString();
                                                                    reader.Read();
                                                                    switch(prop26)
                                                                    {
                                                                        case "Texture":
                                                                            itm24.Header.Texture.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                            break;
                                                                        case "Quadrant":
                                                                            itm24.Header.Quadrant = SerializerExtensions.ReadEnum<Mutagen.Bethesda.Plugins.Records.Quadrant>(ref reader, options);
                                                                            break;
                                                                        case "Unused":
                                                                            itm24.Header.Unused = reader.GetByte();
                                                                            break;
                                                                        case "LayerNumber":
                                                                            itm24.Header.LayerNumber = reader.GetUInt16();
                                                                            break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                reader.Skip();
                                                            }
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            retval.Landscape.Layers.Add(itm24);
                                        }
                                    }
                                    break;
                                case "Textures":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Landscape.Textures ??= new();
                                        if (reader.TokenType != JsonTokenType.StartArray)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndArray)
                                                break;
                                            retval.Landscape.Textures.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                        }
                                    }
                                    break;
                                case "SkyrimMajorRecordFlags":
                                    retval.Landscape.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                    break;
                                case "FormVersion":
                                    retval.Landscape.FormVersion = reader.GetUInt16();
                                    break;
                                case "Version2":
                                    retval.Landscape.Version2 = reader.GetUInt16();
                                    break;
                                case "EditorID":
                                    retval.Landscape.EditorID = reader.GetString();
                                    break;
                                case "TitleString":
                                    retval.Landscape.TitleString = reader.GetString();
                                    break;
                                case "IsCompressed":
                                    retval.Landscape.IsCompressed = reader.GetBoolean();
                                    break;
                                case "IsDeleted":
                                    retval.Landscape.IsDeleted = reader.GetBoolean();
                                    break;
                                case "MajorRecordFlagsRaw":
                                    retval.Landscape.MajorRecordFlagsRaw = reader.GetInt32();
                                    break;
                                case "FormKey":
                                    retval.Landscape.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                    break;
                                case "VersionControl":
                                    retval.Landscape.VersionControl = reader.GetUInt32();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Lighting":
                    retval.Lighting = new Mutagen.Bethesda.Skyrim.CellLighting();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop27 = reader.GetString();
                            reader.Read();
                            switch(prop27)
                            {
                                case "Versioning":
                                    retval.Lighting.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellLighting.VersioningBreaks>(ref reader, options);
                                    break;
                                case "AmbientColor":
                                    retval.Lighting.AmbientColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "DirectionalColor":
                                    retval.Lighting.DirectionalColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogNearColor":
                                    retval.Lighting.FogNearColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogNear":
                                    retval.Lighting.FogNear = reader.GetSingle();
                                    break;
                                case "FogFar":
                                    retval.Lighting.FogFar = reader.GetSingle();
                                    break;
                                case "DirectionalRotationXY":
                                    retval.Lighting.DirectionalRotationXY = reader.GetInt32();
                                    break;
                                case "DirectionalRotationZ":
                                    retval.Lighting.DirectionalRotationZ = reader.GetInt32();
                                    break;
                                case "DirectionalFade":
                                    retval.Lighting.DirectionalFade = reader.GetSingle();
                                    break;
                                case "FogClipDistance":
                                    retval.Lighting.FogClipDistance = reader.GetSingle();
                                    break;
                                case "FogPower":
                                    retval.Lighting.FogPower = reader.GetSingle();
                                    break;
                                case "AmbientColors":
                                    retval.Lighting.AmbientColors = new Mutagen.Bethesda.Skyrim.AmbientColors();
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        if (reader.TokenType != JsonTokenType.StartObject)
                                            throw new JsonException();
                                        while (true)
                                        {
                                            reader.Read();
                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                break;
                                            var prop28 = reader.GetString();
                                            reader.Read();
                                            switch(prop28)
                                            {
                                                case "Versioning":
                                                    retval.Lighting.AmbientColors.Versioning = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.AmbientColors.VersioningBreaks>(ref reader, options);
                                                    break;
                                                case "DirectionalXPlus":
                                                    retval.Lighting.AmbientColors.DirectionalXPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalXMinus":
                                                    retval.Lighting.AmbientColors.DirectionalXMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalYPlus":
                                                    retval.Lighting.AmbientColors.DirectionalYPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalYMinus":
                                                    retval.Lighting.AmbientColors.DirectionalYMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalZPlus":
                                                    retval.Lighting.AmbientColors.DirectionalZPlus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "DirectionalZMinus":
                                                    retval.Lighting.AmbientColors.DirectionalZMinus = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "Specular":
                                                    retval.Lighting.AmbientColors.Specular = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                                    break;
                                                case "Scale":
                                                    retval.Lighting.AmbientColors.Scale = reader.GetSingle();
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        reader.Skip();
                                    }
                                    break;
                                case "FogFarColor":
                                    retval.Lighting.FogFarColor = Color.FromArgb(int.Parse(reader.GetString(), NumberStyles.HexNumber));
                                    break;
                                case "FogMax":
                                    retval.Lighting.FogMax = reader.GetSingle();
                                    break;
                                case "LightFadeBegin":
                                    retval.Lighting.LightFadeBegin = reader.GetSingle();
                                    break;
                                case "LightFadeEnd":
                                    retval.Lighting.LightFadeEnd = reader.GetSingle();
                                    break;
                                case "Inherits":
                                    retval.Lighting.Inherits = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.CellLighting.Inherit>(ref reader, options);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "LightingTemplate":
                    retval.LightingTemplate.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LNAM":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.LNAM = reader.GetBytesFromBase64();
                    }
                    break;
                case "Location":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Location.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "LockList":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.LockList.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "MajorFlags":
                    retval.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.Cell.MajorFlag>(ref reader, options);
                    break;
                case "MajorRecordFlagsRaw":
                    retval.MajorRecordFlagsRaw = reader.GetInt32();
                    break;
                case "MaxHeightData":
                    retval.MaxHeightData = new Mutagen.Bethesda.Skyrim.CellMaxHeightData();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop29 = reader.GetString();
                            reader.Read();
                            switch(prop29)
                            {
                                case "Offset":
                                    retval.MaxHeightData.Offset = reader.GetSingle();
                                    break;
                                case "HeightMap":
                                    Byte itm30(ref Utf8JsonReader reader)
                                    {
                                        Byte itm31 = default;
                                        itm31 = reader.GetByte();
                                        return itm31;
                                    }
                                    retval.MaxHeightData.HeightMap = SerializerExtensions.Array2dReader(ref reader, itm30);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Music":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Music.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "Name":
                    retval.Name ??= new TranslatedString(Language.English);
                    SerializerExtensions.ReadTranslatedString(ref reader, retval.Name, options);
                    break;
                case "NavigationMeshes":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            Mutagen.Bethesda.Skyrim.NavigationMesh itm32 = new Mutagen.Bethesda.Skyrim.NavigationMesh(SerializerExtensions.ReadFormKeyHeader(ref reader, options), SkyrimRelease.SkyrimSE);
                            if (reader.TokenType != JsonTokenType.Null)
                            {
                                if (reader.TokenType != JsonTokenType.StartObject)
                                    throw new JsonException();
                                while (true)
                                {
                                    reader.Read();
                                    if (reader.TokenType == JsonTokenType.EndObject)
                                        break;
                                    var prop33 = reader.GetString();
                                    reader.Read();
                                    switch(prop33)
                                    {
                                        case "Data":
                                            itm32.Data = new Mutagen.Bethesda.Skyrim.NavigationMeshData();
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                if (reader.TokenType != JsonTokenType.StartObject)
                                                    throw new JsonException();
                                                while (true)
                                                {
                                                    reader.Read();
                                                    if (reader.TokenType == JsonTokenType.EndObject)
                                                        break;
                                                    var prop34 = reader.GetString();
                                                    reader.Read();
                                                    switch(prop34)
                                                    {
                                                        case "NavmeshVersion":
                                                            itm32.Data.NavmeshVersion = reader.GetUInt32();
                                                            break;
                                                        case "Magic":
                                                            itm32.Data.Magic = reader.GetUInt32();
                                                            break;
                                                        case "Parent":
                                                            itm32.Data.Parent = ANavmeshParent_Reader.ReadOuter(ref reader, options);
                                                            break;
                                                        case "Vertices":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Noggog.P3Float itm35 = default;
                                                                    itm35 = SerializerExtensions.ReadP3Float(ref reader, options);
                                                                    itm32.Data.Vertices.Add(itm35);
                                                                }
                                                            }
                                                            break;
                                                        case "Triangles":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.NavmeshTriangle itm36 = new Mutagen.Bethesda.Skyrim.NavmeshTriangle();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop37 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop37)
                                                                            {
                                                                                case "Vertices":
                                                                                    itm36.Vertices = SerializerExtensions.ReadP3Int16(ref reader, options);
                                                                                    break;
                                                                                case "EdgeLink_0_1":
                                                                                    itm36.EdgeLink_0_1 = reader.GetInt16();
                                                                                    break;
                                                                                case "EdgeLink_1_2":
                                                                                    itm36.EdgeLink_1_2 = reader.GetInt16();
                                                                                    break;
                                                                                case "EdgeLink_2_0":
                                                                                    itm36.EdgeLink_2_0 = reader.GetInt16();
                                                                                    break;
                                                                                case "Flags":
                                                                                    itm36.Flags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavmeshTriangle.Flag>(ref reader, options);
                                                                                    break;
                                                                                case "CoverFlags":
                                                                                    itm36.CoverFlags = reader.GetUInt16();
                                                                                    break;
                                                                                case "IsCover":
                                                                                    itm36.IsCover = reader.GetBoolean();
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm32.Data.Triangles.Add(itm36);
                                                                }
                                                            }
                                                            break;
                                                        case "EdgeLinks":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.EdgeLink itm38 = new Mutagen.Bethesda.Skyrim.EdgeLink();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop39 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop39)
                                                                            {
                                                                                case "Unknown":
                                                                                    itm38.Unknown = reader.GetInt32();
                                                                                    break;
                                                                                case "Mesh":
                                                                                    itm38.Mesh.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                                case "TriangleIndex":
                                                                                    itm38.TriangleIndex = reader.GetInt16();
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm32.Data.EdgeLinks.Add(itm38);
                                                                }
                                                            }
                                                            break;
                                                        case "DoorTriangles":
                                                            if (reader.TokenType != JsonTokenType.Null)
                                                            {
                                                                if (reader.TokenType != JsonTokenType.StartArray)
                                                                    throw new JsonException();
                                                                while (true)
                                                                {
                                                                    reader.Read();
                                                                    if (reader.TokenType == JsonTokenType.EndArray)
                                                                        break;
                                                                    Mutagen.Bethesda.Skyrim.DoorTriangle itm40 = new Mutagen.Bethesda.Skyrim.DoorTriangle();
                                                                    if (reader.TokenType != JsonTokenType.Null)
                                                                    {
                                                                        if (reader.TokenType != JsonTokenType.StartObject)
                                                                            throw new JsonException();
                                                                        while (true)
                                                                        {
                                                                            reader.Read();
                                                                            if (reader.TokenType == JsonTokenType.EndObject)
                                                                                break;
                                                                            var prop41 = reader.GetString();
                                                                            reader.Read();
                                                                            switch(prop41)
                                                                            {
                                                                                case "TriangleBeforeDoor":
                                                                                    itm40.TriangleBeforeDoor = reader.GetInt16();
                                                                                    break;
                                                                                case "Unknown":
                                                                                    itm40.Unknown = reader.GetInt32();
                                                                                    break;
                                                                                case "Door":
                                                                                    itm40.Door.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                                                                    break;
                                                                            }
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        reader.Skip();
                                                                    }
                                                                    itm32.Data.DoorTriangles.Add(itm40);
                                                                }
                                                            }
                                                            break;
                                                        case "NavmeshGridDivisor":
                                                            itm32.Data.NavmeshGridDivisor = reader.GetUInt32();
                                                            break;
                                                        case "MaxDistanceX":
                                                            itm32.Data.MaxDistanceX = reader.GetSingle();
                                                            break;
                                                        case "MaxDistanceY":
                                                            itm32.Data.MaxDistanceY = reader.GetSingle();
                                                            break;
                                                        case "Min":
                                                            itm32.Data.Min = SerializerExtensions.ReadP3Float(ref reader, options);
                                                            break;
                                                        case "Max":
                                                            itm32.Data.Max = SerializerExtensions.ReadP3Float(ref reader, options);
                                                            break;
                                                        case "NavmeshGrid":
                                                            itm32.Data.NavmeshGrid = reader.GetBytesFromBase64();
                                                            break;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                reader.Skip();
                                            }
                                            break;
                                        case "ONAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm32.ONAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "PNAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm32.PNAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "NNAM":
                                            if (reader.TokenType != JsonTokenType.Null)
                                            {
                                                itm32.NNAM = reader.GetBytesFromBase64();
                                            }
                                            break;
                                        case "MajorFlags":
                                            itm32.MajorFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.NavigationMesh.MajorFlag>(ref reader, options);
                                            break;
                                        case "SkyrimMajorRecordFlags":
                                            itm32.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                                            break;
                                        case "FormVersion":
                                            itm32.FormVersion = reader.GetUInt16();
                                            break;
                                        case "Version2":
                                            itm32.Version2 = reader.GetUInt16();
                                            break;
                                        case "EditorID":
                                            itm32.EditorID = reader.GetString();
                                            break;
                                        case "TitleString":
                                            itm32.TitleString = reader.GetString();
                                            break;
                                        case "IsCompressed":
                                            itm32.IsCompressed = reader.GetBoolean();
                                            break;
                                        case "IsDeleted":
                                            itm32.IsDeleted = reader.GetBoolean();
                                            break;
                                        case "MajorRecordFlagsRaw":
                                            itm32.MajorRecordFlagsRaw = reader.GetInt32();
                                            break;
                                        case "FormKey":
                                            itm32.FormKey = SerializerExtensions.ReadFormKeyValue(ref reader, options);
                                            break;
                                        case "VersionControl":
                                            itm32.VersionControl = reader.GetUInt32();
                                            break;
                                    }
                                }
                            }
                            else
                            {
                                reader.Skip();
                            }
                            retval.NavigationMeshes.Add(itm32);
                        }
                    }
                    break;
                case "OcclusionData":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.OcclusionData = reader.GetBytesFromBase64();
                    }
                    break;
                case "Ownership":
                    retval.Ownership = new Mutagen.Bethesda.Skyrim.Ownership();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop42 = reader.GetString();
                            reader.Read();
                            switch(prop42)
                            {
                                case "Owner":
                                    if (reader.TokenType != JsonTokenType.Null)
                                        retval.Ownership.Owner.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                                    break;
                                case "FactionRank":
                                    if (reader.TokenType != JsonTokenType.Null)
                                    {
                                        retval.Ownership.FactionRank = reader.GetInt32();
                                    }
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "Persistent":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            IPlaced itm43 = default;
                            itm43 = IPlaced_Reader.ReadOuter(ref reader, options);
                            retval.Persistent.Add(itm43);
                        }
                    }
                    break;
                case "PersistentTimestamp":
                    retval.PersistentTimestamp = reader.GetInt32();
                    break;
                case "PersistentUnknownGroupData":
                    retval.PersistentUnknownGroupData = reader.GetInt32();
                    break;
                case "Regions":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.Regions ??= new();
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            retval.Regions.Add(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                        }
                    }
                    break;
                case "SkyAndWeatherFromRegion":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.SkyAndWeatherFromRegion.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "SkyrimMajorRecordFlags":
                    retval.SkyrimMajorRecordFlags = SerializerExtensions.ReadFlags<Mutagen.Bethesda.Skyrim.SkyrimMajorRecord.SkyrimMajorRecordFlag>(ref reader, options);
                    break;
                case "Temporary":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartArray)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndArray)
                                break;
                            IPlaced itm44 = default;
                            itm44 = IPlaced_Reader.ReadOuter(ref reader, options);
                            retval.Temporary.Add(itm44);
                        }
                    }
                    break;
                case "TemporaryTimestamp":
                    retval.TemporaryTimestamp = reader.GetInt32();
                    break;
                case "TemporaryUnknownGroupData":
                    retval.TemporaryUnknownGroupData = reader.GetInt32();
                    break;
                case "Timestamp":
                    retval.Timestamp = reader.GetInt32();
                    break;
                case "UnknownGroupData":
                    retval.UnknownGroupData = reader.GetInt32();
                    break;
                case "Version2":
                    retval.Version2 = reader.GetUInt16();
                    break;
                case "VersionControl":
                    retval.VersionControl = reader.GetUInt32();
                    break;
                case "Water":
                    if (reader.TokenType != JsonTokenType.Null)
                        retval.Water.SetTo(SerializerExtensions.ReadFormKeyValue(ref reader, options));
                    break;
                case "WaterEnvironmentMap":
                    retval.WaterEnvironmentMap = reader.GetString();
                    break;
                case "WaterHeight":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.WaterHeight = reader.GetSingle();
                    }
                    break;
                case "WaterNoiseTexture":
                    retval.WaterNoiseTexture = reader.GetString();
                    break;
                case "WaterVelocity":
                    retval.WaterVelocity = new Mutagen.Bethesda.Skyrim.CellWaterVelocity();
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        if (reader.TokenType != JsonTokenType.StartObject)
                            throw new JsonException();
                        while (true)
                        {
                            reader.Read();
                            if (reader.TokenType == JsonTokenType.EndObject)
                                break;
                            var prop45 = reader.GetString();
                            reader.Read();
                            switch(prop45)
                            {
                                case "Offset":
                                    retval.WaterVelocity.Offset = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown":
                                    retval.WaterVelocity.Unknown = reader.GetInt32();
                                    break;
                                case "Angle":
                                    retval.WaterVelocity.Angle = SerializerExtensions.ReadP3Float(ref reader, options);
                                    break;
                                case "Unknown2":
                                    retval.WaterVelocity.Unknown2 = reader.GetBytesFromBase64();
                                    break;
                            }
                        }
                    }
                    else
                    {
                        reader.Skip();
                    }
                    break;
                case "XWCN":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.XWCN = reader.GetBytesFromBase64();
                    }
                    break;
                case "XWCS":
                    if (reader.TokenType != JsonTokenType.Null)
                    {
                        retval.XWCS = reader.GetBytesFromBase64();
                    }
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }
        return retval;
    }
}
